name: Integration Test deployment

permissions:
  id-token: write

on:
  workflow_dispatch: {}
  merge_group: {}
  pull_request:
    branches:
      - main
    paths:
      - '**.js.snapshot**'

# In each PR, cancel any previous deployment integration test in progress for that PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  deployment_integ:
    runs-on: codebuild-aws-cdk-github-actions-deployment-integ-runner-${{ github.run_id }}-${{ github.run_attempt }}
    environment: deployment-integ-test

    env:
      PR_BUILD: true

    steps:
      - name: Checkout code 
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      
      - name: Assume Atmosphere Role
        id: creds
        run: |
          # Assume role and capture the JSON output
          CREDS=$(aws sts assume-role \
          --role-arn ${{ vars.CDK_ATMOSPHERE_OIDC_ROLE }} \
          --role-session-name run-tests@aws-cdk-deployment-integ)

          # Parse the JSON output and set environment variables
          AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')
          AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')
          AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')

          echo "::add-mask::$AWS_ACCESS_KEY_ID"
          echo "::add-mask::$AWS_SECRET_ACCESS_KEY"
          echo "::add-mask::$AWS_SESSION_TOKEN"
          
          echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN" >> $GITHUB_ENV

      - name: Confirm that the atmosphere role has been assumed.
        run: |
          aws sts get-caller-identity   

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "yarn"

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Load Docker images
        id: docker-cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.docker-images.tar
          key: docker-cache-${{ runner.os }}

      - name: Restore Docker images
        if: ${{ steps.docker-cache.outputs.cache-hit }}
        run: docker image load --input ~/.docker-images.tar

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.s3buildcache
          key: s3buildcache-${{ runner.os }}

        # Increasing vm.max_map_count for running build in docker
      - name: Configure system settings for 
        run: |
          (command -v sysctl || sudo apt-get update && sudo apt-get install -y procps) && \
          sudo sysctl -w vm.max_map_count=2251954

      - name: Build
        run: /bin/bash ./build.sh --ci --skip-test --skip-prereqs --skip-compat

      - name: Run deployment integration tests
        run: node tools/@aws-cdk/deployment-integ/bin/deployment-integ.js
        env:
          CDK_ATMOSPHERE_ENDPOINT: ${{ vars.CDK_ATMOSPHERE_ENDPOINT }}
          CDK_ATMOSPHERE_POOL: ${{ vars.CDK_ATMOSPHERE_POOL}}
          TARGET_BRANCH_COMMIT: ${{ github.event.pull_request.base.sha }}
          SOURCE_BRANCH_COMMIT: ${{ github.event.pull_request.head.sha }}
          
      - name: Export Docker images
        if: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
        run: docker image save --output ~/.docker-images.tar $(docker image list --format '{{ if ne .Repository "<none>" }}{{ .Repository }}{{ if ne .Tag "<none>" }}:{{ .Tag }}{{ end }}{{ else }}{{ .ID }}{{ end }}')

      - name: Cache Docker images
        if: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
        uses: actions/cache/save@v4
        with:
          path: |
            ~/.docker-images.tar
          key: docker-cache-${{ runner.os }}
