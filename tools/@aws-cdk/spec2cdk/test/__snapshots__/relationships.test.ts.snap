// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`resource with array of nested properties with relationship 1`] = `
"/* eslint-disable prettier/prettier, @stylistic/max-len */
import * as cdk from "aws-cdk-lib";
import * as constructs from "constructs";
import * as cfn_parse from "aws-cdk-lib/core/lib/helpers-internal";
import * as cdk_errors from "aws-cdk-lib/core/lib/errors";

/**
 * Indicates that this resource can be referenced as a Role.
 *
 * @stability experimental
 */
export interface IRoleRef extends constructs.IConstruct {
  /**
   * A reference to a Role resource.
   */
  readonly roleRef: RoleReference;
}

/**
 * @cloudformationResource AWS::IAM::Role
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
 */
export class CfnRole extends cdk.CfnResource implements cdk.IInspectable, IRoleRef, cdk.ITaggable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::IAM::Role";

  /**
   * Build a CfnRole from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnRole {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnRolePropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new cdk_errors.ValidationError("Unexpected IResolvable", scope);
    }
    const ret = new CfnRole(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * @cloudformationAttribute RoleArn
   */
  public readonly attrRoleArn: string;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnRoleProps = {}) {
    super(scope, id, {
      "type": CfnRole.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    this.attrRoleArn = cdk.Token.asString(this.getAtt("RoleArn", cdk.ResolutionTypeHint.STRING));
  }

  public get roleRef(): RoleReference {
    return {
      "roleArn": this.attrRoleArn
    };
  }

  protected get cfnProperties(): Record<string, any> {
    return {};
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnRole.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnRolePropsToCloudFormation(props);
  }
}

/**
 * Properties for defining a \`CfnRole\`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
 */
export interface CfnRoleProps {

}

/**
 * A reference to a Role resource.
 *
 * @struct
 * @stability external
 */
export interface RoleReference {
  /**
   * The ARN of the Role resource.
   */
  readonly roleArn: string;
}

/**
 * Determine whether the given properties match those of a \`CfnRoleProps\`
 *
 * @param properties - the TypeScript properties of a \`CfnRoleProps\`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnRolePropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  return errors.wrap("supplied properties not correct for \\"CfnRoleProps\\"");
}

// @ts-ignore TS6133
function convertCfnRolePropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnRolePropsValidator(properties).assertSuccess();
  return {};
}

// @ts-ignore TS6133
function CfnRolePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRoleProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRoleProps>();
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Indicates that this resource can be referenced as a Resource.
 *
 * @stability experimental
 */
export interface IResourceRef extends constructs.IConstruct {
  /**
   * A reference to a Resource resource.
   */
  readonly resourceRef: ResourceReference;
}

/**
 * @cloudformationResource AWS::IAM::Resource
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-resource.html
 */
export class CfnResource extends cdk.CfnResource implements cdk.IInspectable, IResourceRef {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::IAM::Resource";

  /**
   * Build a CfnResource from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnResource {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnResourcePropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new cdk_errors.ValidationError("Unexpected IResolvable", scope);
    }
    const ret = new CfnResource(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  public permissions?: Array<cdk.IResolvable | CfnResource.PermissionProperty> | cdk.IResolvable;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnResourceProps = {}) {
    super(scope, id, {
      "type": CfnResource.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    this.permissions = (cdk.isResolvableObject(props.permissions) ? props.permissions : (props.permissions ? props.permissions.map(flattenCfnResourcePermissionProperty) : undefined));
  }

  public get resourceRef(): ResourceReference {
    return {};
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "permissions": this.permissions
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnResource.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnResourcePropsToCloudFormation(props);
  }
}

export namespace CfnResource {
  /**
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-resource-permission.html
   */
  export interface PermissionProperty {
    /**
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-resource-permission.html#cfn-iam-resource-permission-rolearn
     */
    readonly roleArn?: IRoleRef | string;
  }
}

/**
 * Properties for defining a \`CfnResource\`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-resource.html
 */
export interface CfnResourceProps {
  /**
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-resource.html#cfn-iam-resource-permissions
   */
  readonly permissions?: Array<cdk.IResolvable | CfnResource.PermissionProperty> | cdk.IResolvable;
}

// @ts-ignore TS6133
function flattenCfnResourcePermissionProperty(props: cdk.IResolvable | CfnResource.PermissionProperty): cdk.IResolvable | CfnResource.PermissionProperty {
  if (cdk.isResolvableObject(props)) return props;
  return {
    "roleArn": (props.roleArn as IRoleRef)?.roleRef?.roleArn ?? props.roleArn
  };
}

/**
 * Determine whether the given properties match those of a \`PermissionProperty\`
 *
 * @param properties - the TypeScript properties of a \`PermissionProperty\`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnResourcePermissionPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("roleArn", cdk.validateString)(properties.roleArn));
  return errors.wrap("supplied properties not correct for \\"PermissionProperty\\"");
}

// @ts-ignore TS6133
function convertCfnResourcePermissionPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnResourcePermissionPropertyValidator(properties).assertSuccess();
  return {
    "RoleArn": cdk.stringToCloudFormation(properties.roleArn)
  };
}

// @ts-ignore TS6133
function CfnResourcePermissionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnResource.PermissionProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResource.PermissionProperty>();
  ret.addPropertyResult("roleArn", "RoleArn", (properties.RoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.RoleArn) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * A reference to a Resource resource.
 *
 * @struct
 * @stability external
 */
export interface ResourceReference {

}

/**
 * Determine whether the given properties match those of a \`CfnResourceProps\`
 *
 * @param properties - the TypeScript properties of a \`CfnResourceProps\`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnResourcePropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("permissions", cdk.listValidator(CfnResourcePermissionPropertyValidator))(properties.permissions));
  return errors.wrap("supplied properties not correct for \\"CfnResourceProps\\"");
}

// @ts-ignore TS6133
function convertCfnResourcePropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnResourcePropsValidator(properties).assertSuccess();
  return {
    "Permissions": cdk.listMapper(convertCfnResourcePermissionPropertyToCloudFormation)(properties.permissions)
  };
}

// @ts-ignore TS6133
function CfnResourcePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResourceProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResourceProps>();
  ret.addPropertyResult("permissions", "Permissions", (properties.Permissions != null ? cfn_parse.FromCloudFormation.getArray(CfnResourcePermissionPropertyFromCloudFormation)(properties.Permissions) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}"
`;

exports[`resource with multiple relationship references 1`] = `
"/* eslint-disable prettier/prettier, @stylistic/max-len */
import * as cdk from "aws-cdk-lib";
import * as constructs from "constructs";
import * as cfn_parse from "aws-cdk-lib/core/lib/helpers-internal";
import * as cdk_errors from "aws-cdk-lib/core/lib/errors";

/**
 * Indicates that this resource can be referenced as a Role.
 *
 * @stability experimental
 */
export interface IRoleRef extends constructs.IConstruct {
  /**
   * A reference to a Role resource.
   */
  readonly roleRef: RoleReference;
}

/**
 * @cloudformationResource AWS::IAM::Role
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
 */
export class CfnRole extends cdk.CfnResource implements cdk.IInspectable, IRoleRef, cdk.ITaggable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::IAM::Role";

  /**
   * Build a CfnRole from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnRole {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnRolePropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new cdk_errors.ValidationError("Unexpected IResolvable", scope);
    }
    const ret = new CfnRole(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * @cloudformationAttribute RoleArn
   */
  public readonly attrRoleArn: string;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnRoleProps = {}) {
    super(scope, id, {
      "type": CfnRole.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    this.attrRoleArn = cdk.Token.asString(this.getAtt("RoleArn", cdk.ResolutionTypeHint.STRING));
  }

  public get roleRef(): RoleReference {
    return {
      "roleArn": this.attrRoleArn
    };
  }

  protected get cfnProperties(): Record<string, any> {
    return {};
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnRole.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnRolePropsToCloudFormation(props);
  }
}

/**
 * Properties for defining a \`CfnRole\`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
 */
export interface CfnRoleProps {

}

/**
 * A reference to a Role resource.
 *
 * @struct
 * @stability external
 */
export interface RoleReference {
  /**
   * The ARN of the Role resource.
   */
  readonly roleArn: string;
}

/**
 * Determine whether the given properties match those of a \`CfnRoleProps\`
 *
 * @param properties - the TypeScript properties of a \`CfnRoleProps\`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnRolePropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  return errors.wrap("supplied properties not correct for \\"CfnRoleProps\\"");
}

// @ts-ignore TS6133
function convertCfnRolePropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnRolePropsValidator(properties).assertSuccess();
  return {};
}

// @ts-ignore TS6133
function CfnRolePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRoleProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRoleProps>();
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Indicates that this resource can be referenced as a User.
 *
 * @stability experimental
 */
export interface IUserRef extends constructs.IConstruct {
  /**
   * A reference to a User resource.
   */
  readonly userRef: UserReference;
}

/**
 * @cloudformationResource AWS::IAM::User
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-user.html
 */
export class CfnUser extends cdk.CfnResource implements cdk.IInspectable, IUserRef, cdk.ITaggable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::IAM::User";

  /**
   * Build a CfnUser from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnUser {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnUserPropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new cdk_errors.ValidationError("Unexpected IResolvable", scope);
    }
    const ret = new CfnUser(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * @cloudformationAttribute UserArn
   */
  public readonly attrUserArn: string;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnUserProps = {}) {
    super(scope, id, {
      "type": CfnUser.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    this.attrUserArn = cdk.Token.asString(this.getAtt("UserArn", cdk.ResolutionTypeHint.STRING));
  }

  public get userRef(): UserReference {
    return {
      "userArn": this.attrUserArn
    };
  }

  protected get cfnProperties(): Record<string, any> {
    return {};
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnUser.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnUserPropsToCloudFormation(props);
  }
}

/**
 * Properties for defining a \`CfnUser\`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-user.html
 */
export interface CfnUserProps {

}

/**
 * A reference to a User resource.
 *
 * @struct
 * @stability external
 */
export interface UserReference {
  /**
   * The ARN of the User resource.
   */
  readonly userArn: string;
}

/**
 * Determine whether the given properties match those of a \`CfnUserProps\`
 *
 * @param properties - the TypeScript properties of a \`CfnUserProps\`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnUserPropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  return errors.wrap("supplied properties not correct for \\"CfnUserProps\\"");
}

// @ts-ignore TS6133
function convertCfnUserPropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnUserPropsValidator(properties).assertSuccess();
  return {};
}

// @ts-ignore TS6133
function CfnUserPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserProps>();
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Indicates that this resource can be referenced as a Policy.
 *
 * @stability experimental
 */
export interface IPolicyRef extends constructs.IConstruct {
  /**
   * A reference to a Policy resource.
   */
  readonly policyRef: PolicyReference;
}

/**
 * @cloudformationResource AWS::IAM::Policy
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html
 */
export class CfnPolicy extends cdk.CfnResource implements cdk.IInspectable, IPolicyRef {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::IAM::Policy";

  /**
   * Build a CfnPolicy from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnPolicy {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnPolicyPropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new cdk_errors.ValidationError("Unexpected IResolvable", scope);
    }
    const ret = new CfnPolicy(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  public principalArn?: string;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnPolicyProps = {}) {
    super(scope, id, {
      "type": CfnPolicy.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    this.principalArn = (props.principalArn as IRoleRef)?.roleRef?.roleArn ?? (props.principalArn as IUserRef)?.userRef?.userArn ?? props.principalArn;
  }

  public get policyRef(): PolicyReference {
    return {};
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "principalArn": this.principalArn
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnPolicy.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnPolicyPropsToCloudFormation(props);
  }
}

/**
 * Properties for defining a \`CfnPolicy\`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html
 */
export interface CfnPolicyProps {
  /**
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html#cfn-iam-policy-principalarn
   */
  readonly principalArn?: IRoleRef | IUserRef | string;
}

/**
 * A reference to a Policy resource.
 *
 * @struct
 * @stability external
 */
export interface PolicyReference {

}

/**
 * Determine whether the given properties match those of a \`CfnPolicyProps\`
 *
 * @param properties - the TypeScript properties of a \`CfnPolicyProps\`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnPolicyPropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("principalArn", cdk.validateString)(properties.principalArn));
  return errors.wrap("supplied properties not correct for \\"CfnPolicyProps\\"");
}

// @ts-ignore TS6133
function convertCfnPolicyPropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnPolicyPropsValidator(properties).assertSuccess();
  return {
    "PrincipalArn": cdk.stringToCloudFormation(properties.principalArn)
  };
}

// @ts-ignore TS6133
function CfnPolicyPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPolicyProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPolicyProps>();
  ret.addPropertyResult("principalArn", "PrincipalArn", (properties.PrincipalArn != null ? cfn_parse.FromCloudFormation.getString(properties.PrincipalArn) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}"
`;

exports[`resource with nested relationship requiring flattening 1`] = `
"/* eslint-disable prettier/prettier, @stylistic/max-len */
import * as cdk from "aws-cdk-lib";
import * as constructs from "constructs";
import * as cfn_parse from "aws-cdk-lib/core/lib/helpers-internal";
import * as cdk_errors from "aws-cdk-lib/core/lib/errors";

/**
 * Indicates that this resource can be referenced as a Role.
 *
 * @stability experimental
 */
export interface IRoleRef extends constructs.IConstruct {
  /**
   * A reference to a Role resource.
   */
  readonly roleRef: RoleReference;
}

/**
 * @cloudformationResource AWS::IAM::Role
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
 */
export class CfnRole extends cdk.CfnResource implements cdk.IInspectable, IRoleRef, cdk.ITaggable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::IAM::Role";

  /**
   * Build a CfnRole from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnRole {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnRolePropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new cdk_errors.ValidationError("Unexpected IResolvable", scope);
    }
    const ret = new CfnRole(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * @cloudformationAttribute RoleArn
   */
  public readonly attrRoleArn: string;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnRoleProps = {}) {
    super(scope, id, {
      "type": CfnRole.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    this.attrRoleArn = cdk.Token.asString(this.getAtt("RoleArn", cdk.ResolutionTypeHint.STRING));
  }

  public get roleRef(): RoleReference {
    return {
      "roleArn": this.attrRoleArn
    };
  }

  protected get cfnProperties(): Record<string, any> {
    return {};
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnRole.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnRolePropsToCloudFormation(props);
  }
}

/**
 * Properties for defining a \`CfnRole\`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
 */
export interface CfnRoleProps {

}

/**
 * A reference to a Role resource.
 *
 * @struct
 * @stability external
 */
export interface RoleReference {
  /**
   * The ARN of the Role resource.
   */
  readonly roleArn: string;
}

/**
 * Determine whether the given properties match those of a \`CfnRoleProps\`
 *
 * @param properties - the TypeScript properties of a \`CfnRoleProps\`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnRolePropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  return errors.wrap("supplied properties not correct for \\"CfnRoleProps\\"");
}

// @ts-ignore TS6133
function convertCfnRolePropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnRolePropsValidator(properties).assertSuccess();
  return {};
}

// @ts-ignore TS6133
function CfnRolePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRoleProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRoleProps>();
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Indicates that this resource can be referenced as a Task.
 *
 * @stability experimental
 */
export interface ITaskRef extends constructs.IConstruct {
  /**
   * A reference to a Task resource.
   */
  readonly taskRef: TaskReference;
}

/**
 * @cloudformationResource AWS::IAM::Task
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-task.html
 */
export class CfnTask extends cdk.CfnResource implements cdk.IInspectable, ITaskRef {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::IAM::Task";

  /**
   * Build a CfnTask from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnTask {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnTaskPropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new cdk_errors.ValidationError("Unexpected IResolvable", scope);
    }
    const ret = new CfnTask(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  public executionConfig?: CfnTask.ExecutionConfigProperty | cdk.IResolvable;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnTaskProps = {}) {
    super(scope, id, {
      "type": CfnTask.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    this.executionConfig = (props.executionConfig ? flattenCfnTaskExecutionConfigProperty(props.executionConfig) : undefined);
  }

  public get taskRef(): TaskReference {
    return {};
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "executionConfig": this.executionConfig
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnTask.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnTaskPropsToCloudFormation(props);
  }
}

export namespace CfnTask {
  /**
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-task-executionconfig.html
   */
  export interface ExecutionConfigProperty {
    /**
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-task-executionconfig.html#cfn-iam-task-executionconfig-rolearn
     */
    readonly roleArn?: IRoleRef | string;
  }
}

/**
 * Properties for defining a \`CfnTask\`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-task.html
 */
export interface CfnTaskProps {
  /**
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-task.html#cfn-iam-task-executionconfig
   */
  readonly executionConfig?: CfnTask.ExecutionConfigProperty | cdk.IResolvable;
}

// @ts-ignore TS6133
function flattenCfnTaskExecutionConfigProperty(props: CfnTask.ExecutionConfigProperty | cdk.IResolvable): CfnTask.ExecutionConfigProperty | cdk.IResolvable {
  if (cdk.isResolvableObject(props)) return props;
  return {
    "roleArn": (props.roleArn as IRoleRef)?.roleRef?.roleArn ?? props.roleArn
  };
}

/**
 * Determine whether the given properties match those of a \`ExecutionConfigProperty\`
 *
 * @param properties - the TypeScript properties of a \`ExecutionConfigProperty\`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnTaskExecutionConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("roleArn", cdk.validateString)(properties.roleArn));
  return errors.wrap("supplied properties not correct for \\"ExecutionConfigProperty\\"");
}

// @ts-ignore TS6133
function convertCfnTaskExecutionConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnTaskExecutionConfigPropertyValidator(properties).assertSuccess();
  return {
    "RoleArn": cdk.stringToCloudFormation(properties.roleArn)
  };
}

// @ts-ignore TS6133
function CfnTaskExecutionConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTask.ExecutionConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTask.ExecutionConfigProperty>();
  ret.addPropertyResult("roleArn", "RoleArn", (properties.RoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.RoleArn) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * A reference to a Task resource.
 *
 * @struct
 * @stability external
 */
export interface TaskReference {

}

/**
 * Determine whether the given properties match those of a \`CfnTaskProps\`
 *
 * @param properties - the TypeScript properties of a \`CfnTaskProps\`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnTaskPropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("executionConfig", CfnTaskExecutionConfigPropertyValidator)(properties.executionConfig));
  return errors.wrap("supplied properties not correct for \\"CfnTaskProps\\"");
}

// @ts-ignore TS6133
function convertCfnTaskPropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnTaskPropsValidator(properties).assertSuccess();
  return {
    "ExecutionConfig": convertCfnTaskExecutionConfigPropertyToCloudFormation(properties.executionConfig)
  };
}

// @ts-ignore TS6133
function CfnTaskPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskProps>();
  ret.addPropertyResult("executionConfig", "ExecutionConfig", (properties.ExecutionConfig != null ? CfnTaskExecutionConfigPropertyFromCloudFormation(properties.ExecutionConfig) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}"
`;

exports[`resource with nested relationship with type history 1`] = `
"/* eslint-disable prettier/prettier, @stylistic/max-len */
import * as cdk from "aws-cdk-lib";
import * as constructs from "constructs";
import * as cfn_parse from "aws-cdk-lib/core/lib/helpers-internal";
import * as cdk_errors from "aws-cdk-lib/core/lib/errors";

/**
 * Indicates that this resource can be referenced as a Role.
 *
 * @stability experimental
 */
export interface IRoleRef extends constructs.IConstruct {
  /**
   * A reference to a Role resource.
   */
  readonly roleRef: RoleReference;
}

/**
 * @cloudformationResource AWS::IAM::Role
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
 */
export class CfnRole extends cdk.CfnResource implements cdk.IInspectable, IRoleRef, cdk.ITaggable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::IAM::Role";

  /**
   * Build a CfnRole from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnRole {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnRolePropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new cdk_errors.ValidationError("Unexpected IResolvable", scope);
    }
    const ret = new CfnRole(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * @cloudformationAttribute RoleArn
   */
  public readonly attrRoleArn: string;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnRoleProps = {}) {
    super(scope, id, {
      "type": CfnRole.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    this.attrRoleArn = cdk.Token.asString(this.getAtt("RoleArn", cdk.ResolutionTypeHint.STRING));
  }

  public get roleRef(): RoleReference {
    return {
      "roleArn": this.attrRoleArn
    };
  }

  protected get cfnProperties(): Record<string, any> {
    return {};
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnRole.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnRolePropsToCloudFormation(props);
  }
}

/**
 * Properties for defining a \`CfnRole\`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
 */
export interface CfnRoleProps {

}

/**
 * A reference to a Role resource.
 *
 * @struct
 * @stability external
 */
export interface RoleReference {
  /**
   * The ARN of the Role resource.
   */
  readonly roleArn: string;
}

/**
 * Determine whether the given properties match those of a \`CfnRoleProps\`
 *
 * @param properties - the TypeScript properties of a \`CfnRoleProps\`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnRolePropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  return errors.wrap("supplied properties not correct for \\"CfnRoleProps\\"");
}

// @ts-ignore TS6133
function convertCfnRolePropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnRolePropsValidator(properties).assertSuccess();
  return {};
}

// @ts-ignore TS6133
function CfnRolePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRoleProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRoleProps>();
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Indicates that this resource can be referenced as a Job.
 *
 * @stability experimental
 */
export interface IJobRef extends constructs.IConstruct {
  /**
   * A reference to a Job resource.
   */
  readonly jobRef: JobReference;
}

/**
 * @cloudformationResource AWS::IAM::Job
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-job.html
 */
export class CfnJob extends cdk.CfnResource implements cdk.IInspectable, IJobRef {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::IAM::Job";

  /**
   * Build a CfnJob from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnJob {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnJobPropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new cdk_errors.ValidationError("Unexpected IResolvable", scope);
    }
    const ret = new CfnJob(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  public config?: cdk.IResolvable | CfnJob.OldConfigProperty;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnJobProps = {}) {
    super(scope, id, {
      "type": CfnJob.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    this.config = (props.config ? flattenCfnJobOldConfigProperty(props.config) : undefined);
  }

  public get jobRef(): JobReference {
    return {};
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "config": this.config
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnJob.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnJobPropsToCloudFormation(props);
  }
}

export namespace CfnJob {
  /**
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-job-config.html
   */
  export interface ConfigProperty {
    /**
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-job-config.html#cfn-iam-job-config-rolearn
     */
    readonly roleArn?: IRoleRef | string;

    /**
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-job-config.html#cfn-iam-job-config-timeout
     */
    readonly timeout?: number;
  }

  /**
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-job-oldconfig.html
   */
  export interface OldConfigProperty {
    /**
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-job-oldconfig.html#cfn-iam-job-oldconfig-rolearn
     */
    readonly roleArn?: IRoleRef | string;
  }
}

/**
 * Properties for defining a \`CfnJob\`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-job.html
 */
export interface CfnJobProps {
  /**
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-job.html#cfn-iam-job-config
   */
  readonly config?: cdk.IResolvable | CfnJob.OldConfigProperty;
}

// @ts-ignore TS6133
function flattenCfnJobConfigProperty(props: CfnJob.ConfigProperty | cdk.IResolvable): CfnJob.ConfigProperty | cdk.IResolvable {
  if (cdk.isResolvableObject(props)) return props;
  return {
    "roleArn": (props.roleArn as IRoleRef)?.roleRef?.roleArn ?? props.roleArn,
    "timeout": props.timeout
  };
}

/**
 * Determine whether the given properties match those of a \`ConfigProperty\`
 *
 * @param properties - the TypeScript properties of a \`ConfigProperty\`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnJobConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("roleArn", cdk.validateString)(properties.roleArn));
  errors.collect(cdk.propertyValidator("timeout", cdk.validateNumber)(properties.timeout));
  return errors.wrap("supplied properties not correct for \\"ConfigProperty\\"");
}

// @ts-ignore TS6133
function convertCfnJobConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnJobConfigPropertyValidator(properties).assertSuccess();
  return {
    "RoleArn": cdk.stringToCloudFormation(properties.roleArn),
    "Timeout": cdk.numberToCloudFormation(properties.timeout)
  };
}

// @ts-ignore TS6133
function CfnJobConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnJob.ConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnJob.ConfigProperty>();
  ret.addPropertyResult("roleArn", "RoleArn", (properties.RoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.RoleArn) : undefined));
  ret.addPropertyResult("timeout", "Timeout", (properties.Timeout != null ? cfn_parse.FromCloudFormation.getNumber(properties.Timeout) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

// @ts-ignore TS6133
function flattenCfnJobOldConfigProperty(props: cdk.IResolvable | CfnJob.OldConfigProperty): cdk.IResolvable | CfnJob.OldConfigProperty {
  if (cdk.isResolvableObject(props)) return props;
  return {
    "roleArn": (props.roleArn as IRoleRef)?.roleRef?.roleArn ?? props.roleArn
  };
}

/**
 * Determine whether the given properties match those of a \`OldConfigProperty\`
 *
 * @param properties - the TypeScript properties of a \`OldConfigProperty\`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnJobOldConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("roleArn", cdk.validateString)(properties.roleArn));
  return errors.wrap("supplied properties not correct for \\"OldConfigProperty\\"");
}

// @ts-ignore TS6133
function convertCfnJobOldConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnJobOldConfigPropertyValidator(properties).assertSuccess();
  return {
    "RoleArn": cdk.stringToCloudFormation(properties.roleArn)
  };
}

// @ts-ignore TS6133
function CfnJobOldConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnJob.OldConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnJob.OldConfigProperty>();
  ret.addPropertyResult("roleArn", "RoleArn", (properties.RoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.RoleArn) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * A reference to a Job resource.
 *
 * @struct
 * @stability external
 */
export interface JobReference {

}

/**
 * Determine whether the given properties match those of a \`CfnJobProps\`
 *
 * @param properties - the TypeScript properties of a \`CfnJobProps\`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnJobPropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("config", CfnJobOldConfigPropertyValidator)(properties.config));
  return errors.wrap("supplied properties not correct for \\"CfnJobProps\\"");
}

// @ts-ignore TS6133
function convertCfnJobPropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnJobPropsValidator(properties).assertSuccess();
  return {
    "Config": convertCfnJobOldConfigPropertyToCloudFormation(properties.config)
  };
}

// @ts-ignore TS6133
function CfnJobPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnJobProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnJobProps>();
  ret.addPropertyResult("config", "Config", (properties.Config != null ? CfnJobOldConfigPropertyFromCloudFormation(properties.Config) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}"
`;

exports[`resource with relationship reference 1`] = `
"/* eslint-disable prettier/prettier, @stylistic/max-len */
import * as cdk from "aws-cdk-lib";
import * as constructs from "constructs";
import * as cfn_parse from "aws-cdk-lib/core/lib/helpers-internal";
import * as cdk_errors from "aws-cdk-lib/core/lib/errors";

/**
 * Indicates that this resource can be referenced as a Role.
 *
 * @stability experimental
 */
export interface IRoleRef extends constructs.IConstruct {
  /**
   * A reference to a Role resource.
   */
  readonly roleRef: RoleReference;
}

/**
 * @cloudformationResource AWS::IAM::Role
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
 */
export class CfnRole extends cdk.CfnResource implements cdk.IInspectable, IRoleRef, cdk.ITaggable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::IAM::Role";

  /**
   * Build a CfnRole from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnRole {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnRolePropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new cdk_errors.ValidationError("Unexpected IResolvable", scope);
    }
    const ret = new CfnRole(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * @cloudformationAttribute RoleArn
   */
  public readonly attrRoleArn: string;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnRoleProps = {}) {
    super(scope, id, {
      "type": CfnRole.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    this.attrRoleArn = cdk.Token.asString(this.getAtt("RoleArn", cdk.ResolutionTypeHint.STRING));
  }

  public get roleRef(): RoleReference {
    return {
      "roleArn": this.attrRoleArn
    };
  }

  protected get cfnProperties(): Record<string, any> {
    return {};
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnRole.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnRolePropsToCloudFormation(props);
  }
}

/**
 * Properties for defining a \`CfnRole\`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
 */
export interface CfnRoleProps {

}

/**
 * A reference to a Role resource.
 *
 * @struct
 * @stability external
 */
export interface RoleReference {
  /**
   * The ARN of the Role resource.
   */
  readonly roleArn: string;
}

/**
 * Determine whether the given properties match those of a \`CfnRoleProps\`
 *
 * @param properties - the TypeScript properties of a \`CfnRoleProps\`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnRolePropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  return errors.wrap("supplied properties not correct for \\"CfnRoleProps\\"");
}

// @ts-ignore TS6133
function convertCfnRolePropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnRolePropsValidator(properties).assertSuccess();
  return {};
}

// @ts-ignore TS6133
function CfnRolePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRoleProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRoleProps>();
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Indicates that this resource can be referenced as a Function.
 *
 * @stability experimental
 */
export interface IFunctionRef extends constructs.IConstruct {
  /**
   * A reference to a Function resource.
   */
  readonly functionRef: FunctionReference;
}

/**
 * @cloudformationResource AWS::IAM::Function
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-function.html
 */
export class CfnFunction extends cdk.CfnResource implements cdk.IInspectable, IFunctionRef {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::IAM::Function";

  /**
   * Build a CfnFunction from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnFunction {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnFunctionPropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new cdk_errors.ValidationError("Unexpected IResolvable", scope);
    }
    const ret = new CfnFunction(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  public roleArn?: string;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnFunctionProps = {}) {
    super(scope, id, {
      "type": CfnFunction.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    this.roleArn = (props.roleArn as IRoleRef)?.roleRef?.roleArn ?? props.roleArn;
  }

  public get functionRef(): FunctionReference {
    return {};
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "roleArn": this.roleArn
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnFunction.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnFunctionPropsToCloudFormation(props);
  }
}

/**
 * Properties for defining a \`CfnFunction\`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-function.html
 */
export interface CfnFunctionProps {
  /**
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-function.html#cfn-iam-function-rolearn
   */
  readonly roleArn?: IRoleRef | string;
}

/**
 * A reference to a Function resource.
 *
 * @struct
 * @stability external
 */
export interface FunctionReference {

}

/**
 * Determine whether the given properties match those of a \`CfnFunctionProps\`
 *
 * @param properties - the TypeScript properties of a \`CfnFunctionProps\`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnFunctionPropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("roleArn", cdk.validateString)(properties.roleArn));
  return errors.wrap("supplied properties not correct for \\"CfnFunctionProps\\"");
}

// @ts-ignore TS6133
function convertCfnFunctionPropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnFunctionPropsValidator(properties).assertSuccess();
  return {
    "RoleArn": cdk.stringToCloudFormation(properties.roleArn)
  };
}

// @ts-ignore TS6133
function CfnFunctionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFunctionProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFunctionProps>();
  ret.addPropertyResult("roleArn", "RoleArn", (properties.RoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.RoleArn) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}"
`;
