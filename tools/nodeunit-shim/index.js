"use strict";
/**
 * Jest/Nodeunit compatibility shim
 *
 * Use this to mass-convert Nodeunit tests to Jest tests.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.nodeunitShim = exports.Test = void 0;
/**
 * Compatibility shim test
 */
class Test {
    constructor(cb) {
        this.cb = cb;
    }
    equal(actual, expected, _message) {
        expect(actual).toEqual(expected);
    }
    notEqual(actual, expected, _message) {
        expect(actual).not.toEqual(expected);
    }
    equals(actual, expected, _message) {
        expect(actual).toEqual(expected);
    }
    strictEqual(actual, expected, _message) {
        expect(actual).toEqual(expected);
    }
    deepEqual(actual, expected, _message) {
        expect(actual).toEqual(expected);
    }
    notDeepEqual(actual, expected, _message) {
        expect(actual).not.toEqual(expected);
    }
    ok(actual, _message) {
        expect(actual).toBeTruthy();
    }
    same(actual, expected) {
        expect(actual).toBe(expected);
    }
    throws(block, error, _message) {
        expect(block).toThrow(error);
    }
    doesNotThrow(block, error, _message) {
        expect(block).not.toThrow(error);
    }
    done() {
        this.cb();
    }
}
exports.Test = Test;
function nodeunitShim(exports) {
    if (exports.setUp) {
        beforeEach(() => {
            return new Promise(ok => {
                exports.setUp(ok);
            });
        });
    }
    if (exports.tearDown) {
        afterEach(() => {
            return new Promise(ok => {
                exports.tearDown(ok);
            });
        });
    }
    for (const [testName, testObj] of Object.entries(exports)) {
        if (testName === 'setUp' || testName === 'tearDown') {
            continue;
        }
        if (typeof testObj === 'object') {
            // It's a suite
            describe(testName, () => {
                nodeunitShim(testObj);
            });
        }
        else {
            // It's a test
            test(testName, () => new Promise(ok => {
                testObj(new Test(ok));
            }));
        }
    }
}
exports.nodeunitShim = nodeunitShim;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7R0FJRzs7O0FBRUg7O0dBRUc7QUFDSCxNQUFhLElBQUk7SUFDZixZQUE2QixFQUFjO1FBQWQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtJQUMzQyxDQUFDO0lBRU0sS0FBSyxDQUFDLE1BQVcsRUFBRSxRQUFhLEVBQUUsUUFBaUI7UUFDeEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRU0sUUFBUSxDQUFDLE1BQVcsRUFBRSxRQUFhLEVBQUUsUUFBaUI7UUFDM0QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxNQUFXLEVBQUUsUUFBYSxFQUFFLFFBQWlCO1FBQ3pELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVNLFdBQVcsQ0FBQyxNQUFXLEVBQUUsUUFBYSxFQUFFLFFBQWlCO1FBQzlELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVNLFNBQVMsQ0FBQyxNQUFXLEVBQUUsUUFBYSxFQUFFLFFBQWlCO1FBQzVELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVNLFlBQVksQ0FBQyxNQUFXLEVBQUUsUUFBYSxFQUFFLFFBQWlCO1FBQy9ELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFTSxFQUFFLENBQUMsTUFBVyxFQUFFLFFBQWlCO1FBQ3RDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUM5QixDQUFDO0lBRU0sSUFBSSxDQUFDLE1BQVcsRUFBRSxRQUFhO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxLQUFnQixFQUFFLEtBQTBDLEVBQUUsUUFBaUI7UUFDM0YsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRU0sWUFBWSxDQUFDLEtBQWdCLEVBQUUsS0FBMEMsRUFBRSxRQUFpQjtRQUNqRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRU0sSUFBSTtRQUNULElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztJQUNaLENBQUM7Q0FDRjtBQS9DRCxvQkErQ0M7QUFFRCxTQUFnQixZQUFZLENBQUMsT0FBNEI7SUFDdkQsSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFO1FBQ2pCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCxPQUFPLElBQUksT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFO2dCQUN0QixPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3BCLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7S0FDSjtJQUNELElBQUksT0FBTyxDQUFDLFFBQVEsRUFBRTtRQUNwQixTQUFTLENBQUMsR0FBRyxFQUFFO1lBQ2IsT0FBTyxJQUFJLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRTtnQkFDdEIsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN2QixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0tBQ0o7SUFDRCxLQUFLLE1BQU0sQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUN6RCxJQUFJLFFBQVEsS0FBSyxPQUFPLElBQUksUUFBUSxLQUFLLFVBQVUsRUFBRTtZQUFFLFNBQVM7U0FBRTtRQUVsRSxJQUFJLE9BQU8sT0FBTyxLQUFLLFFBQVEsRUFBRTtZQUMvQixlQUFlO1lBQ2YsUUFBUSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUU7Z0JBQ3RCLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN4QixDQUFDLENBQUMsQ0FBQztTQUNKO2FBQU07WUFDTCxjQUFjO1lBQ2QsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLE9BQU8sQ0FBTyxFQUFFLENBQUMsRUFBRTtnQkFDMUMsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDeEIsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNMO0tBQ0Y7QUFDSCxDQUFDO0FBOUJELG9DQThCQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSmVzdC9Ob2RldW5pdCBjb21wYXRpYmlsaXR5IHNoaW1cbiAqXG4gKiBVc2UgdGhpcyB0byBtYXNzLWNvbnZlcnQgTm9kZXVuaXQgdGVzdHMgdG8gSmVzdCB0ZXN0cy5cbiAqL1xuXG4vKipcbiAqIENvbXBhdGliaWxpdHkgc2hpbSB0ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBUZXN0IHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBjYjogKCkgPT4gdm9pZCkge1xuICB9XG5cbiAgcHVibGljIGVxdWFsKGFjdHVhbDogYW55LCBleHBlY3RlZDogYW55LCBfbWVzc2FnZT86IHN0cmluZykge1xuICAgIGV4cGVjdChhY3R1YWwpLnRvRXF1YWwoZXhwZWN0ZWQpO1xuICB9XG5cbiAgcHVibGljIG5vdEVxdWFsKGFjdHVhbDogYW55LCBleHBlY3RlZDogYW55LCBfbWVzc2FnZT86IHN0cmluZykge1xuICAgIGV4cGVjdChhY3R1YWwpLm5vdC50b0VxdWFsKGV4cGVjdGVkKTtcbiAgfVxuXG4gIHB1YmxpYyBlcXVhbHMoYWN0dWFsOiBhbnksIGV4cGVjdGVkOiBhbnksIF9tZXNzYWdlPzogc3RyaW5nKSB7XG4gICAgZXhwZWN0KGFjdHVhbCkudG9FcXVhbChleHBlY3RlZCk7XG4gIH1cblxuICBwdWJsaWMgc3RyaWN0RXF1YWwoYWN0dWFsOiBhbnksIGV4cGVjdGVkOiBhbnksIF9tZXNzYWdlPzogc3RyaW5nKSB7XG4gICAgZXhwZWN0KGFjdHVhbCkudG9FcXVhbChleHBlY3RlZCk7XG4gIH1cblxuICBwdWJsaWMgZGVlcEVxdWFsKGFjdHVhbDogYW55LCBleHBlY3RlZDogYW55LCBfbWVzc2FnZT86IHN0cmluZykge1xuICAgIGV4cGVjdChhY3R1YWwpLnRvRXF1YWwoZXhwZWN0ZWQpO1xuICB9XG5cbiAgcHVibGljIG5vdERlZXBFcXVhbChhY3R1YWw6IGFueSwgZXhwZWN0ZWQ6IGFueSwgX21lc3NhZ2U/OiBzdHJpbmcpIHtcbiAgICBleHBlY3QoYWN0dWFsKS5ub3QudG9FcXVhbChleHBlY3RlZCk7XG4gIH1cblxuICBwdWJsaWMgb2soYWN0dWFsOiBhbnksIF9tZXNzYWdlPzogc3RyaW5nKSB7XG4gICAgZXhwZWN0KGFjdHVhbCkudG9CZVRydXRoeSgpO1xuICB9XG5cbiAgcHVibGljIHNhbWUoYWN0dWFsOiBhbnksIGV4cGVjdGVkOiBhbnkpIHtcbiAgICBleHBlY3QoYWN0dWFsKS50b0JlKGV4cGVjdGVkKTtcbiAgfVxuXG4gIHB1YmxpYyB0aHJvd3MoYmxvY2s6ICgpID0+IGFueSwgZXJyb3I/OiBzdHJpbmcgfCBSZWdFeHAgfCBFcnJvckNvbnN0cnVjdG9yLCBfbWVzc2FnZT86IHN0cmluZykge1xuICAgIGV4cGVjdChibG9jaykudG9UaHJvdyhlcnJvcik7XG4gIH1cblxuICBwdWJsaWMgZG9lc05vdFRocm93KGJsb2NrOiAoKSA9PiBhbnksIGVycm9yPzogc3RyaW5nIHwgUmVnRXhwIHwgRXJyb3JDb25zdHJ1Y3RvciwgX21lc3NhZ2U/OiBzdHJpbmcpIHtcbiAgICBleHBlY3QoYmxvY2spLm5vdC50b1Rocm93KGVycm9yKTtcbiAgfVxuXG4gIHB1YmxpYyBkb25lKCkge1xuICAgIHRoaXMuY2IoKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbm9kZXVuaXRTaGltKGV4cG9ydHM6IFJlY29yZDxzdHJpbmcsIGFueT4pIHtcbiAgaWYgKGV4cG9ydHMuc2V0VXApIHtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShvayA9PiB7XG4gICAgICAgIGV4cG9ydHMuc2V0VXAob2spO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgaWYgKGV4cG9ydHMudGVhckRvd24pIHtcbiAgICBhZnRlckVhY2goKCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKG9rID0+IHtcbiAgICAgICAgZXhwb3J0cy50ZWFyRG93bihvayk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICBmb3IgKGNvbnN0IFt0ZXN0TmFtZSwgdGVzdE9ial0gb2YgT2JqZWN0LmVudHJpZXMoZXhwb3J0cykpIHtcbiAgICBpZiAodGVzdE5hbWUgPT09ICdzZXRVcCcgfHwgdGVzdE5hbWUgPT09ICd0ZWFyRG93bicpIHsgY29udGludWU7IH1cblxuICAgIGlmICh0eXBlb2YgdGVzdE9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICAgIC8vIEl0J3MgYSBzdWl0ZVxuICAgICAgZGVzY3JpYmUodGVzdE5hbWUsICgpID0+IHtcbiAgICAgICAgbm9kZXVuaXRTaGltKHRlc3RPYmopO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEl0J3MgYSB0ZXN0XG4gICAgICB0ZXN0KHRlc3ROYW1lLCAoKSA9PiBuZXcgUHJvbWlzZTx2b2lkPihvayA9PiB7XG4gICAgICAgIHRlc3RPYmoobmV3IFRlc3Qob2spKTtcbiAgICAgIH0pKTtcbiAgICB9XG4gIH1cbn1cblxudHlwZSBFcnJvckNvbnN0cnVjdG9yID0gbmV3ICguLi5hcmdzOiBhbnlbXSkgPT4gRXJyb3I7XG4iXX0=