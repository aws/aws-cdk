import path = require('path');
import { compileCurrentPackage } from '../lib/compile';
import { shell } from '../lib/os';
import { configFilePath, hasIntegTests, hasOnlyAutogeneratedTests, unitTestFiles } from '../lib/package-info';
import { Timers } from '../lib/timer';

async function main() {
    // Always recompile before running tests, so it's impossible to forget.
    // During a normal build, this means we'll compile twice, but the
    // hash calculation makes that cheaper on CPU (if not on disk).
    await compileCurrentPackage(timers);

    const testFiles = await unitTestFiles();
    if (testFiles.length > 0) {
        const testCommand: string[] = [];

        const nycrc = configFilePath('nycrc');

        // We always run the tests, but include an 'nyc' run (for coverage)
        // if and only if the package is not completely autogenerated.
        //
        // The nyc configuration file is passed, in a silly way. The '--nycrc-path'
        // is always appended to the current directory (whether prefixed with a '/'
        // or not). So we need to split the actual filename into dirname and
        // basename to pass it correctly. '--cwd' does not actually cwd(), it
        // just changes the base path that the '--nycrc-path' is appended to.
        //
        // Coverage tresholds can be overridden in the per-package package.json
        // if necessary.
        if (!await hasOnlyAutogeneratedTests()) {
            testCommand.push(...['nyc',
                '--clean',
                '--cwd', path.dirname(nycrc),
                '--nycrc-path', path.basename(nycrc)
            ]);
        }
        testCommand.push('nodeunit');
        testCommand.push(...testFiles);

        await shell(testCommand, timers);
    }

    // Run integration test if the package has integ test files
    if (await hasIntegTests()) {
        await shell(['cdk-integ-assert'], timers);
    }
}

const timers = new Timers();
const buildTimer = timers.start('Total time');

main().then(() => {
    buildTimer.end();
    process.stdout.write(`Tests successful. ${timers.display()}\n`);
}).catch(e => {
    buildTimer.end();
    process.stderr.write(`${e.toString()}\n`);
    process.stderr.write(`Tests failed. ${timers.display()}\n`);
    process.exit(1);
});
