{
 "Resources": {
  "authfunctionServiceRoleFCB72198": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "authfunction96361832": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "d7d3785243d748927f2a8d6edcecf909f96191df27a815e305aaeba98bcd2c64.zip"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "authfunctionServiceRoleFCB72198",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x"
   },
   "DependsOn": [
    "authfunctionServiceRoleFCB72198"
   ]
  },
  "MyHttpApi8AEAAC21": {
   "Type": "AWS::ApiGatewayV2::Api",
   "Properties": {
    "Name": "MyHttpApi",
    "ProtocolType": "HTTP"
   }
  },
  "MyHttpApiDefaultStageDCB9BC49": {
   "Type": "AWS::ApiGatewayV2::Stage",
   "Properties": {
    "ApiId": {
     "Ref": "MyHttpApi8AEAAC21"
    },
    "AutoDeploy": true,
    "StageName": "$default"
   }
  },
  "MyHttpApiGETRootIntegration5068C5B0": {
   "Type": "AWS::ApiGatewayV2::Integration",
   "Properties": {
    "ApiId": {
     "Ref": "MyHttpApi8AEAAC21"
    },
    "IntegrationType": "AWS_PROXY",
    "IntegrationUri": {
     "Fn::GetAtt": [
      "lambda8B5974B5",
      "Arn"
     ]
    },
    "PayloadFormatVersion": "2.0"
   }
  },
  "MyHttpApiGETRootIntegrationPermission81613491": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "lambda8B5974B5",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "MyHttpApi8AEAAC21"
       },
       "/*/*/"
      ]
     ]
    }
   }
  },
  "MyHttpApiGETE0EFC6F8": {
   "Type": "AWS::ApiGatewayV2::Route",
   "Properties": {
    "ApiId": {
     "Ref": "MyHttpApi8AEAAC21"
    },
    "AuthorizationType": "CUSTOM",
    "AuthorizerId": {
     "Ref": "MyHttpApiLambdaAuthorizerB8A0E2A4"
    },
    "RouteKey": "GET /",
    "Target": {
     "Fn::Join": [
      "",
      [
       "integrations/",
       {
        "Ref": "MyHttpApiGETRootIntegration5068C5B0"
       }
      ]
     ]
    }
   }
  },
  "MyHttpApiLambdaAuthorizerB8A0E2A4": {
   "Type": "AWS::ApiGatewayV2::Authorizer",
   "Properties": {
    "ApiId": {
     "Ref": "MyHttpApi8AEAAC21"
    },
    "AuthorizerPayloadFormatVersion": "2.0",
    "AuthorizerResultTtlInSeconds": 300,
    "AuthorizerType": "REQUEST",
    "AuthorizerUri": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":apigateway:",
       {
        "Ref": "AWS::Region"
       },
       ":lambda:path/2015-03-31/functions/",
       {
        "Fn::GetAtt": [
         "authfunction96361832",
         "Arn"
        ]
       },
       "/invocations"
      ]
     ]
    },
    "EnableSimpleResponses": true,
    "IdentitySource": [
     "$request.header.X-API-Key"
    ],
    "Name": "my-simple-authorizer"
   }
  },
  "MyHttpApiAuthorizerIntegMyHttpApiLambdaAuthorizerB89228D7Permission82260331": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "authfunction96361832",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "MyHttpApi8AEAAC21"
       },
       "/authorizers/",
       {
        "Ref": "MyHttpApiLambdaAuthorizerB8A0E2A4"
       }
      ]
     ]
    }
   }
  },
  "MyHttpApiWithDefaultAuthorizerE08800A1": {
   "Type": "AWS::ApiGatewayV2::Api",
   "Properties": {
    "Name": "MyHttpApiWithDefaultAuthorizer",
    "ProtocolType": "HTTP"
   }
  },
  "MyHttpApiWithDefaultAuthorizerDefaultStage7A9EE9B6": {
   "Type": "AWS::ApiGatewayV2::Stage",
   "Properties": {
    "ApiId": {
     "Ref": "MyHttpApiWithDefaultAuthorizerE08800A1"
    },
    "AutoDeploy": true,
    "StageName": "$default"
   }
  },
  "MyHttpApiWithDefaultAuthorizerLambdaDefaultAuthorizer9D407E65": {
   "Type": "AWS::ApiGatewayV2::Authorizer",
   "Properties": {
    "ApiId": {
     "Ref": "MyHttpApiWithDefaultAuthorizerE08800A1"
    },
    "AuthorizerPayloadFormatVersion": "2.0",
    "AuthorizerResultTtlInSeconds": 300,
    "AuthorizerType": "REQUEST",
    "AuthorizerUri": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":apigateway:",
       {
        "Ref": "AWS::Region"
       },
       ":lambda:path/2015-03-31/functions/",
       {
        "Fn::GetAtt": [
         "authfunction96361832",
         "Arn"
        ]
       },
       "/invocations"
      ]
     ]
    },
    "EnableSimpleResponses": true,
    "IdentitySource": [
     "$request.header.X-API-Key"
    ],
    "Name": "my-simple-authorizer"
   }
  },
  "MyHttpApiWithDefaultAuthorizerAuthorizerIntegMyHttpApiWithDefaultAuthorizerLambdaDefaultAuthorizer1BC6EA35Permission700DB59D": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "authfunction96361832",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "MyHttpApiWithDefaultAuthorizerE08800A1"
       },
       "/authorizers/",
       {
        "Ref": "MyHttpApiWithDefaultAuthorizerLambdaDefaultAuthorizer9D407E65"
       }
      ]
     ]
    }
   }
  },
  "lambdaServiceRole494E4CA6": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "lambda8B5974B5": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "54deaef2af5b9afbfc9cbcbb9261b1c0d4cce6560831d7ae1959f3da899011c8.zip"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "lambdaServiceRole494E4CA6",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x"
   },
   "DependsOn": [
    "lambdaServiceRole494E4CA6"
   ]
  },
  "RouteRootIntegration1CF58575": {
   "Type": "AWS::ApiGatewayV2::Integration",
   "Properties": {
    "ApiId": {
     "Ref": "MyHttpApiWithDefaultAuthorizerE08800A1"
    },
    "IntegrationType": "AWS_PROXY",
    "IntegrationUri": {
     "Fn::GetAtt": [
      "lambda8B5974B5",
      "Arn"
     ]
    },
    "PayloadFormatVersion": "2.0"
   }
  },
  "RouteRootIntegrationPermissionC2C15701": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "lambda8B5974B5",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "MyHttpApiWithDefaultAuthorizerE08800A1"
       },
       "/*/*/v1/mything/{proxy+}"
      ]
     ]
    }
   }
  },
  "RouteA67450D2": {
   "Type": "AWS::ApiGatewayV2::Route",
   "Properties": {
    "ApiId": {
     "Ref": "MyHttpApiWithDefaultAuthorizerE08800A1"
    },
    "AuthorizationType": "CUSTOM",
    "AuthorizerId": {
     "Ref": "MyHttpApiWithDefaultAuthorizerLambdaDefaultAuthorizer9D407E65"
    },
    "RouteKey": "ANY /v1/mything/{proxy+}",
    "Target": {
     "Fn::Join": [
      "",
      [
       "integrations/",
       {
        "Ref": "RouteRootIntegration1CF58575"
       }
      ]
     ]
    }
   }
  }
 },
 "Outputs": {
  "URL": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "MyHttpApi8AEAAC21"
      },
      ".execute-api.",
      {
       "Ref": "AWS::Region"
      },
      ".",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/"
     ]
    ]
   }
  },
  "URLWithDefaultAuthorizer": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "MyHttpApiWithDefaultAuthorizerE08800A1"
      },
      ".execute-api.",
      {
       "Ref": "AWS::Region"
      },
      ".",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/"
     ]
    ]
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}