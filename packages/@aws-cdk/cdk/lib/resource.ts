import { ArnComponents } from './arn';
import { Construct, IConstruct } from './construct';
import { PhysicalName } from './physical-name';
import { CrossEnvironmentAttribute as CrossEnvironmentAttribute } from './private/cross-environment-token';
import { Stack } from './stack';
import { Token } from './token';

/**
 * Interface for the Resource construct.
 */
export interface IResource extends IConstruct {
  /**
   * The stack in which this resource is defined.
   */
  readonly stack: Stack;
}

/**
 * Construction properties for {@link Resource}.
 */
export interface ResourceProps {
  /**
   * The physical (that is, visible in the AWS Console) name of this resource.
   * By default, the name will be automatically generated by CloudFormation, at
   * deploy time.
   *
   * @default PhysicalName.auto()
   */
  readonly physicalName?: PhysicalName;
}

/**
 * A construct which represents an AWS resource.
 */
export abstract class Resource extends Construct implements IResource {
  public readonly stack: Stack;

  private readonly _physicalName: PhysicalName;

  constructor(scope: Construct, id: string, props: ResourceProps = {}) {
    super(scope, id);
    this.stack = Stack.of(this);
    this._physicalName = props.physicalName || PhysicalName.auto();
  }

  /**
   * Called when this resource is referenced across environments (account/region) to order to
   * request that a physical name will be generated for this resource during synthesis, so the
   * resource can be referenced through it's absolute name/arn.
   *
   * @internal
   */
  public _enableCrossEnvironment(): void {
    this._physicalName._resolveCrossEnvironment(this);
  }

  /**
   * Returns a string-encoded token that resolves to the physical name that should be
   * passed to the CloudFormation resource.
   *
   * This token will resolve to one of:
   * - `undefined`, when a name should be generated by cloudformation
   * - a concrete value, when the user supplied a name through `PhysicalName.of(x)`
   * - a name generated automatically during synthesis, in cross-account scenario.
   *
   * @experimental
   */
  protected get physicalName(): string {
    return this._physicalName.value;
  }

  /**
   * @experimental
   */
  protected getCrossEnvironmentAttributes(recipe: CrossEnvironmentRecipe): CrossEnvironmentAttributes {
    const arnToken = new CrossEnvironmentAttribute(recipe.arn, this.stack.formatArn(recipe.arnComponents), this);
    const nameToken = new CrossEnvironmentAttribute(recipe.name, this.physicalName, this);
    return {
      arn: Token.asString(arnToken, { displayHint: 'Arn' }),
      name: Token.asString(nameToken, { displayHint: 'Name' })
    };
  }
}

/**
 * Construction properties for {@link ResourceIdentifiers}.
 *
 * @experimental
 */
export interface CrossEnvironmentRecipe {
  /**
   * The ARN of the resource when referenced from the same stack.
   */
  readonly arn: string;

  /**
   * The name of the resource when referenced from the same stack.
   */
  readonly name: string;

  /**
   * The recipe for creating an ARN from a name for this resource.
   */
  readonly arnComponents: ArnComponents;
}

/**
 * The identifiers (name and ARN) for a given L2.
 * These should be only used inside the Construct Library implementation.
 *
 * @experimental
 */
export interface CrossEnvironmentAttributes {
  readonly arn: string;
  readonly name: string;
}
