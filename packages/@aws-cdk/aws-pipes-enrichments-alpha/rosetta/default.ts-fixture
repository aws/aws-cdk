// Fixture with packages imported, but nothing else
import * as cdk from 'aws-cdk-lib';
import * as sqs from 'aws-cdk-lib/aws-sqs';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import { Construct } from 'constructs';
import * as pipes from '@aws-cdk/aws-pipes-alpha';
import * as enrichments from '@aws-cdk/aws-pipes-enrichments-alpha';

class SomeSource implements pipes.ISource {
  sourceArn: string;
  sourceParameters = undefined;
  constructor(private readonly queue: sqs.Queue) {
    this.queue = queue;
    this.sourceArn = queue.queueArn;
  }
  bind(_pipe: pipes.IPipe): pipes.SourceConfig {
    return {
      sourceParameters: this.sourceParameters,
    };
  }
  grantRead(pipeRole: cdk.aws_iam.IRole): void {
    this.queue.grantConsumeMessages(pipeRole);
  }
}

class SomeTarget implements pipes.ITarget {
  targetArn: string;
  inputTransformation: pipes.InputTransformation | undefined;

  constructor(private readonly queue: sqs.Queue, props: {inputTransformation?: pipes.InputTransformation} = {}) {
    this.inputTransformation = props?.inputTransformation
    this.queue = queue;
    this.targetArn = queue.queueArn;
  }

  bind(_pipe: pipes.IPipe): pipes.TargetConfig {
    return {
      targetParameters: {
        inputTemplate: this.inputTransformation?.bind(_pipe).inputTemplate,
      },
    };
  }

  grantPush(pipeRole: cdk.aws_iam.IRole): void {
    this.queue.grantSendMessages(pipeRole);
  }
}

class Fixture extends cdk.Stack {
  constructor(scope: Construct, id: string) {
    super(scope, id);
    /// here
  }
}

