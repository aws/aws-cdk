"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const integ = require("@aws-cdk/integ-tests-alpha");
const cdk = require("aws-cdk-lib");
const rum = require("../lib");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'RumAlphaAppMonitorIntegrationTestStack');
// Basic app monitor with minimal configuration
const basicAppMonitor = new rum.AppMonitor(stack, 'BasicAppMonitor', {
    appMonitorName: 'basic-alpha-integ-test-app',
    domain: 'example.com',
});
// App monitor with CloudWatch logs enabled
const appMonitorWithLogs = new rum.AppMonitor(stack, 'AppMonitorWithLogs', {
    appMonitorName: 'alpha-integ-test-app-with-logs',
    domain: 'example.com',
    cwLogEnabled: true,
});
// App monitor with configuration
const configuredAppMonitor = new rum.AppMonitor(stack, 'ConfiguredAppMonitor', {
    appMonitorName: 'configured-alpha-integ-test-app',
    domain: 'example.com',
    appMonitorConfiguration: {
        allowCookies: true,
        enableXRay: true,
        sessionSampleRate: 0.3,
    },
    customEvents: {
        enabled: true,
    },
});
// Test log group access
const logGroup = appMonitorWithLogs.logGroup;
// Outputs for verification
new cdk.CfnOutput(stack, 'BasicAppMonitorId', {
    value: basicAppMonitor.appMonitorId,
});
new cdk.CfnOutput(stack, 'BasicAppMonitorName', {
    value: basicAppMonitor.appMonitorName,
});
new cdk.CfnOutput(stack, 'AppMonitorWithLogsId', {
    value: appMonitorWithLogs.appMonitorId,
});
new cdk.CfnOutput(stack, 'ConfiguredAppMonitorId', {
    value: configuredAppMonitor.appMonitorId,
});
if (logGroup) {
    new cdk.CfnOutput(stack, 'LogGroupName', {
        value: logGroup.logGroupName,
    });
}
new integ.IntegTest(app, 'RumAlphaAppMonitorIntegrationTest', {
    testCases: [stack],
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuYXBwLW1vbml0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy5hcHAtbW9uaXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG9EQUFvRDtBQUNwRCxtQ0FBbUM7QUFDbkMsOEJBQThCO0FBRTlCLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBRTFCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsd0NBQXdDLENBQUMsQ0FBQztBQUUzRSwrQ0FBK0M7QUFDL0MsTUFBTSxlQUFlLEdBQUcsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxpQkFBaUIsRUFBRTtJQUNuRSxjQUFjLEVBQUUsNEJBQTRCO0lBQzVDLE1BQU0sRUFBRSxhQUFhO0NBQ3RCLENBQUMsQ0FBQztBQUVILDJDQUEyQztBQUMzQyxNQUFNLGtCQUFrQixHQUFHLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsb0JBQW9CLEVBQUU7SUFDekUsY0FBYyxFQUFFLGdDQUFnQztJQUNoRCxNQUFNLEVBQUUsYUFBYTtJQUNyQixZQUFZLEVBQUUsSUFBSTtDQUNuQixDQUFDLENBQUM7QUFFSCxpQ0FBaUM7QUFDakMsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLHNCQUFzQixFQUFFO0lBQzdFLGNBQWMsRUFBRSxpQ0FBaUM7SUFDakQsTUFBTSxFQUFFLGFBQWE7SUFDckIsdUJBQXVCLEVBQUU7UUFDdkIsWUFBWSxFQUFFLElBQUk7UUFDbEIsVUFBVSxFQUFFLElBQUk7UUFDaEIsaUJBQWlCLEVBQUUsR0FBRztLQUN2QjtJQUNELFlBQVksRUFBRTtRQUNaLE9BQU8sRUFBRSxJQUFJO0tBQ2Q7Q0FDRixDQUFDLENBQUM7QUFFSCx3QkFBd0I7QUFDeEIsTUFBTSxRQUFRLEdBQUcsa0JBQWtCLENBQUMsUUFBUSxDQUFDO0FBRTdDLDJCQUEyQjtBQUMzQixJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLG1CQUFtQixFQUFFO0lBQzVDLEtBQUssRUFBRSxlQUFlLENBQUMsWUFBWTtDQUNwQyxDQUFDLENBQUM7QUFFSCxJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLHFCQUFxQixFQUFFO0lBQzlDLEtBQUssRUFBRSxlQUFlLENBQUMsY0FBYztDQUN0QyxDQUFDLENBQUM7QUFFSCxJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLHNCQUFzQixFQUFFO0lBQy9DLEtBQUssRUFBRSxrQkFBa0IsQ0FBQyxZQUFZO0NBQ3ZDLENBQUMsQ0FBQztBQUVILElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsd0JBQXdCLEVBQUU7SUFDakQsS0FBSyxFQUFFLG9CQUFvQixDQUFDLFlBQVk7Q0FDekMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxRQUFRLEVBQUUsQ0FBQztJQUNiLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsY0FBYyxFQUFFO1FBQ3ZDLEtBQUssRUFBRSxRQUFRLENBQUMsWUFBWTtLQUM3QixDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxtQ0FBbUMsRUFBRTtJQUM1RCxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUM7Q0FDbkIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgaW50ZWcgZnJvbSAnQGF3cy1jZGsvaW50ZWctdGVzdHMtYWxwaGEnO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCAqIGFzIHJ1bSBmcm9tICcuLi9saWInO1xuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuXG5jb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soYXBwLCAnUnVtQWxwaGFBcHBNb25pdG9ySW50ZWdyYXRpb25UZXN0U3RhY2snKTtcblxuLy8gQmFzaWMgYXBwIG1vbml0b3Igd2l0aCBtaW5pbWFsIGNvbmZpZ3VyYXRpb25cbmNvbnN0IGJhc2ljQXBwTW9uaXRvciA9IG5ldyBydW0uQXBwTW9uaXRvcihzdGFjaywgJ0Jhc2ljQXBwTW9uaXRvcicsIHtcbiAgYXBwTW9uaXRvck5hbWU6ICdiYXNpYy1hbHBoYS1pbnRlZy10ZXN0LWFwcCcsXG4gIGRvbWFpbjogJ2V4YW1wbGUuY29tJyxcbn0pO1xuXG4vLyBBcHAgbW9uaXRvciB3aXRoIENsb3VkV2F0Y2ggbG9ncyBlbmFibGVkXG5jb25zdCBhcHBNb25pdG9yV2l0aExvZ3MgPSBuZXcgcnVtLkFwcE1vbml0b3Ioc3RhY2ssICdBcHBNb25pdG9yV2l0aExvZ3MnLCB7XG4gIGFwcE1vbml0b3JOYW1lOiAnYWxwaGEtaW50ZWctdGVzdC1hcHAtd2l0aC1sb2dzJyxcbiAgZG9tYWluOiAnZXhhbXBsZS5jb20nLFxuICBjd0xvZ0VuYWJsZWQ6IHRydWUsXG59KTtcblxuLy8gQXBwIG1vbml0b3Igd2l0aCBjb25maWd1cmF0aW9uXG5jb25zdCBjb25maWd1cmVkQXBwTW9uaXRvciA9IG5ldyBydW0uQXBwTW9uaXRvcihzdGFjaywgJ0NvbmZpZ3VyZWRBcHBNb25pdG9yJywge1xuICBhcHBNb25pdG9yTmFtZTogJ2NvbmZpZ3VyZWQtYWxwaGEtaW50ZWctdGVzdC1hcHAnLFxuICBkb21haW46ICdleGFtcGxlLmNvbScsXG4gIGFwcE1vbml0b3JDb25maWd1cmF0aW9uOiB7XG4gICAgYWxsb3dDb29raWVzOiB0cnVlLFxuICAgIGVuYWJsZVhSYXk6IHRydWUsXG4gICAgc2Vzc2lvblNhbXBsZVJhdGU6IDAuMyxcbiAgfSxcbiAgY3VzdG9tRXZlbnRzOiB7XG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgfSxcbn0pO1xuXG4vLyBUZXN0IGxvZyBncm91cCBhY2Nlc3NcbmNvbnN0IGxvZ0dyb3VwID0gYXBwTW9uaXRvcldpdGhMb2dzLmxvZ0dyb3VwO1xuXG4vLyBPdXRwdXRzIGZvciB2ZXJpZmljYXRpb25cbm5ldyBjZGsuQ2ZuT3V0cHV0KHN0YWNrLCAnQmFzaWNBcHBNb25pdG9ySWQnLCB7XG4gIHZhbHVlOiBiYXNpY0FwcE1vbml0b3IuYXBwTW9uaXRvcklkLFxufSk7XG5cbm5ldyBjZGsuQ2ZuT3V0cHV0KHN0YWNrLCAnQmFzaWNBcHBNb25pdG9yTmFtZScsIHtcbiAgdmFsdWU6IGJhc2ljQXBwTW9uaXRvci5hcHBNb25pdG9yTmFtZSxcbn0pO1xuXG5uZXcgY2RrLkNmbk91dHB1dChzdGFjaywgJ0FwcE1vbml0b3JXaXRoTG9nc0lkJywge1xuICB2YWx1ZTogYXBwTW9uaXRvcldpdGhMb2dzLmFwcE1vbml0b3JJZCxcbn0pO1xuXG5uZXcgY2RrLkNmbk91dHB1dChzdGFjaywgJ0NvbmZpZ3VyZWRBcHBNb25pdG9ySWQnLCB7XG4gIHZhbHVlOiBjb25maWd1cmVkQXBwTW9uaXRvci5hcHBNb25pdG9ySWQsXG59KTtcblxuaWYgKGxvZ0dyb3VwKSB7XG4gIG5ldyBjZGsuQ2ZuT3V0cHV0KHN0YWNrLCAnTG9nR3JvdXBOYW1lJywge1xuICAgIHZhbHVlOiBsb2dHcm91cC5sb2dHcm91cE5hbWUsXG4gIH0pO1xufVxuXG5uZXcgaW50ZWcuSW50ZWdUZXN0KGFwcCwgJ1J1bUFscGhhQXBwTW9uaXRvckludGVncmF0aW9uVGVzdCcsIHtcbiAgdGVzdENhc2VzOiBbc3RhY2tdLFxufSk7XG4iXX0=