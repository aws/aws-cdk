{
    "Resources": {
      "Vpc8378EB38": {
        "Type": "AWS::EC2::VPC",
        "Properties": {
          "CidrBlock": "10.0.0.0/16",
          "EnableDnsHostnames": true,
          "EnableDnsSupport": true,
          "InstanceTenancy": "default",
          "Tags": [
            {
              "Key": "Name",
              "Value": "aws-ecs-integ-exec-command/Vpc"
            }
          ]
        }
      },
      "VpcPublicSubnet1Subnet5C2D37C4": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "CidrBlock": "10.0.0.0/18",
          "VpcId": {
            "Ref": "Vpc8378EB38"
          },
          "AvailabilityZone": "test-region-1a",
          "MapPublicIpOnLaunch": true,
          "Tags": [
            {
              "Key": "aws-cdk:subnet-name",
              "Value": "Public"
            },
            {
              "Key": "aws-cdk:subnet-type",
              "Value": "Public"
            },
            {
              "Key": "Name",
              "Value": "aws-ecs-integ-exec-command/Vpc/PublicSubnet1"
            }
          ]
        }
      },
      "VpcPublicSubnet1RouteTable6C95E38E": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
          "VpcId": {
            "Ref": "Vpc8378EB38"
          },
          "Tags": [
            {
              "Key": "Name",
              "Value": "aws-ecs-integ-exec-command/Vpc/PublicSubnet1"
            }
          ]
        }
      },
      "VpcPublicSubnet1RouteTableAssociation97140677": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "RouteTableId": {
            "Ref": "VpcPublicSubnet1RouteTable6C95E38E"
          },
          "SubnetId": {
            "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
          }
        }
      },
      "VpcPublicSubnet1DefaultRoute3DA9E72A": {
        "Type": "AWS::EC2::Route",
        "Properties": {
          "RouteTableId": {
            "Ref": "VpcPublicSubnet1RouteTable6C95E38E"
          },
          "DestinationCidrBlock": "0.0.0.0/0",
          "GatewayId": {
            "Ref": "VpcIGWD7BA715C"
          }
        },
        "DependsOn": [
          "VpcVPCGWBF912B6E"
        ]
      },
      "VpcPublicSubnet1EIPD7E02669": {
        "Type": "AWS::EC2::EIP",
        "Properties": {
          "Domain": "vpc",
          "Tags": [
            {
              "Key": "Name",
              "Value": "aws-ecs-integ-exec-command/Vpc/PublicSubnet1"
            }
          ]
        }
      },
      "VpcPublicSubnet1NATGateway4D7517AA": {
        "Type": "AWS::EC2::NatGateway",
        "Properties": {
          "AllocationId": {
            "Fn::GetAtt": [
              "VpcPublicSubnet1EIPD7E02669",
              "AllocationId"
            ]
          },
          "SubnetId": {
            "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
          },
          "Tags": [
            {
              "Key": "Name",
              "Value": "aws-ecs-integ-exec-command/Vpc/PublicSubnet1"
            }
          ]
        }
      },
      "VpcPublicSubnet2Subnet691E08A3": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "CidrBlock": "10.0.64.0/18",
          "VpcId": {
            "Ref": "Vpc8378EB38"
          },
          "AvailabilityZone": "test-region-1b",
          "MapPublicIpOnLaunch": true,
          "Tags": [
            {
              "Key": "aws-cdk:subnet-name",
              "Value": "Public"
            },
            {
              "Key": "aws-cdk:subnet-type",
              "Value": "Public"
            },
            {
              "Key": "Name",
              "Value": "aws-ecs-integ-exec-command/Vpc/PublicSubnet2"
            }
          ]
        }
      },
      "VpcPublicSubnet2RouteTable94F7E489": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
          "VpcId": {
            "Ref": "Vpc8378EB38"
          },
          "Tags": [
            {
              "Key": "Name",
              "Value": "aws-ecs-integ-exec-command/Vpc/PublicSubnet2"
            }
          ]
        }
      },
      "VpcPublicSubnet2RouteTableAssociationDD5762D8": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "RouteTableId": {
            "Ref": "VpcPublicSubnet2RouteTable94F7E489"
          },
          "SubnetId": {
            "Ref": "VpcPublicSubnet2Subnet691E08A3"
          }
        }
      },
      "VpcPublicSubnet2DefaultRoute97F91067": {
        "Type": "AWS::EC2::Route",
        "Properties": {
          "RouteTableId": {
            "Ref": "VpcPublicSubnet2RouteTable94F7E489"
          },
          "DestinationCidrBlock": "0.0.0.0/0",
          "GatewayId": {
            "Ref": "VpcIGWD7BA715C"
          }
        },
        "DependsOn": [
          "VpcVPCGWBF912B6E"
        ]
      },
      "VpcPublicSubnet2EIP3C605A87": {
        "Type": "AWS::EC2::EIP",
        "Properties": {
          "Domain": "vpc",
          "Tags": [
            {
              "Key": "Name",
              "Value": "aws-ecs-integ-exec-command/Vpc/PublicSubnet2"
            }
          ]
        }
      },
      "VpcPublicSubnet2NATGateway9182C01D": {
        "Type": "AWS::EC2::NatGateway",
        "Properties": {
          "AllocationId": {
            "Fn::GetAtt": [
              "VpcPublicSubnet2EIP3C605A87",
              "AllocationId"
            ]
          },
          "SubnetId": {
            "Ref": "VpcPublicSubnet2Subnet691E08A3"
          },
          "Tags": [
            {
              "Key": "Name",
              "Value": "aws-ecs-integ-exec-command/Vpc/PublicSubnet2"
            }
          ]
        }
      },
      "VpcPrivateSubnet1Subnet536B997A": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "CidrBlock": "10.0.128.0/18",
          "VpcId": {
            "Ref": "Vpc8378EB38"
          },
          "AvailabilityZone": "test-region-1a",
          "MapPublicIpOnLaunch": false,
          "Tags": [
            {
              "Key": "aws-cdk:subnet-name",
              "Value": "Private"
            },
            {
              "Key": "aws-cdk:subnet-type",
              "Value": "Private"
            },
            {
              "Key": "Name",
              "Value": "aws-ecs-integ-exec-command/Vpc/PrivateSubnet1"
            }
          ]
        }
      },
      "VpcPrivateSubnet1RouteTableB2C5B500": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
          "VpcId": {
            "Ref": "Vpc8378EB38"
          },
          "Tags": [
            {
              "Key": "Name",
              "Value": "aws-ecs-integ-exec-command/Vpc/PrivateSubnet1"
            }
          ]
        }
      },
      "VpcPrivateSubnet1RouteTableAssociation70C59FA6": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "RouteTableId": {
            "Ref": "VpcPrivateSubnet1RouteTableB2C5B500"
          },
          "SubnetId": {
            "Ref": "VpcPrivateSubnet1Subnet536B997A"
          }
        }
      },
      "VpcPrivateSubnet1DefaultRouteBE02A9ED": {
        "Type": "AWS::EC2::Route",
        "Properties": {
          "RouteTableId": {
            "Ref": "VpcPrivateSubnet1RouteTableB2C5B500"
          },
          "DestinationCidrBlock": "0.0.0.0/0",
          "NatGatewayId": {
            "Ref": "VpcPublicSubnet1NATGateway4D7517AA"
          }
        }
      },
      "VpcPrivateSubnet2Subnet3788AAA1": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "CidrBlock": "10.0.192.0/18",
          "VpcId": {
            "Ref": "Vpc8378EB38"
          },
          "AvailabilityZone": "test-region-1b",
          "MapPublicIpOnLaunch": false,
          "Tags": [
            {
              "Key": "aws-cdk:subnet-name",
              "Value": "Private"
            },
            {
              "Key": "aws-cdk:subnet-type",
              "Value": "Private"
            },
            {
              "Key": "Name",
              "Value": "aws-ecs-integ-exec-command/Vpc/PrivateSubnet2"
            }
          ]
        }
      },
      "VpcPrivateSubnet2RouteTableA678073B": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
          "VpcId": {
            "Ref": "Vpc8378EB38"
          },
          "Tags": [
            {
              "Key": "Name",
              "Value": "aws-ecs-integ-exec-command/Vpc/PrivateSubnet2"
            }
          ]
        }
      },
      "VpcPrivateSubnet2RouteTableAssociationA89CAD56": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "RouteTableId": {
            "Ref": "VpcPrivateSubnet2RouteTableA678073B"
          },
          "SubnetId": {
            "Ref": "VpcPrivateSubnet2Subnet3788AAA1"
          }
        }
      },
      "VpcPrivateSubnet2DefaultRoute060D2087": {
        "Type": "AWS::EC2::Route",
        "Properties": {
          "RouteTableId": {
            "Ref": "VpcPrivateSubnet2RouteTableA678073B"
          },
          "DestinationCidrBlock": "0.0.0.0/0",
          "NatGatewayId": {
            "Ref": "VpcPublicSubnet2NATGateway9182C01D"
          }
        }
      },
      "VpcIGWD7BA715C": {
        "Type": "AWS::EC2::InternetGateway",
        "Properties": {
          "Tags": [
            {
              "Key": "Name",
              "Value": "aws-ecs-integ-exec-command/Vpc"
            }
          ]
        }
      },
      "VpcVPCGWBF912B6E": {
        "Type": "AWS::EC2::VPCGatewayAttachment",
        "Properties": {
          "VpcId": {
            "Ref": "Vpc8378EB38"
          },
          "InternetGatewayId": {
            "Ref": "VpcIGWD7BA715C"
          }
        }
      },
      "LogGroupF5B46931": {
        "Type": "AWS::Logs::LogGroup",
        "Properties": {
          "RetentionInDays": "731",
          "KmsKeyId": {
            "Fn::GetAtt": [
              "KmsKey46693ADD",
              "Arn"
            ]
          }
        },
        "UpdateReplacePolicy": "Retain",
        "DeletionPolicy": "Retain"
      },
      "KmsKey46693ADD": {
        "Type": "AWS::KMS::Key",
        "Properties": {
          "KeyPolicy": {
            "Statement": [
              {
                "Action": "kms:*",
                "Effect": "Allow",
                "Principal": {
                  "AWS": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":iam::",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":root"
                      ]
                    ]
                  }
                },
                "Resource": "*"
              },
              {
                "Action": "kms:*",
                "Effect": "Allow",
                "Principal": {
                  "AWS": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:iam::",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":root"
                      ]
                    ]
                  }
                },
                "Resource": "*"
              },
              {
                "Action": [
                  "kms:Encrypt*",
                  "kms:Decrypt*",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                  "kms:Describe*"
                ],
                "Condition": {
                  "ArnLike": {
                    "kms:EncryptionContext:aws:logs:arn": {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region"
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId"
                          },
                          ":*"
                        ]
                      ]
                    }
                  }
                },
                "Effect": "Allow",
                "Principal": {
                  "Service": {
                    "Fn::Join": [
                      "",
                      [
                        "logs.",
                        {
                          "Ref": "AWS::Region"
                        },
                        ".amazonaws.com"
                      ]
                    ]
                  }
                },
                "Resource": "*"
              }
            ],
            "Version": "2012-10-17"
          }
        },
        "UpdateReplacePolicy": "Retain",
        "DeletionPolicy": "Retain"
      },
      "EcsExecBucket4F468651": {
        "Type": "AWS::S3::Bucket",
        "UpdateReplacePolicy": "Retain",
        "DeletionPolicy": "Retain",
        "Properties": {
          "BucketEncryption": {
            "ServerSideEncryptionConfiguration": [
              {
                "ServerSideEncryptionByDefault": {
                  "KMSMasterKeyID": {
                    "Fn::GetAtt": [
                      "KmsKey46693ADD",
                      "Arn"
                    ]
                  },
                  "SSEAlgorithm": "aws:kms"
                }
              }
            ]
          }
        }
      },
      "Ec2ClusterEE43E89D": {
        "Type": "AWS::ECS::Cluster",
        "Properties": {
          "Configuration": {
            "ExecuteCommandConfiguration": {
              "KmsKeyId": {
                "Fn::GetAtt": [
                  "KmsKey46693ADD",
                  "Arn"
                ]
              },
              "LogConfiguration": {
                "CloudWatchEncryptionEnabled": true,
                "CloudWatchLogGroupName": {
                  "Ref": "LogGroupF5B46931"
                },
                "S3BucketName": {
                  "Ref": "EcsExecBucket4F468651"
                },
                "S3EncryptionEnabled": true,
                "S3KeyPrefix": "exec-output"
              },
            "Logging": "OVERRIDE"
            }
          }
        }
      },
      "Ec2ClusterDefaultAutoScalingGroupInstanceSecurityGroup149B0A9E": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
          "GroupDescription": "aws-ecs-integ-exec-command/Ec2Cluster/DefaultAutoScalingGroup/InstanceSecurityGroup",
          "SecurityGroupEgress": [
            {
              "CidrIp": "0.0.0.0/0",
              "Description": "Allow all outbound traffic by default",
              "IpProtocol": "-1"
            }
          ],
          "Tags": [
            {
              "Key": "Name",
              "Value": "aws-ecs-integ-exec-command/Ec2Cluster/DefaultAutoScalingGroup"
            }
          ],
          "VpcId": {
            "Ref": "Vpc8378EB38"
          }
        }
      },
      "Ec2ClusterDefaultAutoScalingGroupInstanceRole73D80898": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": {
                    "Fn::Join": [
                      "",
                      [
                        "ec2.",
                        {
                          "Ref": "AWS::URLSuffix"
                        }
                      ]
                    ]
                  }
                }
              }
            ],
            "Version": "2012-10-17"
          },
          "Tags": [
            {
              "Key": "Name",
              "Value": "aws-ecs-integ-exec-command/Ec2Cluster/DefaultAutoScalingGroup"
            }
          ]
        }
      },
      "Ec2ClusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy6D2DC2FD": {
        "Type": "AWS::IAM::Policy",
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "ecs:DeregisterContainerInstance",
                  "ecs:RegisterContainerInstance",
                  "ecs:Submit*"
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "Ec2ClusterEE43E89D",
                    "Arn"
                  ]
                }
              },
              {
                "Action": [
                  "ecs:Poll",
                  "ecs:StartTelemetrySession"
                ],
                "Condition": {
                  "ArnEquals": {
                    "ecs:cluster": {
                      "Fn::GetAtt": [
                        "Ec2ClusterEE43E89D",
                        "Arn"
                      ]
                    }
                  }
                },
                "Effect": "Allow",
                "Resource": "*"
              },
              {
                "Action": [
                  "ecs:DiscoverPollEndpoint",
                  "ecr:GetAuthorizationToken",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents"
                ],
                "Effect": "Allow",
                "Resource": "*"
              }
            ],
            "Version": "2012-10-17"
          },
          "PolicyName": "Ec2ClusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy6D2DC2FD",
          "Roles": [
            {
              "Ref": "Ec2ClusterDefaultAutoScalingGroupInstanceRole73D80898"
            }
          ]
        }
      },
      "Ec2ClusterDefaultAutoScalingGroupInstanceProfileDB232471": {
        "Type": "AWS::IAM::InstanceProfile",
        "Properties": {
          "Roles": [
            {
              "Ref": "Ec2ClusterDefaultAutoScalingGroupInstanceRole73D80898"
            }
          ]
        }
      },
      "Ec2ClusterDefaultAutoScalingGroupLaunchConfig7B2FED3A": {
        "Type": "AWS::AutoScaling::LaunchConfiguration",
        "Properties": {
          "ImageId": {
            "Ref": "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter"
          },
          "InstanceType": "t2.micro",
          "IamInstanceProfile": {
            "Ref": "Ec2ClusterDefaultAutoScalingGroupInstanceProfileDB232471"
          },
          "SecurityGroups": [
            {
              "Fn::GetAtt": [
                "Ec2ClusterDefaultAutoScalingGroupInstanceSecurityGroup149B0A9E",
                "GroupId"
              ]
            }
          ],
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "",
                [
                  "#!/bin/bash\necho ECS_CLUSTER=",
                  {
                    "Ref": "Ec2ClusterEE43E89D"
                  },
                  " >> /etc/ecs/ecs.config\nsudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP\nsudo service iptables save\necho ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config"
                ]
              ]
            }
          }
        },
        "DependsOn": [
          "Ec2ClusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy6D2DC2FD",
          "Ec2ClusterDefaultAutoScalingGroupInstanceRole73D80898"
        ]
      },
      "Ec2ClusterDefaultAutoScalingGroupASGC5A6D4C0": {
        "Type": "AWS::AutoScaling::AutoScalingGroup",
        "Properties": {
          "MaxSize": "1",
          "MinSize": "1",
          "LaunchConfigurationName": {
            "Ref": "Ec2ClusterDefaultAutoScalingGroupLaunchConfig7B2FED3A"
          },
          "Tags": [
            {
              "Key": "Name",
              "PropagateAtLaunch": true,
              "Value": "aws-ecs-integ-exec-command/Ec2Cluster/DefaultAutoScalingGroup"
            }
          ],
          "VPCZoneIdentifier": [
            {
              "Ref": "VpcPrivateSubnet1Subnet536B997A"
            },
            {
              "Ref": "VpcPrivateSubnet2Subnet3788AAA1"
            }
          ]
        },
        "UpdatePolicy": {
          "AutoScalingReplacingUpdate": {
            "WillReplace": true
          },
          "AutoScalingScheduledAction": {
            "IgnoreUnmodifiedGroupSizeProperties": true
          }
        }
      },
      "Ec2ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole23116FA3": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "lambda.amazonaws.com"
                }
              }
            ],
            "Version": "2012-10-17"
          },
          "ManagedPolicyArns": [
            {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ]
              ]
            }
          ],
          "Tags": [
            {
              "Key": "Name",
              "Value": "aws-ecs-integ-exec-command/Ec2Cluster/DefaultAutoScalingGroup"
            }
          ]
        }
      },
      "Ec2ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicy638C9E33": {
        "Type": "AWS::IAM::Policy",
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "ec2:DescribeInstances",
                  "ec2:DescribeInstanceAttribute",
                  "ec2:DescribeInstanceStatus",
                  "ec2:DescribeHosts"
                ],
                "Effect": "Allow",
                "Resource": "*"
              },
              {
                "Action": "autoscaling:CompleteLifecycleAction",
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":autoscaling:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":autoScalingGroup:*:autoScalingGroupName/",
                      {
                        "Ref": "Ec2ClusterDefaultAutoScalingGroupASGC5A6D4C0"
                      }
                    ]
                  ]
                }
              },
              {
                "Action": [
                  "ecs:DescribeContainerInstances",
                  "ecs:DescribeTasks"
                ],
                "Condition": {
                  "ArnEquals": {
                    "ecs:cluster": {
                      "Fn::GetAtt": [
                        "Ec2ClusterEE43E89D",
                        "Arn"
                      ]
                    }
                  }
                },
                "Effect": "Allow",
                "Resource": "*"
              },
              {
                "Action": [
                  "ecs:ListContainerInstances",
                  "ecs:SubmitContainerStateChange",
                  "ecs:SubmitTaskStateChange"
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "Ec2ClusterEE43E89D",
                    "Arn"
                  ]
                }
              },
              {
                "Action": [
                  "ecs:UpdateContainerInstancesState",
                  "ecs:ListTasks"
                ],
                "Condition": {
                  "ArnEquals": {
                    "ecs:cluster": {
                      "Fn::GetAtt": [
                        "Ec2ClusterEE43E89D",
                        "Arn"
                      ]
                    }
                  }
                },
                "Effect": "Allow",
                "Resource": "*"
              }
            ],
            "Version": "2012-10-17"
          },
          "PolicyName": "Ec2ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicy638C9E33",
          "Roles": [
            {
              "Ref": "Ec2ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole23116FA3"
            }
          ]
        }
      },
      "Ec2ClusterDefaultAutoScalingGroupDrainECSHookFunctionE0DEFB31": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "Code": {
            "ZipFile": "import boto3, json, os, time\n\necs = boto3.client('ecs')\nautoscaling = boto3.client('autoscaling')\n\n\ndef lambda_handler(event, context):\n  print(json.dumps(event))\n  cluster = os.environ['CLUSTER']\n  snsTopicArn = event['Records'][0]['Sns']['TopicArn']\n  lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])\n  instance_id = lifecycle_event.get('EC2InstanceId')\n  if not instance_id:\n    print('Got event without EC2InstanceId: %s', json.dumps(event))\n    return\n\n  instance_arn = container_instance_arn(cluster, instance_id)\n  print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))\n\n  if not instance_arn:\n    return\n\n  task_arns = container_instance_task_arns(cluster, instance_arn)\n  \n  if task_arns:\n    print('Instance ARN %s has task ARNs %s' % (instance_arn, ', '.join(task_arns)))\n\n  while has_tasks(cluster, instance_arn, task_arns):\n    time.sleep(10)\n\n  try:\n    print('Terminating instance %s' % instance_id)\n    autoscaling.complete_lifecycle_action(\n        LifecycleActionResult='CONTINUE',\n        **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))\n  except Exception as e:\n    # Lifecycle action may have already completed.\n    print(str(e))\n\n\ndef container_instance_arn(cluster, instance_id):\n  \"\"\"Turn an instance ID into a container instance ARN.\"\"\"\n  arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']\n  if not arns:\n    return None\n  return arns[0]\n\ndef container_instance_task_arns(cluster, instance_arn):\n  \"\"\"Fetch tasks for a container instance ARN.\"\"\"\n  arns = ecs.list_tasks(cluster=cluster, containerInstance=instance_arn)['taskArns']\n  return arns\n\ndef has_tasks(cluster, instance_arn, task_arns):\n  \"\"\"Return True if the instance is running tasks for the given cluster.\"\"\"\n  instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']\n  if not instances:\n    return False\n  instance = instances[0]\n\n  if instance['status'] == 'ACTIVE':\n    # Start draining, then try again later\n    set_container_instance_to_draining(cluster, instance_arn)\n    return True\n\n  task_count = None\n\n  if task_arns:\n    # Fetch details for tasks running on the container instance\n    tasks = ecs.describe_tasks(cluster=cluster, tasks=task_arns)['tasks']\n    if tasks:\n      # Consider any non-stopped tasks as running\n      task_count = sum(task['lastStatus'] != 'STOPPED' for task in tasks) + instance['pendingTasksCount']\n  \n  if not task_count:\n    # Fallback to instance task counts if detailed task information is unavailable\n    task_count = instance['runningTasksCount'] + instance['pendingTasksCount']\n    \n  print('Instance %s has %s tasks' % (instance_arn, task_count))\n\n  return task_count > 0\n\ndef set_container_instance_to_draining(cluster, instance_arn):\n  ecs.update_container_instances_state(\n      cluster=cluster,\n      containerInstances=[instance_arn], status='DRAINING')\n\n\ndef pick(dct, *keys):\n  \"\"\"Pick a subset of a dict.\"\"\"\n  return {k: v for k, v in dct.items() if k in keys}\n"
          },
          "Role": {
            "Fn::GetAtt": [
              "Ec2ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole23116FA3",
              "Arn"
            ]
          },
          "Environment": {
            "Variables": {
              "CLUSTER": {
                "Ref": "Ec2ClusterEE43E89D"
              }
            }
          },
          "Handler": "index.lambda_handler",
          "Runtime": "python3.6",
          "Tags": [
            {
              "Key": "Name",
              "Value": "aws-ecs-integ-exec-command/Ec2Cluster/DefaultAutoScalingGroup"
            }
          ],
          "Timeout": 310
        },
        "DependsOn": [
          "Ec2ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicy638C9E33",
          "Ec2ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole23116FA3"
        ]
      },
      "Ec2ClusterDefaultAutoScalingGroupDrainECSHookFunctionAllowInvokeawsecsintegexeccommandEc2ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopic05F8C92983E1AD32": {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
          "Action": "lambda:InvokeFunction",
          "FunctionName": {
            "Fn::GetAtt": [
              "Ec2ClusterDefaultAutoScalingGroupDrainECSHookFunctionE0DEFB31",
              "Arn"
            ]
          },
          "Principal": "sns.amazonaws.com",
          "SourceArn": {
            "Ref": "Ec2ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicF7263B30"
          }
        }
      },
      "Ec2ClusterDefaultAutoScalingGroupDrainECSHookFunctionTopic4795E0F6": {
        "Type": "AWS::SNS::Subscription",
        "Properties": {
          "Protocol": "lambda",
          "TopicArn": {
            "Ref": "Ec2ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicF7263B30"
          },
          "Endpoint": {
            "Fn::GetAtt": [
              "Ec2ClusterDefaultAutoScalingGroupDrainECSHookFunctionE0DEFB31",
              "Arn"
            ]
          }
        }
      },
      "Ec2ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRole71045ED7": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "autoscaling.amazonaws.com"
                }
              }
            ],
            "Version": "2012-10-17"
          },
          "Tags": [
            {
              "Key": "Name",
              "Value": "aws-ecs-integ-exec-command/Ec2Cluster/DefaultAutoScalingGroup"
            }
          ]
        }
      },
      "Ec2ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicyE499974B": {
        "Type": "AWS::IAM::Policy",
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "sns:Publish",
                "Effect": "Allow",
                "Resource": {
                  "Ref": "Ec2ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicF7263B30"
                }
              }
            ],
            "Version": "2012-10-17"
          },
          "PolicyName": "Ec2ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicyE499974B",
          "Roles": [
            {
              "Ref": "Ec2ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRole71045ED7"
            }
          ]
        }
      },
      "Ec2ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicF7263B30": {
        "Type": "AWS::SNS::Topic",
        "Properties": {
          "Tags": [
            {
              "Key": "Name",
              "Value": "aws-ecs-integ-exec-command/Ec2Cluster/DefaultAutoScalingGroup"
            }
          ]
        }
      },
      "Ec2ClusterDefaultAutoScalingGroupLifecycleHookDrainHook5CB1467E": {
        "Type": "AWS::AutoScaling::LifecycleHook",
        "Properties": {
          "AutoScalingGroupName": {
            "Ref": "Ec2ClusterDefaultAutoScalingGroupASGC5A6D4C0"
          },
          "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
          "DefaultResult": "CONTINUE",
          "HeartbeatTimeout": 300,
          "NotificationTargetARN": {
            "Ref": "Ec2ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicF7263B30"
          },
          "RoleARN": {
            "Fn::GetAtt": [
              "Ec2ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRole71045ED7",
              "Arn"
            ]
          }
        },
        "DependsOn": [
          "Ec2ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicyE499974B",
          "Ec2ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRole71045ED7"
        ]
      },
      "TaskDefTaskRole1EDB4A67": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "ecs-tasks.amazonaws.com"
                }
              }
            ],
            "Version": "2012-10-17"
          }
        }
      },
      "TaskDefTaskRoleDefaultPolicyA592CB18": {
        "Type": "AWS::IAM::Policy",
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "ssmmessages:CreateControlChannel",
                  "ssmmessages:CreateDataChannel",
                  "ssmmessages:OpenControlChannel",
                  "ssmmessages:OpenDataChannel"
                ],
                "Effect": "Allow",
                "Resource": "*"
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:GenerateDataKey"
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "KmsKey46693ADD",
                    "Arn"
                  ]
                }
              },
              {
                "Action": "logs:DescribeLogGroups",
                "Effect": "Allow",
                "Resource": "*"   
              },
              {
                "Action": [
                  "logs:CreateLogStream",
                  "logs:DescribeLogStreams",
                  "logs:PutLogEvents"
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:logs:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":log-group:",
                      {
                        "Ref": "LogGroupF5B46931"
                      },
                      ":*"
                    ]
                  ]
                }  
              },
              {
                "Action": "s3:GetBucketLocation",
                "Effect": "Allow",
                "Resource": "*"
              },
              {
                "Action": "s3:PutObject",
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "EcsExecBucket4F468651"
                      },
                      "/*"
                    ]
                  ]
                }
              },
              {
                "Action": "s3:GetEncryptionConfiguration",
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "EcsExecBucket4F468651"
                      }
                    ]
                  ]
                }
              }
            ],
            "Version": "2012-10-17"
          },
          "PolicyName": "TaskDefTaskRoleDefaultPolicyA592CB18",
          "Roles": [{
            "Ref": "TaskDefTaskRole1EDB4A67"
          }]
        }
      },
      "TaskDef54694570": {
        "Type": "AWS::ECS::TaskDefinition",
        "Properties": {
          "ContainerDefinitions": [
            {
              "Essential": true,
              "Image": "amazon/amazon-ecs-sample",
              "Memory": "256",
              "Name": "web"
            }
          ],
          "Family": "awsecsintegexeccommandTaskDef44709274",
          "NetworkMode": "bridge",
          "RequiresCompatibilities": [
            "EC2"
          ],
          "TaskRoleArn": {
            "Fn::GetAtt": [
              "TaskDefTaskRole1EDB4A67",
              "Arn"
            ]
          }
        }
      },
      "Ec2Service04A33183": {
        "Type": "AWS::ECS::Service",
        "Properties": {
          "Cluster": {
            "Ref": "Ec2ClusterEE43E89D"
          },
          "DeploymentConfiguration": {
            "MaximumPercent": 200,
            "MinimumHealthyPercent": 50
          },
          "LaunchType": "EC2",
          "EnableECSManagedTags": false,
          "EnableExecuteCommand": true,
          "SchedulingStrategy": "REPLICA",
          "TaskDefinition": {
            "Ref": "TaskDef54694570"
          }
        }
      }
    },
    "Parameters": {
      "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter": {
        "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
        "Default": "/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id"
      }
    }
}