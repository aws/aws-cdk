import { Construct, Resource } from '@aws-cdk/cdk';
import { CfnGroup } from './iam.generated';
import { IIdentity } from './identity-base';
import { Policy } from './policy';
import { PolicyStatement } from './policy-document';
import { ArnPrincipal, IPrincipal, PrincipalPolicyFragment } from './principals';
import { IUser } from './user';
import { AttachedPolicies, undefinedIfEmpty } from './util';

export interface IGroup extends IIdentity {
  /**
   * @attribute
   */
  readonly groupName: string;

  /**
   * @attribute
   */
  readonly groupArn: string;
}

export interface GroupProps {
  /**
   * A name for the IAM group. For valid values, see the GroupName parameter
   * for the CreateGroup action in the IAM API Reference. If you don't specify
   * a name, AWS CloudFormation generates a unique physical ID and uses that
   * ID for the group name.
   *
   * If you specify a name, you must specify the CAPABILITY_NAMED_IAM value to
   * acknowledge your template's capabilities. For more information, see
   * Acknowledging IAM Resources in AWS CloudFormation Templates.
   *
   * @default Generated by CloudFormation (recommended)
   */
  readonly groupName?: string;

  /**
   * A list of ARNs for managed policies associated with group.
   *
   * @default - No managed policies.
   */
  readonly managedPolicyArns?: any[];

  /**
   * The path to the group. For more information about paths, see [IAM
   * Identifiers](http://docs.aws.amazon.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html)
   * in the IAM User Guide.
   *
   * @default /
   */
  readonly path?: string;
}

abstract class GroupBase extends Resource implements IGroup {
  public abstract readonly groupName: string;
  public abstract readonly groupArn: string;

  public readonly grantPrincipal: IPrincipal = this;
  public readonly assumeRoleAction: string = 'sts:AssumeRole';

  private readonly attachedPolicies = new AttachedPolicies();
  private defaultPolicy?: Policy;

  public get policyFragment(): PrincipalPolicyFragment {
    return new ArnPrincipal(this.groupArn).policyFragment;
  }

  /**
   * Attaches a policy to this group.
   * @param policy The policy to attach.
   */
  public attachInlinePolicy(policy: Policy) {
    this.attachedPolicies.attach(policy);
    policy.attachToGroup(this);
  }

  public attachManagedPolicy(_arn: string) {
    // drop
  }

  /**
   * Adds a user to this group.
   */
  public addUser(user: IUser) {
    user.addToGroup(this);
  }

  /**
   * Adds an IAM statement to the default policy.
   */
  public addToPolicy(statement: PolicyStatement): boolean {
    if (!this.defaultPolicy) {
      this.defaultPolicy = new Policy(this, 'DefaultPolicy');
      this.defaultPolicy.attachToGroup(this);
    }

    this.defaultPolicy.addStatement(statement);
    return true;
  }
}

export class Group extends GroupBase {

  /**
   * Imports a group from ARN
   * @param groupArn (e.g. `arn:aws:iam::account-id:group/group-name`)
   */
  public static fromGroupArn(scope: Construct, id: string, groupArn: string): IGroup {
    const groupName = scope.node.stack.parseArn(groupArn).resourceName!;
    class Import extends GroupBase {
      public groupName = groupName;
      public groupArn = groupArn;
    }

    return new Import(scope, id);
  }

  public readonly groupName: string;
  public readonly groupArn: string;

  private readonly managedPolicies: string[];

  constructor(scope: Construct, id: string, props: GroupProps = {}) {
    super(scope, id);

    this.managedPolicies = props.managedPolicyArns || [];

    const group = new CfnGroup(this, 'Resource', {
      groupName: props.groupName,
      managedPolicyArns: undefinedIfEmpty(() => this.managedPolicies),
      path: props.path,
    });

    this.groupName = group.groupName;
    this.groupArn = group.groupArn;
  }

  /**
   * Attaches a managed policy to this group.
   * @param arn The ARN of the managed policy to attach.
   */
  public attachManagedPolicy(arn: string) {
    this.managedPolicies.push(arn);
  }
}
