type ServiceVersion @aws_api_key {
  version: String!
}

type Customer @aws_api_key {
  id: String!
  name: String!
}

input SaveCustomerInput {
  name: String!
}

type Order @aws_api_key {
  customer: String!
  order: String!
}

type Payment @aws_api_key {
  id: String!
  amount: String!
}

input PaymentInput {
  amount: String!
}

type Query @aws_api_key {
  getServiceVersion: ServiceVersion
  getCustomers: [Customer]
  getCustomer(id: String): Customer
  getCustomerOrdersEq(customer: String): Order
  getCustomerOrdersLt(customer: String): Order
  getCustomerOrdersLe(customer: String): Order
  getCustomerOrdersGt(customer: String): Order
  getCustomerOrdersGe(customer: String): Order
  getCustomerOrdersFilter(customer: String, order: String): Order
  getCustomerOrdersBetween(customer: String, order1: String, order2: String): Order
  getOrderCustomersEq(order: String): [Customer]
  getOrderCustomersLt(order: String): [Customer]
  getOrderCustomersLe(order: String): [Customer]
  getOrderCustomersGt(order: String): [Customer]
  getOrderCustomersGe(order: String): [Customer]
  getOrderCustomersFilter(order: String, customer: String): [Customer]
  getOrderCustomersBetween(order: String, customer1: String, customer2: String): [Customer]
  getPayment(id: String): Payment
}

input FirstOrderInput {
  product: String!
  quantity: Int!
}

type Mutation @aws_api_key {
  addCustomer(customer: SaveCustomerInput!): Customer
  saveCustomer(id: String!, customer: SaveCustomerInput!): Customer
  removeCustomer(id: String!): Customer
  saveCustomerWithFirstOrder(customer: SaveCustomerInput!, order: FirstOrderInput!, referral: String): Order
  savePayment(payment: PaymentInput!): Payment
  doPostOnAws: String!
}
