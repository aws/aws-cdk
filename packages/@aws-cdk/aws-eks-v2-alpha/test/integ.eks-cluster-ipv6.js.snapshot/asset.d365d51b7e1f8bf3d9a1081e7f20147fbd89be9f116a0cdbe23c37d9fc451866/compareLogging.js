"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.compareLoggingProps = compareLoggingProps;
function compareLoggingProps(oldProps, newProps) {
    const result = { logging: {} };
    let enabledTypes = [];
    let disabledTypes = [];
    if (newProps.logging?.clusterLogging === undefined && oldProps.logging?.clusterLogging === undefined) {
        return newProps;
    }
    // if newProps containes LogSetup
    if (newProps.logging && newProps.logging.clusterLogging && newProps.logging.clusterLogging.length > 0) {
        enabledTypes = newProps.logging.clusterLogging[0].types;
        // if oldProps contains LogSetup with enabled:true
        if (oldProps.logging && oldProps.logging.clusterLogging && oldProps.logging.clusterLogging.length > 0) {
            // LogType in oldProp but not in newProp should be considered disabled(enabled:false)
            disabledTypes = oldProps.logging.clusterLogging[0].types.filter(t => !newProps.logging.clusterLogging[0].types.includes(t));
        }
    }
    else {
        // all enabled:true in oldProps will be enabled:false
        disabledTypes = oldProps.logging.clusterLogging[0].types;
    }
    if (enabledTypes.length > 0 || disabledTypes.length > 0) {
        result.logging = { clusterLogging: [] };
    }
    // append the enabled:false LogSetup to the result
    if (enabledTypes.length > 0) {
        result.logging.clusterLogging.push({ types: enabledTypes, enabled: true });
    }
    // append the enabled:false LogSetup to the result
    if (disabledTypes.length > 0) {
        result.logging.clusterLogging.push({ types: disabledTypes, enabled: false });
    }
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGFyZUxvZ2dpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb21wYXJlTG9nZ2luZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQVdBLGtEQW1DQztBQW5DRCxTQUFnQixtQkFBbUIsQ0FBQyxRQUFnRCxFQUNsRixRQUFnRDtJQUNoRCxNQUFNLE1BQU0sR0FBMkMsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUM7SUFDdkUsSUFBSSxZQUFZLEdBQWtCLEVBQUUsQ0FBQztJQUNyQyxJQUFJLGFBQWEsR0FBa0IsRUFBRSxDQUFDO0lBRXRDLElBQUksUUFBUSxDQUFDLE9BQU8sRUFBRSxjQUFjLEtBQUssU0FBUyxJQUFJLFFBQVEsQ0FBQyxPQUFPLEVBQUUsY0FBYyxLQUFLLFNBQVMsRUFBRSxDQUFDO1FBQ3JHLE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFDRCxpQ0FBaUM7SUFDakMsSUFBSSxRQUFRLENBQUMsT0FBTyxJQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsY0FBYyxJQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUN0RyxZQUFZLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBTSxDQUFDO1FBQ3pELGtEQUFrRDtRQUNsRCxJQUFJLFFBQVEsQ0FBQyxPQUFPLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxjQUFjLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQ3RHLHFGQUFxRjtZQUNyRixhQUFhLEdBQUcsUUFBUSxDQUFDLE9BQVEsQ0FBQyxjQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQVEsQ0FBQyxjQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BJLENBQUM7SUFDSCxDQUFDO1NBQU0sQ0FBQztRQUNOLHFEQUFxRDtRQUNyRCxhQUFhLEdBQUcsUUFBUSxDQUFDLE9BQVEsQ0FBQyxjQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBTSxDQUFDO0lBQzlELENBQUM7SUFFRCxJQUFJLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDeEQsTUFBTSxDQUFDLE9BQU8sR0FBRyxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQztJQUMxQyxDQUFDO0lBRUQsa0RBQWtEO0lBQ2xELElBQUksWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUM1QixNQUFNLENBQUMsT0FBUSxDQUFDLGNBQWUsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUFDRCxrREFBa0Q7SUFDbEQsSUFBSSxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQzdCLE1BQU0sQ0FBQyxPQUFRLENBQUMsY0FBZSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDakYsQ0FBQztJQUNELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgZnVuY3Rpb24gY29tcGFyZXMgdGhlIGxvZ2dpbmcgY29uZmlndXJhdGlvbiBmcm9tIG9sZFByb3BzIGFuZCBuZXdQcm9wcyBhbmQgcmV0dXJuc1xuICogdGhlIHJlc3VsdCB0aGF0IGNvbnRhaW5zIExvZ1NldHVwIHdpdGggZW5hYmxlZDpmYWxzZSBpZiBhbnkuXG4gKlxuICogQHBhcmFtIG9sZFByb3BzIG9sZCBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0gbmV3UHJvcHMgbmV3IHByb3BlcnRpZXNcbiAqIEByZXR1cm5zIHJlc3VsdCB3aXRoIExvZ1NldCB3aXRoIGVuYWJsZWQ6ZmFsc2UgaWYgYW55XG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXNcbmltcG9ydCAqIGFzIEVLUyBmcm9tICdAYXdzLXNkay9jbGllbnQtZWtzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmVMb2dnaW5nUHJvcHMob2xkUHJvcHM6IFBhcnRpYWw8RUtTLkNyZWF0ZUNsdXN0ZXJDb21tYW5kSW5wdXQ+LFxuICBuZXdQcm9wczogUGFydGlhbDxFS1MuQ3JlYXRlQ2x1c3RlckNvbW1hbmRJbnB1dD4pOiBQYXJ0aWFsPEVLUy5DcmVhdGVDbHVzdGVyQ29tbWFuZElucHV0PiB7XG4gIGNvbnN0IHJlc3VsdDogUGFydGlhbDxFS1MuQ3JlYXRlQ2x1c3RlckNvbW1hbmRJbnB1dD4gPSB7IGxvZ2dpbmc6IHt9IH07XG4gIGxldCBlbmFibGVkVHlwZXM6IEVLUy5Mb2dUeXBlW10gPSBbXTtcbiAgbGV0IGRpc2FibGVkVHlwZXM6IEVLUy5Mb2dUeXBlW10gPSBbXTtcblxuICBpZiAobmV3UHJvcHMubG9nZ2luZz8uY2x1c3RlckxvZ2dpbmcgPT09IHVuZGVmaW5lZCAmJiBvbGRQcm9wcy5sb2dnaW5nPy5jbHVzdGVyTG9nZ2luZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIG5ld1Byb3BzO1xuICB9XG4gIC8vIGlmIG5ld1Byb3BzIGNvbnRhaW5lcyBMb2dTZXR1cFxuICBpZiAobmV3UHJvcHMubG9nZ2luZyAmJiBuZXdQcm9wcy5sb2dnaW5nLmNsdXN0ZXJMb2dnaW5nICYmIG5ld1Byb3BzLmxvZ2dpbmcuY2x1c3RlckxvZ2dpbmcubGVuZ3RoID4gMCkge1xuICAgIGVuYWJsZWRUeXBlcyA9IG5ld1Byb3BzLmxvZ2dpbmcuY2x1c3RlckxvZ2dpbmdbMF0udHlwZXMhO1xuICAgIC8vIGlmIG9sZFByb3BzIGNvbnRhaW5zIExvZ1NldHVwIHdpdGggZW5hYmxlZDp0cnVlXG4gICAgaWYgKG9sZFByb3BzLmxvZ2dpbmcgJiYgb2xkUHJvcHMubG9nZ2luZy5jbHVzdGVyTG9nZ2luZyAmJiBvbGRQcm9wcy5sb2dnaW5nLmNsdXN0ZXJMb2dnaW5nLmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIExvZ1R5cGUgaW4gb2xkUHJvcCBidXQgbm90IGluIG5ld1Byb3Agc2hvdWxkIGJlIGNvbnNpZGVyZWQgZGlzYWJsZWQoZW5hYmxlZDpmYWxzZSlcbiAgICAgIGRpc2FibGVkVHlwZXMgPSBvbGRQcm9wcy5sb2dnaW5nIS5jbHVzdGVyTG9nZ2luZyFbMF0udHlwZXMhLmZpbHRlcih0ID0+ICFuZXdQcm9wcy5sb2dnaW5nIS5jbHVzdGVyTG9nZ2luZyFbMF0udHlwZXMhLmluY2x1ZGVzKHQpKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gYWxsIGVuYWJsZWQ6dHJ1ZSBpbiBvbGRQcm9wcyB3aWxsIGJlIGVuYWJsZWQ6ZmFsc2VcbiAgICBkaXNhYmxlZFR5cGVzID0gb2xkUHJvcHMubG9nZ2luZyEuY2x1c3RlckxvZ2dpbmchWzBdLnR5cGVzITtcbiAgfVxuXG4gIGlmIChlbmFibGVkVHlwZXMubGVuZ3RoID4gMCB8fCBkaXNhYmxlZFR5cGVzLmxlbmd0aCA+IDApIHtcbiAgICByZXN1bHQubG9nZ2luZyA9IHsgY2x1c3RlckxvZ2dpbmc6IFtdIH07XG4gIH1cblxuICAvLyBhcHBlbmQgdGhlIGVuYWJsZWQ6ZmFsc2UgTG9nU2V0dXAgdG8gdGhlIHJlc3VsdFxuICBpZiAoZW5hYmxlZFR5cGVzLmxlbmd0aCA+IDApIHtcbiAgICByZXN1bHQubG9nZ2luZyEuY2x1c3RlckxvZ2dpbmchLnB1c2goeyB0eXBlczogZW5hYmxlZFR5cGVzLCBlbmFibGVkOiB0cnVlIH0pO1xuICB9XG4gIC8vIGFwcGVuZCB0aGUgZW5hYmxlZDpmYWxzZSBMb2dTZXR1cCB0byB0aGUgcmVzdWx0XG4gIGlmIChkaXNhYmxlZFR5cGVzLmxlbmd0aCA+IDApIHtcbiAgICByZXN1bHQubG9nZ2luZyEuY2x1c3RlckxvZ2dpbmchLnB1c2goeyB0eXBlczogZGlzYWJsZWRUeXBlcywgZW5hYmxlZDogZmFsc2UgfSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiJdfQ==