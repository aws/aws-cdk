"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const redshift_data_1 = require("./redshift-data");
const util_1 = require("./util");
async function handler(props, event) {
    const username = props.username;
    const tablePrivileges = props.tablePrivileges;
    const clusterProps = props;
    if (event.RequestType === 'Create') {
        await grantPrivileges(username, tablePrivileges, clusterProps);
        return { PhysicalResourceId: (0, util_1.makePhysicalId)(username, clusterProps, event.RequestId) };
    }
    else if (event.RequestType === 'Delete') {
        await revokePrivileges(username, tablePrivileges, clusterProps);
        return;
    }
    else if (event.RequestType === 'Update') {
        const { replace } = await updatePrivileges(username, tablePrivileges, clusterProps, event.OldResourceProperties);
        const physicalId = replace ? (0, util_1.makePhysicalId)(username, clusterProps, event.RequestId) : event.PhysicalResourceId;
        return { PhysicalResourceId: physicalId };
    }
    else {
        /* eslint-disable-next-line dot-notation */
        throw new Error(`Unrecognized event type: ${event['RequestType']}`);
    }
}
exports.handler = handler;
async function revokePrivileges(username, tablePrivileges, clusterProps) {
    // Limited by human input
    // eslint-disable-next-line @cdklabs/promiseall-no-unbounded-parallelism
    await Promise.all(tablePrivileges.map(({ tableName, actions }) => {
        return (0, redshift_data_1.executeStatement)(`REVOKE ${actions.join(', ')} ON ${tableName} FROM ${username}`, clusterProps);
    }));
}
async function grantPrivileges(username, tablePrivileges, clusterProps) {
    // Limited by human input
    // eslint-disable-next-line @cdklabs/promiseall-no-unbounded-parallelism
    await Promise.all(tablePrivileges.map(({ tableName, actions }) => {
        return (0, redshift_data_1.executeStatement)(`GRANT ${actions.join(', ')} ON ${tableName} TO ${username}`, clusterProps);
    }));
}
async function updatePrivileges(username, tablePrivileges, clusterProps, oldResourceProperties) {
    const oldClusterProps = oldResourceProperties;
    if (clusterProps.clusterName !== oldClusterProps.clusterName || clusterProps.databaseName !== oldClusterProps.databaseName) {
        await grantPrivileges(username, tablePrivileges, clusterProps);
        return { replace: true };
    }
    const oldUsername = oldResourceProperties.username;
    if (oldUsername !== username) {
        await grantPrivileges(username, tablePrivileges, clusterProps);
        return { replace: true };
    }
    const oldTablePrivileges = oldResourceProperties.tablePrivileges;
    const tablesToRevoke = oldTablePrivileges.filter(({ tableId, actions }) => (tablePrivileges.find(({ tableId: otherTableId, actions: otherActions }) => (tableId === otherTableId && actions.some(action => !otherActions.includes(action))))));
    if (tablesToRevoke.length > 0) {
        await revokePrivileges(username, tablesToRevoke, clusterProps);
    }
    const tablesToGrant = tablePrivileges.filter(({ tableId, tableName, actions }) => {
        const tableAdded = !oldTablePrivileges.find(({ tableId: otherTableId, tableName: otherTableName }) => (tableId === otherTableId && tableName === otherTableName));
        const actionsAdded = oldTablePrivileges.find(({ tableId: otherTableId, actions: otherActions }) => (tableId === otherTableId && otherActions.some(action => !actions.includes(action))));
        return tableAdded || actionsAdded;
    });
    if (tablesToGrant.length > 0) {
        await grantPrivileges(username, tablesToGrant, clusterProps);
    }
    return { replace: false };
}
//# sourceMappingURL=data:application/json;base64,