import * as cdk from 'aws-cdk-lib/core';
import { Construct } from 'constructs';
import { CfnObservabilityConfiguration } from 'aws-cdk-lib/aws-apprunner';

/**
 * The implementation provider chosen for tracing App Runner services
 *
 * @see https://docs.aws.amazon.com/apprunner/latest/dg/monitor.html
 */
export enum TraceConfigurationVendor {
  /**
   * Tracing (X-Ray)
   */
  AWSXRAY = 'AWSXRAY',
}

/**
 * Properties of the AppRunner Observability configuration
 */
export interface ObservabilityConfigurationProps {
  /**
   * The name for the ObservabilityConfiguration.
   *
   * @default - a name generated by CloudFormation
   */
  readonly observabilityConfigurationName?: string;

  /**
   * The implementation provider chosen for tracing App Runner services.
   */
  readonly traceConfigurationVendor: TraceConfigurationVendor;
}

/**
 * Attributes for the App Runner Observability configuration
 */
export interface ObservabilityConfigurationAttributes {
  /**
   * The name of the Observability configuration.
   */
  readonly observabilityConfigurationName: string;

  /**
   * The revision of the Observability configuration.
   */
  readonly observabilityConfigurationRevision: number;
}

/**
 * Represents the App Runner Observability configuration.
 */
export interface IObservabilityConfiguration extends cdk.IResource {
  /**
   * The Name of the Observability configuration.
   * @attribute
   */
  readonly observabilityConfigurationName: string;

  /**
   * The ARN of the Observability configuration.
   * @attribute
   */
  readonly observabilityConfigurationArn: string;

  /**
   * The revision of the Observability configuration.
   * @attribute
   */
  readonly observabilityConfigurationRevision: number;
}

/**
 * The App Runner Observability configuration
 *
 * @resource AWS::AppRunner::ObservabilityConfiguration
 */
export class ObservabilityConfiguration extends cdk.Resource implements IObservabilityConfiguration {
  /**
   * Imports an App Runner Observability Configuration from attributes.
   */
  public static fromObservabilityConfigurationAttributes(scope: Construct, id: string,
    attrs: ObservabilityConfigurationAttributes): IObservabilityConfiguration {
    const observabilityConfigurationName = attrs.observabilityConfigurationName;
    const observabilityConfigurationRevision = attrs.observabilityConfigurationRevision;

    class Import extends cdk.Resource implements IObservabilityConfiguration {
      public readonly observabilityConfigurationName = observabilityConfigurationName;
      public readonly observabilityConfigurationRevision = observabilityConfigurationRevision;
      public readonly observabilityConfigurationArn = cdk.Stack.of(this).formatArn({
        resource: 'observabilityconfiguration',
        service: 'apprunner',
        resourceName: `${attrs.observabilityConfigurationName}/${attrs.observabilityConfigurationRevision}`,
      });
    }

    return new Import(scope, id);
  }

  /**
   * Imports an App Runner Observability Configuration from its ARN
   */
  public static fromArn(scope: Construct, id: string, observabilityConfigurationArn: string): IObservabilityConfiguration {
    const resourceParts = cdk.Fn.split('/', observabilityConfigurationArn);

    if (!resourceParts || resourceParts.length < 3) {
      throw new Error(`Unexpected ARN format: ${observabilityConfigurationArn}.`);
    }

    const observabilityConfigurationName = cdk.Fn.select(0, resourceParts);
    const observabilityConfigurationRevision = Number(cdk.Fn.select(1, resourceParts));

    class Import extends cdk.Resource implements IObservabilityConfiguration {
      public readonly observabilityConfigurationName = observabilityConfigurationName;
      public readonly observabilityConfigurationRevision = observabilityConfigurationRevision;
      public readonly observabilityConfigurationArn = observabilityConfigurationArn;
    }

    return new Import(scope, id);
  }

  /**
   * The ARN of the Observability configuration.
   * @attribute
   */
  readonly observabilityConfigurationArn: string;

  /**
   * The revision of the Observability configuration.
   * @attribute
   */
  readonly observabilityConfigurationRevision: number;

  /**
   * The name of the Observability configuration.
   * @attribute
   */
  readonly observabilityConfigurationName: string;

  public constructor(scope: Construct, id: string, props: ObservabilityConfigurationProps) {
    super(scope, id, {
      physicalName: props.observabilityConfigurationName,
    });

    if (props.observabilityConfigurationName !== undefined && !cdk.Token.isUnresolved(props.observabilityConfigurationName)) {

      if (props.observabilityConfigurationName.length < 4 || props.observabilityConfigurationName.length > 32) {
        throw new Error(
          `\`observabilityConfigurationName\` must be between 4 and 32 characters, got: ${props.observabilityConfigurationName.length} characters.`,
        );
      }

      if (!/^[A-Za-z0-9][A-Za-z0-9\-_]*$/.test(props.observabilityConfigurationName)) {
        throw new Error(
          `\`observabilityConfigurationName\` must start with an alphanumeric character and contain only alphanumeric characters, hyphens, or underscores after that, got: ${props.observabilityConfigurationName}.`,
        );
      }
    }

    const resource = new CfnObservabilityConfiguration(this, 'Resource', {
      observabilityConfigurationName: props.observabilityConfigurationName,
      traceConfiguration: {
        vendor: props.traceConfigurationVendor,
      },
    });

    this.observabilityConfigurationArn = resource.attrObservabilityConfigurationArn;
    this.observabilityConfigurationRevision = resource.attrObservabilityConfigurationRevision;
    this.observabilityConfigurationName = resource.ref;
  }
}
