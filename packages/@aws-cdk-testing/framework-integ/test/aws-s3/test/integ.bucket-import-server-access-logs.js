#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("aws-cdk-lib");
const integ = require("@aws-cdk/integ-tests-alpha");
const s3 = require("aws-cdk-lib/aws-s3");
// Reproduces the issues experienced in #23588 and #23547, both resulting from
// not validating log delivery is applied correctly when the target bucket for
// server access logs is in another account.
const app = new cdk.App();
const targetBucketStack = new cdk.Stack(app, 'aws-cdk-s3-access-logs-target');
const sourceBucketStack = new cdk.Stack(app, 'aws-cdk-s3-access-logs-delivery');
const targetBucket = new s3.Bucket(targetBucketStack, 'TargetBucket', {
    autoDeleteObjects: true,
    removalPolicy: cdk.RemovalPolicy.DESTROY,
    blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,
    enforceSSL: true,
    objectOwnership: s3.ObjectOwnership.BUCKET_OWNER_ENFORCED,
    encryption: s3.BucketEncryption.S3_MANAGED,
    accessControl: s3.BucketAccessControl.BUCKET_OWNER_FULL_CONTROL,
});
new s3.Bucket(sourceBucketStack, 'SourceBucket', {
    autoDeleteObjects: true,
    removalPolicy: cdk.RemovalPolicy.DESTROY,
    blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,
    enforceSSL: true,
    objectOwnership: s3.ObjectOwnership.BUCKET_OWNER_ENFORCED,
    encryption: s3.BucketEncryption.S3_MANAGED,
    accessControl: s3.BucketAccessControl.BUCKET_OWNER_FULL_CONTROL,
    serverAccessLogsBucket: targetBucket,
    serverAccessLogsPrefix: 'test/',
});
new integ.IntegTest(app, 'ServerAccessLogsImportTest', {
    testCases: [sourceBucketStack],
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuYnVja2V0LWltcG9ydC1zZXJ2ZXItYWNjZXNzLWxvZ3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy5idWNrZXQtaW1wb3J0LXNlcnZlci1hY2Nlc3MtbG9ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxtQ0FBbUM7QUFDbkMsb0RBQW9EO0FBQ3BELHlDQUF5QztBQUV6Qyw4RUFBOEU7QUFDOUUsOEVBQThFO0FBQzlFLDRDQUE0QztBQUM1QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUMxQixNQUFNLGlCQUFpQixHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsK0JBQStCLENBQUMsQ0FBQztBQUM5RSxNQUFNLGlCQUFpQixHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsaUNBQWlDLENBQUMsQ0FBQztBQUVoRixNQUFNLFlBQVksR0FBRyxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEVBQUUsY0FBYyxFQUFFO0lBQ3BFLGlCQUFpQixFQUFFLElBQUk7SUFDdkIsYUFBYSxFQUFFLEdBQUcsQ0FBQyxhQUFhLENBQUMsT0FBTztJQUN4QyxpQkFBaUIsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsU0FBUztJQUNqRCxVQUFVLEVBQUUsSUFBSTtJQUNoQixlQUFlLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxxQkFBcUI7SUFDekQsVUFBVSxFQUFFLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVO0lBQzFDLGFBQWEsRUFBRSxFQUFFLENBQUMsbUJBQW1CLENBQUMseUJBQXlCO0NBQ2hFLENBQUMsQ0FBQztBQUNILElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRSxjQUFjLEVBQUU7SUFDL0MsaUJBQWlCLEVBQUUsSUFBSTtJQUN2QixhQUFhLEVBQUUsR0FBRyxDQUFDLGFBQWEsQ0FBQyxPQUFPO0lBQ3hDLGlCQUFpQixFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTO0lBQ2pELFVBQVUsRUFBRSxJQUFJO0lBQ2hCLGVBQWUsRUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLHFCQUFxQjtJQUN6RCxVQUFVLEVBQUUsRUFBRSxDQUFDLGdCQUFnQixDQUFDLFVBQVU7SUFDMUMsYUFBYSxFQUFFLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyx5QkFBeUI7SUFDL0Qsc0JBQXNCLEVBQUUsWUFBWTtJQUNwQyxzQkFBc0IsRUFBRSxPQUFPO0NBQ2hDLENBQUMsQ0FBQztBQUVILElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsNEJBQTRCLEVBQUU7SUFDckQsU0FBUyxFQUFFLENBQUMsaUJBQWlCLENBQUM7Q0FDL0IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCAqIGFzIGludGVnIGZyb20gJ0Bhd3MtY2RrL2ludGVnLXRlc3RzLWFscGhhJztcbmltcG9ydCAqIGFzIHMzIGZyb20gJ2F3cy1jZGstbGliL2F3cy1zMyc7XG5cbi8vIFJlcHJvZHVjZXMgdGhlIGlzc3VlcyBleHBlcmllbmNlZCBpbiAjMjM1ODggYW5kICMyMzU0NywgYm90aCByZXN1bHRpbmcgZnJvbVxuLy8gbm90IHZhbGlkYXRpbmcgbG9nIGRlbGl2ZXJ5IGlzIGFwcGxpZWQgY29ycmVjdGx5IHdoZW4gdGhlIHRhcmdldCBidWNrZXQgZm9yXG4vLyBzZXJ2ZXIgYWNjZXNzIGxvZ3MgaXMgaW4gYW5vdGhlciBhY2NvdW50LlxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcbmNvbnN0IHRhcmdldEJ1Y2tldFN0YWNrID0gbmV3IGNkay5TdGFjayhhcHAsICdhd3MtY2RrLXMzLWFjY2Vzcy1sb2dzLXRhcmdldCcpO1xuY29uc3Qgc291cmNlQnVja2V0U3RhY2sgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ2F3cy1jZGstczMtYWNjZXNzLWxvZ3MtZGVsaXZlcnknKTtcblxuY29uc3QgdGFyZ2V0QnVja2V0ID0gbmV3IHMzLkJ1Y2tldCh0YXJnZXRCdWNrZXRTdGFjaywgJ1RhcmdldEJ1Y2tldCcsIHtcbiAgYXV0b0RlbGV0ZU9iamVjdHM6IHRydWUsXG4gIHJlbW92YWxQb2xpY3k6IGNkay5SZW1vdmFsUG9saWN5LkRFU1RST1ksXG4gIGJsb2NrUHVibGljQWNjZXNzOiBzMy5CbG9ja1B1YmxpY0FjY2Vzcy5CTE9DS19BTEwsXG4gIGVuZm9yY2VTU0w6IHRydWUsXG4gIG9iamVjdE93bmVyc2hpcDogczMuT2JqZWN0T3duZXJzaGlwLkJVQ0tFVF9PV05FUl9FTkZPUkNFRCxcbiAgZW5jcnlwdGlvbjogczMuQnVja2V0RW5jcnlwdGlvbi5TM19NQU5BR0VELFxuICBhY2Nlc3NDb250cm9sOiBzMy5CdWNrZXRBY2Nlc3NDb250cm9sLkJVQ0tFVF9PV05FUl9GVUxMX0NPTlRST0wsXG59KTtcbm5ldyBzMy5CdWNrZXQoc291cmNlQnVja2V0U3RhY2ssICdTb3VyY2VCdWNrZXQnLCB7XG4gIGF1dG9EZWxldGVPYmplY3RzOiB0cnVlLFxuICByZW1vdmFsUG9saWN5OiBjZGsuUmVtb3ZhbFBvbGljeS5ERVNUUk9ZLFxuICBibG9ja1B1YmxpY0FjY2VzczogczMuQmxvY2tQdWJsaWNBY2Nlc3MuQkxPQ0tfQUxMLFxuICBlbmZvcmNlU1NMOiB0cnVlLFxuICBvYmplY3RPd25lcnNoaXA6IHMzLk9iamVjdE93bmVyc2hpcC5CVUNLRVRfT1dORVJfRU5GT1JDRUQsXG4gIGVuY3J5cHRpb246IHMzLkJ1Y2tldEVuY3J5cHRpb24uUzNfTUFOQUdFRCxcbiAgYWNjZXNzQ29udHJvbDogczMuQnVja2V0QWNjZXNzQ29udHJvbC5CVUNLRVRfT1dORVJfRlVMTF9DT05UUk9MLFxuICBzZXJ2ZXJBY2Nlc3NMb2dzQnVja2V0OiB0YXJnZXRCdWNrZXQsXG4gIHNlcnZlckFjY2Vzc0xvZ3NQcmVmaXg6ICd0ZXN0LycsXG59KTtcblxubmV3IGludGVnLkludGVnVGVzdChhcHAsICdTZXJ2ZXJBY2Nlc3NMb2dzSW1wb3J0VGVzdCcsIHtcbiAgdGVzdENhc2VzOiBbc291cmNlQnVja2V0U3RhY2tdLFxufSk7XG4iXX0=