"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const targets = require("aws-cdk-lib/aws-events-targets");
const lambda = require("aws-cdk-lib/aws-lambda");
const sns = require("aws-cdk-lib/aws-sns");
const cdk = require("aws-cdk-lib");
const integ = require("@aws-cdk/integ-tests-alpha");
const config = require("aws-cdk-lib/aws-config");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-cdk-config-custompolicy');
// A custom rule that runs on configuration changes of EC2 instances
const fn = new lambda.Function(stack, 'CustomFunction', {
    code: lambda.AssetCode.fromInline('exports.handler = (event) => console.log(event);'),
    handler: 'index.handler',
    runtime: lambda.Runtime.NODEJS_14_X,
});
new config.CustomRule(stack, 'Custom', {
    configurationChanges: true,
    lambdaFunction: fn,
    ruleScope: config.RuleScope.fromResources([config.ResourceType.EC2_INSTANCE]),
});
// A rule to detect stacks drifts
const driftRule = new config.CloudFormationStackDriftDetectionCheck(stack, 'Drift');
// Topic for compliance events
const complianceTopic = new sns.Topic(stack, 'ComplianceTopic');
// Send notification on compliance change
driftRule.onComplianceChange('ComplianceChange', {
    target: new targets.SnsTopic(complianceTopic),
});
new integ.IntegTest(app, 'aws-cdk-config-rule-integ', {
    testCases: [stack],
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcucnVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLnJ1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwwREFBMEQ7QUFDMUQsaURBQWlEO0FBQ2pELDJDQUEyQztBQUMzQyxtQ0FBbUM7QUFDbkMsb0RBQW9EO0FBQ3BELGlEQUFpRDtBQUVqRCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUMxQixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLDZCQUE2QixDQUFDLENBQUM7QUFFaEUsb0VBQW9FO0FBQ3BFLE1BQU0sRUFBRSxHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLEVBQUU7SUFDdEQsSUFBSSxFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLGtEQUFrRCxDQUFDO0lBQ3JGLE9BQU8sRUFBRSxlQUFlO0lBQ3hCLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVc7Q0FDcEMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUU7SUFDckMsb0JBQW9CLEVBQUUsSUFBSTtJQUMxQixjQUFjLEVBQUUsRUFBRTtJQUNsQixTQUFTLEVBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDO0NBQzlFLENBQUMsQ0FBQztBQUVILGlDQUFpQztBQUNqQyxNQUFNLFNBQVMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxzQ0FBc0MsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFFcEYsOEJBQThCO0FBQzlCLE1BQU0sZUFBZSxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztBQUVoRSx5Q0FBeUM7QUFDekMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLGtCQUFrQixFQUFFO0lBQy9DLE1BQU0sRUFBRSxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDO0NBQzlDLENBQUMsQ0FBQztBQUdILElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsMkJBQTJCLEVBQUU7SUFDcEQsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDO0NBQ25CLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHRhcmdldHMgZnJvbSAnYXdzLWNkay1saWIvYXdzLWV2ZW50cy10YXJnZXRzJztcbmltcG9ydCAqIGFzIGxhbWJkYSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtbGFtYmRhJztcbmltcG9ydCAqIGFzIHNucyBmcm9tICdhd3MtY2RrLWxpYi9hd3Mtc25zJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgKiBhcyBpbnRlZyBmcm9tICdAYXdzLWNkay9pbnRlZy10ZXN0cy1hbHBoYSc7XG5pbXBvcnQgKiBhcyBjb25maWcgZnJvbSAnYXdzLWNkay1saWIvYXdzLWNvbmZpZyc7XG5cbmNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG5jb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soYXBwLCAnYXdzLWNkay1jb25maWctY3VzdG9tcG9saWN5Jyk7XG5cbi8vIEEgY3VzdG9tIHJ1bGUgdGhhdCBydW5zIG9uIGNvbmZpZ3VyYXRpb24gY2hhbmdlcyBvZiBFQzIgaW5zdGFuY2VzXG5jb25zdCBmbiA9IG5ldyBsYW1iZGEuRnVuY3Rpb24oc3RhY2ssICdDdXN0b21GdW5jdGlvbicsIHtcbiAgY29kZTogbGFtYmRhLkFzc2V0Q29kZS5mcm9tSW5saW5lKCdleHBvcnRzLmhhbmRsZXIgPSAoZXZlbnQpID0+IGNvbnNvbGUubG9nKGV2ZW50KTsnKSxcbiAgaGFuZGxlcjogJ2luZGV4LmhhbmRsZXInLFxuICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5OT0RFSlNfMTRfWCxcbn0pO1xuXG5uZXcgY29uZmlnLkN1c3RvbVJ1bGUoc3RhY2ssICdDdXN0b20nLCB7XG4gIGNvbmZpZ3VyYXRpb25DaGFuZ2VzOiB0cnVlLFxuICBsYW1iZGFGdW5jdGlvbjogZm4sXG4gIHJ1bGVTY29wZTogY29uZmlnLlJ1bGVTY29wZS5mcm9tUmVzb3VyY2VzKFtjb25maWcuUmVzb3VyY2VUeXBlLkVDMl9JTlNUQU5DRV0pLFxufSk7XG5cbi8vIEEgcnVsZSB0byBkZXRlY3Qgc3RhY2tzIGRyaWZ0c1xuY29uc3QgZHJpZnRSdWxlID0gbmV3IGNvbmZpZy5DbG91ZEZvcm1hdGlvblN0YWNrRHJpZnREZXRlY3Rpb25DaGVjayhzdGFjaywgJ0RyaWZ0Jyk7XG5cbi8vIFRvcGljIGZvciBjb21wbGlhbmNlIGV2ZW50c1xuY29uc3QgY29tcGxpYW5jZVRvcGljID0gbmV3IHNucy5Ub3BpYyhzdGFjaywgJ0NvbXBsaWFuY2VUb3BpYycpO1xuXG4vLyBTZW5kIG5vdGlmaWNhdGlvbiBvbiBjb21wbGlhbmNlIGNoYW5nZVxuZHJpZnRSdWxlLm9uQ29tcGxpYW5jZUNoYW5nZSgnQ29tcGxpYW5jZUNoYW5nZScsIHtcbiAgdGFyZ2V0OiBuZXcgdGFyZ2V0cy5TbnNUb3BpYyhjb21wbGlhbmNlVG9waWMpLFxufSk7XG5cblxubmV3IGludGVnLkludGVnVGVzdChhcHAsICdhd3MtY2RrLWNvbmZpZy1ydWxlLWludGVnJywge1xuICB0ZXN0Q2FzZXM6IFtzdGFja10sXG59KTsiXX0=