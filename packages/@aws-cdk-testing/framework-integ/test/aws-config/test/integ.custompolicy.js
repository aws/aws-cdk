"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iam = require("aws-cdk-lib/aws-iam");
const cdk = require("aws-cdk-lib");
const integ = require("@aws-cdk/integ-tests-alpha");
const config = require("aws-cdk-lib/aws-config");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-cdk-config-custompolicy');
const samplePolicyText = `
# This rule checks if point in time recovery (PITR) is enabled on active Amazon DynamoDB tables
let status = ['ACTIVE']

rule tableisactive when
    resourceType == "AWS::DynamoDB::Table" {
    configuration.tableStatus == %status
}

rule checkcompliance when
    resourceType == "AWS::DynamoDB::Table"
    tableisactive {
        let pitr = supplementaryConfiguration.ContinuousBackupsDescription.pointInTimeRecoveryDescription.pointInTimeRecoveryStatus
        %pitr == "ENABLED"
}
`;
new config.CustomPolicy(stack, 'Custom', {
    policyText: samplePolicyText,
    enableDebugLog: true,
    ruleScope: config.RuleScope.fromResources([config.ResourceType.DYNAMODB_TABLE]),
});
const user = new iam.User(stack, 'sample-user');
new config.CustomPolicy(stack, 'Custom-lazy', {
    policyText: 'lazy-create-test',
    enableDebugLog: true,
    ruleScope: config.RuleScope.fromResource(config.ResourceType.IAM_USER, user.userName),
});
new integ.IntegTest(app, 'aws-cdk-config-custompolicy-integ', {
    testCases: [stack],
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuY3VzdG9tcG9saWN5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW50ZWcuY3VzdG9tcG9saWN5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkNBQTJDO0FBQzNDLG1DQUFtQztBQUNuQyxvREFBb0Q7QUFDcEQsaURBQWlEO0FBRWpELE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQzFCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsNkJBQTZCLENBQUMsQ0FBQztBQUVoRSxNQUFNLGdCQUFnQixHQUFHOzs7Ozs7Ozs7Ozs7Ozs7Q0FleEIsQ0FBQztBQUVGLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFO0lBQ3ZDLFVBQVUsRUFBRSxnQkFBZ0I7SUFDNUIsY0FBYyxFQUFFLElBQUk7SUFDcEIsU0FBUyxFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsQ0FBQztDQUNoRixDQUFDLENBQUM7QUFFSCxNQUFNLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBQ2hELElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsYUFBYSxFQUFFO0lBQzVDLFVBQVUsRUFBRSxrQkFBa0I7SUFDOUIsY0FBYyxFQUFFLElBQUk7SUFDcEIsU0FBUyxFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUM7Q0FDdEYsQ0FBQyxDQUFDO0FBRUgsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxtQ0FBbUMsRUFBRTtJQUM1RCxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUM7Q0FDbkIsQ0FBQyxDQUFDO0FBQ0gsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgaWFtIGZyb20gJ2F3cy1jZGstbGliL2F3cy1pYW0nO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCAqIGFzIGludGVnIGZyb20gJ0Bhd3MtY2RrL2ludGVnLXRlc3RzLWFscGhhJztcbmltcG9ydCAqIGFzIGNvbmZpZyBmcm9tICdhd3MtY2RrLWxpYi9hd3MtY29uZmlnJztcblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcbmNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjayhhcHAsICdhd3MtY2RrLWNvbmZpZy1jdXN0b21wb2xpY3knKTtcblxuY29uc3Qgc2FtcGxlUG9saWN5VGV4dCA9IGBcbiMgVGhpcyBydWxlIGNoZWNrcyBpZiBwb2ludCBpbiB0aW1lIHJlY292ZXJ5IChQSVRSKSBpcyBlbmFibGVkIG9uIGFjdGl2ZSBBbWF6b24gRHluYW1vREIgdGFibGVzXG5sZXQgc3RhdHVzID0gWydBQ1RJVkUnXVxuXG5ydWxlIHRhYmxlaXNhY3RpdmUgd2hlblxuICAgIHJlc291cmNlVHlwZSA9PSBcIkFXUzo6RHluYW1vREI6OlRhYmxlXCIge1xuICAgIGNvbmZpZ3VyYXRpb24udGFibGVTdGF0dXMgPT0gJXN0YXR1c1xufVxuXG5ydWxlIGNoZWNrY29tcGxpYW5jZSB3aGVuXG4gICAgcmVzb3VyY2VUeXBlID09IFwiQVdTOjpEeW5hbW9EQjo6VGFibGVcIlxuICAgIHRhYmxlaXNhY3RpdmUge1xuICAgICAgICBsZXQgcGl0ciA9IHN1cHBsZW1lbnRhcnlDb25maWd1cmF0aW9uLkNvbnRpbnVvdXNCYWNrdXBzRGVzY3JpcHRpb24ucG9pbnRJblRpbWVSZWNvdmVyeURlc2NyaXB0aW9uLnBvaW50SW5UaW1lUmVjb3ZlcnlTdGF0dXNcbiAgICAgICAgJXBpdHIgPT0gXCJFTkFCTEVEXCJcbn1cbmA7XG5cbm5ldyBjb25maWcuQ3VzdG9tUG9saWN5KHN0YWNrLCAnQ3VzdG9tJywge1xuICBwb2xpY3lUZXh0OiBzYW1wbGVQb2xpY3lUZXh0LFxuICBlbmFibGVEZWJ1Z0xvZzogdHJ1ZSxcbiAgcnVsZVNjb3BlOiBjb25maWcuUnVsZVNjb3BlLmZyb21SZXNvdXJjZXMoW2NvbmZpZy5SZXNvdXJjZVR5cGUuRFlOQU1PREJfVEFCTEVdKSxcbn0pO1xuXG5jb25zdCB1c2VyID0gbmV3IGlhbS5Vc2VyKHN0YWNrLCAnc2FtcGxlLXVzZXInKTtcbm5ldyBjb25maWcuQ3VzdG9tUG9saWN5KHN0YWNrLCAnQ3VzdG9tLWxhenknLCB7XG4gIHBvbGljeVRleHQ6ICdsYXp5LWNyZWF0ZS10ZXN0JyxcbiAgZW5hYmxlRGVidWdMb2c6IHRydWUsXG4gIHJ1bGVTY29wZTogY29uZmlnLlJ1bGVTY29wZS5mcm9tUmVzb3VyY2UoY29uZmlnLlJlc291cmNlVHlwZS5JQU1fVVNFUiwgdXNlci51c2VyTmFtZSksXG59KTtcblxubmV3IGludGVnLkludGVnVGVzdChhcHAsICdhd3MtY2RrLWNvbmZpZy1jdXN0b21wb2xpY3ktaW50ZWcnLCB7XG4gIHRlc3RDYXNlczogW3N0YWNrXSxcbn0pO1xuYXBwLnN5bnRoKCk7XG4iXX0=