"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const autoscaling = require("aws-cdk-lib/aws-autoscaling");
const ec2 = require("aws-cdk-lib/aws-ec2");
const cdk = require("aws-cdk-lib");
const integ = require("@aws-cdk/integ-tests-alpha");
const ecs = require("aws-cdk-lib/aws-ecs");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'integ-default-capacity-provider');
const vpc = new ec2.Vpc(stack, 'Vpc', { maxAzs: 2 });
const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'TaskDef');
taskDefinition.addContainer('web', {
    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),
    memoryReservationMiB: 256,
});
const autoScalingGroup = new autoscaling.AutoScalingGroup(stack, 'ASG', {
    vpc,
    instanceType: new ec2.InstanceType('t2.micro'),
    machineImage: ecs.EcsOptimizedImage.amazonLinux2(),
});
const cp = new ecs.AsgCapacityProvider(stack, 'EC2CapacityProvider', {
    autoScalingGroup,
    // This is to allow cdk destroy to work; otherwise deletion will hang bc ASG cannot be deleted
    enableManagedTerminationProtection: false,
});
const cluster = new ecs.Cluster(stack, 'EC2CPCluster', {
    vpc,
    enableFargateCapacityProviders: true,
});
cluster.addAsgCapacityProvider(cp);
cluster.addDefaultCapacityProviderStrategy([
    { capacityProvider: 'FARGATE', base: 1, weight: 1 },
    { capacityProvider: 'FARGATE_SPOT', weight: 1 },
]);
new ecs.Ec2Service(stack, 'EC2Service', {
    cluster,
    taskDefinition,
});
new integ.IntegTest(app, 'CapacityProviders', {
    testCases: [stack],
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuZGVmYXVsdC1jYXBhY2l0eS1wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLmRlZmF1bHQtY2FwYWNpdHktcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyREFBMkQ7QUFDM0QsMkNBQTJDO0FBQzNDLG1DQUFtQztBQUNuQyxvREFBb0Q7QUFDcEQsMkNBQTJDO0FBRTNDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQzFCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsaUNBQWlDLENBQUMsQ0FBQztBQUVwRSxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRXJELE1BQU0sY0FBYyxHQUFHLElBQUksR0FBRyxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztBQUVuRSxjQUFjLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRTtJQUNqQyxLQUFLLEVBQUUsR0FBRyxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsMEJBQTBCLENBQUM7SUFDbEUsb0JBQW9CLEVBQUUsR0FBRztDQUMxQixDQUFDLENBQUM7QUFFSCxNQUFNLGdCQUFnQixHQUFHLElBQUksV0FBVyxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUU7SUFDdEUsR0FBRztJQUNILFlBQVksRUFBRSxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDO0lBQzlDLFlBQVksRUFBRSxHQUFHLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFO0NBQ25ELENBQUMsQ0FBQztBQUVILE1BQU0sRUFBRSxHQUFHLElBQUksR0FBRyxDQUFDLG1CQUFtQixDQUFDLEtBQUssRUFBRSxxQkFBcUIsRUFBRTtJQUNuRSxnQkFBZ0I7SUFDaEIsOEZBQThGO0lBQzlGLGtDQUFrQyxFQUFFLEtBQUs7Q0FDMUMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxPQUFPLEdBQUcsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxjQUFjLEVBQUU7SUFDckQsR0FBRztJQUNILDhCQUE4QixFQUFFLElBQUk7Q0FDckMsQ0FBQyxDQUFDO0FBRUgsT0FBTyxDQUFDLHNCQUFzQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ25DLE9BQU8sQ0FBQyxrQ0FBa0MsQ0FBQztJQUN6QyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUU7SUFDbkQsRUFBRSxnQkFBZ0IsRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRTtDQUNoRCxDQUFDLENBQUM7QUFHSCxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRTtJQUN0QyxPQUFPO0lBQ1AsY0FBYztDQUNmLENBQUMsQ0FBQztBQUNILElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsbUJBQW1CLEVBQUU7SUFDNUMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDO0NBQ25CLENBQUMsQ0FBQztBQUNILEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGF1dG9zY2FsaW5nIGZyb20gJ2F3cy1jZGstbGliL2F3cy1hdXRvc2NhbGluZyc7XG5pbXBvcnQgKiBhcyBlYzIgZnJvbSAnYXdzLWNkay1saWIvYXdzLWVjMic7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0ICogYXMgaW50ZWcgZnJvbSAnQGF3cy1jZGsvaW50ZWctdGVzdHMtYWxwaGEnO1xuaW1wb3J0ICogYXMgZWNzIGZyb20gJ2F3cy1jZGstbGliL2F3cy1lY3MnO1xuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ2ludGVnLWRlZmF1bHQtY2FwYWNpdHktcHJvdmlkZXInKTtcblxuY29uc3QgdnBjID0gbmV3IGVjMi5WcGMoc3RhY2ssICdWcGMnLCB7IG1heEF6czogMiB9KTtcblxuY29uc3QgdGFza0RlZmluaXRpb24gPSBuZXcgZWNzLkVjMlRhc2tEZWZpbml0aW9uKHN0YWNrLCAnVGFza0RlZicpO1xuXG50YXNrRGVmaW5pdGlvbi5hZGRDb250YWluZXIoJ3dlYicsIHtcbiAgaW1hZ2U6IGVjcy5Db250YWluZXJJbWFnZS5mcm9tUmVnaXN0cnkoJ2FtYXpvbi9hbWF6b24tZWNzLXNhbXBsZScpLFxuICBtZW1vcnlSZXNlcnZhdGlvbk1pQjogMjU2LFxufSk7XG5cbmNvbnN0IGF1dG9TY2FsaW5nR3JvdXAgPSBuZXcgYXV0b3NjYWxpbmcuQXV0b1NjYWxpbmdHcm91cChzdGFjaywgJ0FTRycsIHtcbiAgdnBjLFxuICBpbnN0YW5jZVR5cGU6IG5ldyBlYzIuSW5zdGFuY2VUeXBlKCd0Mi5taWNybycpLFxuICBtYWNoaW5lSW1hZ2U6IGVjcy5FY3NPcHRpbWl6ZWRJbWFnZS5hbWF6b25MaW51eDIoKSxcbn0pO1xuXG5jb25zdCBjcCA9IG5ldyBlY3MuQXNnQ2FwYWNpdHlQcm92aWRlcihzdGFjaywgJ0VDMkNhcGFjaXR5UHJvdmlkZXInLCB7XG4gIGF1dG9TY2FsaW5nR3JvdXAsXG4gIC8vIFRoaXMgaXMgdG8gYWxsb3cgY2RrIGRlc3Ryb3kgdG8gd29yazsgb3RoZXJ3aXNlIGRlbGV0aW9uIHdpbGwgaGFuZyBiYyBBU0cgY2Fubm90IGJlIGRlbGV0ZWRcbiAgZW5hYmxlTWFuYWdlZFRlcm1pbmF0aW9uUHJvdGVjdGlvbjogZmFsc2UsXG59KTtcblxuY29uc3QgY2x1c3RlciA9IG5ldyBlY3MuQ2x1c3RlcihzdGFjaywgJ0VDMkNQQ2x1c3RlcicsIHtcbiAgdnBjLFxuICBlbmFibGVGYXJnYXRlQ2FwYWNpdHlQcm92aWRlcnM6IHRydWUsXG59KTtcblxuY2x1c3Rlci5hZGRBc2dDYXBhY2l0eVByb3ZpZGVyKGNwKTtcbmNsdXN0ZXIuYWRkRGVmYXVsdENhcGFjaXR5UHJvdmlkZXJTdHJhdGVneShbXG4gIHsgY2FwYWNpdHlQcm92aWRlcjogJ0ZBUkdBVEUnLCBiYXNlOiAxLCB3ZWlnaHQ6IDEgfSxcbiAgeyBjYXBhY2l0eVByb3ZpZGVyOiAnRkFSR0FURV9TUE9UJywgd2VpZ2h0OiAxIH0sXG5dKTtcblxuXG5uZXcgZWNzLkVjMlNlcnZpY2Uoc3RhY2ssICdFQzJTZXJ2aWNlJywge1xuICBjbHVzdGVyLFxuICB0YXNrRGVmaW5pdGlvbixcbn0pO1xubmV3IGludGVnLkludGVnVGVzdChhcHAsICdDYXBhY2l0eVByb3ZpZGVycycsIHtcbiAgdGVzdENhc2VzOiBbc3RhY2tdLFxufSk7XG5hcHAuc3ludGgoKTtcbiJdfQ==