"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ec2 = require("aws-cdk-lib/aws-ec2");
const cloudmap = require("aws-cdk-lib/aws-servicediscovery");
const cdk = require("aws-cdk-lib");
const ecs = require("aws-cdk-lib/aws-ecs");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-ecs-integ');
const vpc = new ec2.Vpc(stack, 'Vpc', {
    maxAzs: 2,
    subnetConfiguration: [
        {
            name: 'pub',
            cidrMask: 24,
            subnetType: ec2.SubnetType.PUBLIC,
        },
    ],
});
const cluster = new ecs.Cluster(stack, 'FargateCluster', { vpc });
const capacity = cluster.addCapacity('capacity', {
    instanceType: ec2.InstanceType.of(ec2.InstanceClass.T3, ec2.InstanceSize.MICRO),
    desiredCapacity: 1,
    minCapacity: 1,
    maxCapacity: 1,
});
capacity.connections.allowFromAnyIpv4(ec2.Port.tcpRange(32768, 61000));
cluster.addDefaultCloudMapNamespace({ name: 'aws-ecs-integ' });
const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'TaskDef', {});
// Main container
const mainContainer = taskDefinition.addContainer('nginx', {
    image: ecs.ContainerImage.fromRegistry('nginx'),
    memoryReservationMiB: 32,
    memoryLimitMiB: 512,
});
mainContainer.addPortMappings({
    containerPort: 80,
    protocol: ecs.Protocol.TCP,
});
// Name container with SRV
const nameContainer = taskDefinition.addContainer('name', {
    image: ecs.ContainerImage.fromRegistry('nathanpeck/name'),
    environment: {
        PORT: '81',
    },
    memoryReservationMiB: 32,
    memoryLimitMiB: 512,
});
nameContainer.addPortMappings({
    containerPort: 81,
    protocol: ecs.Protocol.TCP,
});
new ecs.Ec2Service(stack, 'Service', {
    cluster,
    taskDefinition,
    desiredCount: 3,
    cloudMapOptions: {
        container: nameContainer,
        containerPort: 81,
        dnsRecordType: cloudmap.DnsRecordType.SRV,
    },
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuY2xvdWRtYXAtY29udGFpbmVyLXBvcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy5jbG91ZG1hcC1jb250YWluZXItcG9ydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJDQUEyQztBQUMzQyw2REFBNkQ7QUFDN0QsbUNBQW1DO0FBQ25DLDJDQUEyQztBQUUzQyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUMxQixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQ2xELE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFO0lBQ3BDLE1BQU0sRUFBRSxDQUFDO0lBQ1QsbUJBQW1CLEVBQUU7UUFDbkI7WUFDRSxJQUFJLEVBQUUsS0FBSztZQUNYLFFBQVEsRUFBRSxFQUFFO1lBQ1osVUFBVSxFQUFFLEdBQUcsQ0FBQyxVQUFVLENBQUMsTUFBTTtTQUNsQztLQUNGO0NBQ0YsQ0FBQyxDQUFDO0FBQ0gsTUFBTSxPQUFPLEdBQUcsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFFbEUsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUU7SUFDL0MsWUFBWSxFQUFFLEdBQUcsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDO0lBQy9FLGVBQWUsRUFBRSxDQUFDO0lBQ2xCLFdBQVcsRUFBRSxDQUFDO0lBQ2QsV0FBVyxFQUFFLENBQUM7Q0FDZixDQUFDLENBQUM7QUFDSCxRQUFRLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBRXZFLE9BQU8sQ0FBQywyQkFBMkIsQ0FBQyxFQUFFLElBQUksRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUFDO0FBRS9ELE1BQU0sY0FBYyxHQUFHLElBQUksR0FBRyxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFFdkUsaUJBQWlCO0FBQ2pCLE1BQU0sYUFBYSxHQUFHLGNBQWMsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFO0lBQ3pELEtBQUssRUFBRSxHQUFHLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUM7SUFDL0Msb0JBQW9CLEVBQUUsRUFBRTtJQUN4QixjQUFjLEVBQUUsR0FBRztDQUNwQixDQUFDLENBQUM7QUFFSCxhQUFhLENBQUMsZUFBZSxDQUFDO0lBQzVCLGFBQWEsRUFBRSxFQUFFO0lBQ2pCLFFBQVEsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUc7Q0FDM0IsQ0FBQyxDQUFDO0FBRUgsMEJBQTBCO0FBQzFCLE1BQU0sYUFBYSxHQUFHLGNBQWMsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFO0lBQ3hELEtBQUssRUFBRSxHQUFHLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQztJQUN6RCxXQUFXLEVBQUU7UUFDWCxJQUFJLEVBQUUsSUFBSTtLQUNYO0lBQ0Qsb0JBQW9CLEVBQUUsRUFBRTtJQUN4QixjQUFjLEVBQUUsR0FBRztDQUNwQixDQUFDLENBQUM7QUFFSCxhQUFhLENBQUMsZUFBZSxDQUFDO0lBQzVCLGFBQWEsRUFBRSxFQUFFO0lBQ2pCLFFBQVEsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUc7Q0FDM0IsQ0FBQyxDQUFDO0FBRUgsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7SUFDbkMsT0FBTztJQUNQLGNBQWM7SUFDZCxZQUFZLEVBQUUsQ0FBQztJQUNmLGVBQWUsRUFBRTtRQUNmLFNBQVMsRUFBRSxhQUFhO1FBQ3hCLGFBQWEsRUFBRSxFQUFFO1FBQ2pCLGFBQWEsRUFBRSxRQUFRLENBQUMsYUFBYSxDQUFDLEdBQUc7S0FDMUM7Q0FDRixDQUFDLENBQUM7QUFFSCxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBlYzIgZnJvbSAnYXdzLWNkay1saWIvYXdzLWVjMic7XG5pbXBvcnQgKiBhcyBjbG91ZG1hcCBmcm9tICdhd3MtY2RrLWxpYi9hd3Mtc2VydmljZWRpc2NvdmVyeSc7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0ICogYXMgZWNzIGZyb20gJ2F3cy1jZGstbGliL2F3cy1lY3MnO1xuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ2F3cy1lY3MtaW50ZWcnKTtcbmNvbnN0IHZwYyA9IG5ldyBlYzIuVnBjKHN0YWNrLCAnVnBjJywge1xuICBtYXhBenM6IDIsXG4gIHN1Ym5ldENvbmZpZ3VyYXRpb246IFtcbiAgICB7XG4gICAgICBuYW1lOiAncHViJyxcbiAgICAgIGNpZHJNYXNrOiAyNCxcbiAgICAgIHN1Ym5ldFR5cGU6IGVjMi5TdWJuZXRUeXBlLlBVQkxJQyxcbiAgICB9LFxuICBdLFxufSk7XG5jb25zdCBjbHVzdGVyID0gbmV3IGVjcy5DbHVzdGVyKHN0YWNrLCAnRmFyZ2F0ZUNsdXN0ZXInLCB7IHZwYyB9KTtcblxuY29uc3QgY2FwYWNpdHkgPSBjbHVzdGVyLmFkZENhcGFjaXR5KCdjYXBhY2l0eScsIHtcbiAgaW5zdGFuY2VUeXBlOiBlYzIuSW5zdGFuY2VUeXBlLm9mKGVjMi5JbnN0YW5jZUNsYXNzLlQzLCBlYzIuSW5zdGFuY2VTaXplLk1JQ1JPKSxcbiAgZGVzaXJlZENhcGFjaXR5OiAxLFxuICBtaW5DYXBhY2l0eTogMSxcbiAgbWF4Q2FwYWNpdHk6IDEsXG59KTtcbmNhcGFjaXR5LmNvbm5lY3Rpb25zLmFsbG93RnJvbUFueUlwdjQoZWMyLlBvcnQudGNwUmFuZ2UoMzI3NjgsIDYxMDAwKSk7XG5cbmNsdXN0ZXIuYWRkRGVmYXVsdENsb3VkTWFwTmFtZXNwYWNlKHsgbmFtZTogJ2F3cy1lY3MtaW50ZWcnIH0pO1xuXG5jb25zdCB0YXNrRGVmaW5pdGlvbiA9IG5ldyBlY3MuRWMyVGFza0RlZmluaXRpb24oc3RhY2ssICdUYXNrRGVmJywge30pO1xuXG4vLyBNYWluIGNvbnRhaW5lclxuY29uc3QgbWFpbkNvbnRhaW5lciA9IHRhc2tEZWZpbml0aW9uLmFkZENvbnRhaW5lcignbmdpbngnLCB7XG4gIGltYWdlOiBlY3MuQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCduZ2lueCcpLFxuICBtZW1vcnlSZXNlcnZhdGlvbk1pQjogMzIsXG4gIG1lbW9yeUxpbWl0TWlCOiA1MTIsXG59KTtcblxubWFpbkNvbnRhaW5lci5hZGRQb3J0TWFwcGluZ3Moe1xuICBjb250YWluZXJQb3J0OiA4MCxcbiAgcHJvdG9jb2w6IGVjcy5Qcm90b2NvbC5UQ1AsXG59KTtcblxuLy8gTmFtZSBjb250YWluZXIgd2l0aCBTUlZcbmNvbnN0IG5hbWVDb250YWluZXIgPSB0YXNrRGVmaW5pdGlvbi5hZGRDb250YWluZXIoJ25hbWUnLCB7XG4gIGltYWdlOiBlY3MuQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCduYXRoYW5wZWNrL25hbWUnKSxcbiAgZW52aXJvbm1lbnQ6IHtcbiAgICBQT1JUOiAnODEnLFxuICB9LFxuICBtZW1vcnlSZXNlcnZhdGlvbk1pQjogMzIsXG4gIG1lbW9yeUxpbWl0TWlCOiA1MTIsXG59KTtcblxubmFtZUNvbnRhaW5lci5hZGRQb3J0TWFwcGluZ3Moe1xuICBjb250YWluZXJQb3J0OiA4MSxcbiAgcHJvdG9jb2w6IGVjcy5Qcm90b2NvbC5UQ1AsXG59KTtcblxubmV3IGVjcy5FYzJTZXJ2aWNlKHN0YWNrLCAnU2VydmljZScsIHtcbiAgY2x1c3RlcixcbiAgdGFza0RlZmluaXRpb24sXG4gIGRlc2lyZWRDb3VudDogMyxcbiAgY2xvdWRNYXBPcHRpb25zOiB7XG4gICAgY29udGFpbmVyOiBuYW1lQ29udGFpbmVyLFxuICAgIGNvbnRhaW5lclBvcnQ6IDgxLFxuICAgIGRuc1JlY29yZFR5cGU6IGNsb3VkbWFwLkRuc1JlY29yZFR5cGUuU1JWLFxuICB9LFxufSk7XG5cbmFwcC5zeW50aCgpOyJdfQ==