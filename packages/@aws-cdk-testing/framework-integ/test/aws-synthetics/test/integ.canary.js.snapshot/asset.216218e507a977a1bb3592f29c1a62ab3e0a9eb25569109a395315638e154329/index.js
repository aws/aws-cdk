"use strict";var f=Object.create;var c=Object.defineProperty;var C=Object.getOwnPropertyDescriptor;var w=Object.getOwnPropertyNames;var A=Object.getPrototypeOf,P=Object.prototype.hasOwnProperty;var L=(t,e)=>{for(var o in e)c(t,o,{get:e[o],enumerable:!0})},l=(t,e,o,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of w(e))!P.call(t,s)&&s!==o&&c(t,s,{get:()=>e[s],enumerable:!(r=C(e,s))||r.enumerable});return t};var p=(t,e,o)=>(o=t!=null?f(A(t)):{},l(e||!t||!t.__esModule?c(o,"default",{value:t,enumerable:!0}):o,t)),k=t=>l(c({},"__esModule",{value:!0}),t);var N={};L(N,{autoDeleteHandler:()=>g,handler:()=>O});module.exports=k(N);var i=require("@aws-sdk/client-s3");var R=p(require("https")),y=p(require("url")),a={sendHttpRequest:b,log:B,includeStackTraces:!0,userHandlerIndex:"./index"},m="AWSCDK::CustomResourceProviderFramework::CREATE_FAILED",D="AWSCDK::CustomResourceProviderFramework::MISSING_PHYSICAL_ID";function h(t){return async(e,o)=>{let r={...e,ResponseURL:"..."};if(a.log(JSON.stringify(r,void 0,2)),e.RequestType==="Delete"&&e.PhysicalResourceId===m){a.log("ignoring DELETE event caused by a failed CREATE event"),await u("SUCCESS",e);return}try{let s=await t(r,o),n=T(e,s);await u("SUCCESS",n)}catch(s){let n={...e,Reason:a.includeStackTraces?s.stack:s.message};n.PhysicalResourceId||(e.RequestType==="Create"?(a.log("CREATE failed, responding with a marker physical resource id so that the subsequent DELETE will be ignored"),n.PhysicalResourceId=m):a.log(`ERROR: Malformed event. "PhysicalResourceId" is required: ${JSON.stringify(e)}`)),await u("FAILED",n)}}}function T(t,e={}){let o=e.PhysicalResourceId??t.PhysicalResourceId??t.RequestId;if(t.RequestType==="Delete"&&o!==t.PhysicalResourceId)throw new Error(`DELETE: cannot change the physical resource ID from "${t.PhysicalResourceId}" to "${e.PhysicalResourceId}" during deletion`);return{...t,...e,PhysicalResourceId:o}}async function u(t,e){let o={Status:t,Reason:e.Reason??t,StackId:e.StackId,RequestId:e.RequestId,PhysicalResourceId:e.PhysicalResourceId||D,LogicalResourceId:e.LogicalResourceId,NoEcho:e.NoEcho,Data:e.Data};a.log("submit response to cloudformation",o);let r=JSON.stringify(o),s=y.parse(e.ResponseURL),n={hostname:s.hostname,path:s.path,method:"PUT",headers:{"content-type":"","content-length":Buffer.byteLength(r,"utf8")}};await x({attempts:5,sleep:1e3},a.sendHttpRequest)(n,r)}async function b(t,e){return new Promise((o,r)=>{try{let s=R.request(t,n=>o());s.on("error",r),s.write(e),s.end()}catch(s){r(s)}})}function B(t,...e){console.log(t,...e)}function x(t,e){return async(...o)=>{let r=t.attempts,s=t.sleep;for(;;)try{return await e(...o)}catch(n){if(r--<=0)throw n;await H(Math.floor(Math.random()*s)),s*=2}}}async function H(t){return new Promise(e=>setTimeout(e,t))}var E="aws-cdk:auto-delete-objects",d=new i.S3({}),O=h(g);async function g(t){switch(t.RequestType){case"Create":return;case"Update":return F(t);case"Delete":return I(t.ResourceProperties?.BucketName)}}async function F(t){let e=t,o=e.OldResourceProperties?.BucketName,r=e.ResourceProperties?.BucketName;if(r!=null&&o!=null&&r!==o)return I(o)}async function S(t){let e=await d.listObjectVersions({Bucket:t}),o=[...e.Versions??[],...e.DeleteMarkers??[]];if(o.length===0)return;let r=o.map(s=>({Key:s.Key,VersionId:s.VersionId}));await d.deleteObjects({Bucket:t,Delete:{Objects:r}}),e?.IsTruncated&&await S(t)}async function I(t){if(!t)throw new Error("No BucketName was provided.");try{if(!await _(t)){console.log(`Bucket does not have '${E}' tag, skipping cleaning.`);return}await S(t)}catch(e){if(e instanceof i.S3ServiceException&&e.name==="NoSuchBucket"){console.log(`Bucket '${t}' does not exist.`);return}throw e}}async function _(t){return(await d.getBucketTagging({Bucket:t})).TagSet?.some(o=>o.Key===E&&o.Value==="true")}0&&(module.exports={autoDeleteHandler,handler});
