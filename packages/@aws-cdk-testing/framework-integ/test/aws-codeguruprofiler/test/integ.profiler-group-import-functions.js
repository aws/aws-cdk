"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const integ_tests_alpha_1 = require("@aws-cdk/integ-tests-alpha");
const aws_codeguruprofiler_1 = require("aws-cdk-lib/aws-codeguruprofiler");
const app = new aws_cdk_lib_1.App();
const stack = new aws_cdk_lib_1.Stack(app, 'ProfilingGroupTestStack');
const profilingGroup1 = new aws_codeguruprofiler_1.ProfilingGroup(stack, 'ProfilingGroupWithExplicitlySetName', {
    profilingGroupName: 'ExplicitlySetName',
});
const profilingGroup2 = new aws_codeguruprofiler_1.ProfilingGroup(stack, 'ProfilingGroupWithImplicitlySetName');
const publishAppRole = new aws_iam_1.Role(stack, 'PublishAppRole', {
    assumedBy: new aws_iam_1.AccountRootPrincipal(),
});
profilingGroup1.grantPublish(publishAppRole);
profilingGroup2.grantPublish(publishAppRole);
const importedGroupWithExplicitlySetName = aws_codeguruprofiler_1.ProfilingGroup.fromProfilingGroupName(stack, 'ImportedProfilingGroupWithExplicitlySetName', profilingGroup1.profilingGroupName);
const importedGroupWithImplicitlySetName = aws_codeguruprofiler_1.ProfilingGroup.fromProfilingGroupName(stack, 'ImportedProfilingGroupWithImplicitlySetName', profilingGroup2.profilingGroupName);
const importedGroupFromArn = aws_codeguruprofiler_1.ProfilingGroup.fromProfilingGroupArn(stack, 'ImportedProfilingGroupFromArn', 'arn:aws:codeguru-profiler:a-region-1:1234567890:profilingGroup/MyAwesomeProfilingGroup');
new aws_cdk_lib_1.CfnOutput(stack, 'ExplicitlySetProfilingGroupName', {
    value: importedGroupWithExplicitlySetName.profilingGroupName,
});
new aws_cdk_lib_1.CfnOutput(stack, 'ImplicitlySetProfilingGroupName', {
    value: importedGroupWithImplicitlySetName.profilingGroupName,
});
new aws_cdk_lib_1.CfnOutput(stack, 'ImportedFromArnProfilingGroupName', {
    value: importedGroupFromArn.profilingGroupName,
});
new aws_cdk_lib_1.CfnOutput(stack, 'ImportedFromArnProfilingGroupArn', {
    value: importedGroupFromArn.profilingGroupArn,
});
const testCase = new integ_tests_alpha_1.IntegTest(app, 'test', {
    testCases: [stack],
});
const describe = testCase.assertions.awsApiCall('CloudFormation', 'describeStacks', {
    StackName: 'ProfilingGroupTestStack',
});
describe.assertAtPath('Stacks.0.Outputs.0.OutputKey', integ_tests_alpha_1.ExpectedResult.stringLikeRegexp('ExplicitlySetProfilingGroupName'));
describe.assertAtPath('Stacks.0.Outputs.0.OutputValue', integ_tests_alpha_1.ExpectedResult.stringLikeRegexp('ExplicitlySetName'));
describe.assertAtPath('Stacks.0.Outputs.1.OutputKey', integ_tests_alpha_1.ExpectedResult.stringLikeRegexp('ImplicitlySetProfilingGroupName'));
describe.assertAtPath('Stacks.0.Outputs.1.OutputValue', integ_tests_alpha_1.ExpectedResult.stringLikeRegexp('ProfilingGroupTestStackProfilingGroupWithImplicitlySetName98463923'));
describe.assertAtPath('Stacks.0.Outputs.2.OutputKey', integ_tests_alpha_1.ExpectedResult.stringLikeRegexp('ImportedFromArnProfilingGroupName'));
describe.assertAtPath('Stacks.0.Outputs.2.OutputValue', integ_tests_alpha_1.ExpectedResult.stringLikeRegexp('MyAwesomeProfilingGroup'));
describe.assertAtPath('Stacks.0.Outputs.3.OutputKey', integ_tests_alpha_1.ExpectedResult.stringLikeRegexp('ImportedFromArnProfilingGroupArn'));
describe.assertAtPath('Stacks.0.Outputs.3.OutputValue', integ_tests_alpha_1.ExpectedResult.stringLikeRegexp('arn:aws:codeguru-profiler:a-region-1:1234567890:profilingGroup/MyAwesomeProfilingGroup'));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcucHJvZmlsZXItZ3JvdXAtaW1wb3J0LWZ1bmN0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLnByb2ZpbGVyLWdyb3VwLWltcG9ydC1mdW5jdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpREFBaUU7QUFDakUsNkNBQW9EO0FBQ3BELGtFQUF1RTtBQUN2RSwyRUFBa0U7QUFFbEUsTUFBTSxHQUFHLEdBQUcsSUFBSSxpQkFBRyxFQUFFLENBQUM7QUFFdEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxtQkFBSyxDQUFDLEdBQUcsRUFBRSx5QkFBeUIsQ0FBQyxDQUFDO0FBRXhELE1BQU0sZUFBZSxHQUFHLElBQUkscUNBQWMsQ0FBQyxLQUFLLEVBQUUscUNBQXFDLEVBQUU7SUFDdkYsa0JBQWtCLEVBQUUsbUJBQW1CO0NBQ3hDLENBQUMsQ0FBQztBQUNILE1BQU0sZUFBZSxHQUFHLElBQUkscUNBQWMsQ0FBQyxLQUFLLEVBQUUscUNBQXFDLENBQUMsQ0FBQztBQUV6RixNQUFNLGNBQWMsR0FBRyxJQUFJLGNBQUksQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLEVBQUU7SUFDdkQsU0FBUyxFQUFFLElBQUksOEJBQW9CLEVBQUU7Q0FDdEMsQ0FBQyxDQUFDO0FBQ0gsZUFBZSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUM3QyxlQUFlLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBRTdDLE1BQU0sa0NBQWtDLEdBQUcscUNBQWMsQ0FBQyxzQkFBc0IsQ0FDOUUsS0FBSyxFQUNMLDZDQUE2QyxFQUM3QyxlQUFlLENBQUMsa0JBQWtCLENBQ25DLENBQUM7QUFFRixNQUFNLGtDQUFrQyxHQUFHLHFDQUFjLENBQUMsc0JBQXNCLENBQzlFLEtBQUssRUFDTCw2Q0FBNkMsRUFDN0MsZUFBZSxDQUFDLGtCQUFrQixDQUNuQyxDQUFDO0FBRUYsTUFBTSxvQkFBb0IsR0FBRyxxQ0FBYyxDQUFDLHFCQUFxQixDQUMvRCxLQUFLLEVBQ0wsK0JBQStCLEVBQy9CLHdGQUF3RixDQUN6RixDQUFDO0FBRUYsSUFBSSx1QkFBUyxDQUFDLEtBQUssRUFBRSxpQ0FBaUMsRUFBRTtJQUN0RCxLQUFLLEVBQUUsa0NBQWtDLENBQUMsa0JBQWtCO0NBQzdELENBQUMsQ0FBQztBQUVILElBQUksdUJBQVMsQ0FBQyxLQUFLLEVBQUUsaUNBQWlDLEVBQUU7SUFDdEQsS0FBSyxFQUFFLGtDQUFrQyxDQUFDLGtCQUFrQjtDQUM3RCxDQUFDLENBQUM7QUFFSCxJQUFJLHVCQUFTLENBQUMsS0FBSyxFQUFFLG1DQUFtQyxFQUFFO0lBQ3hELEtBQUssRUFBRSxvQkFBb0IsQ0FBQyxrQkFBa0I7Q0FDL0MsQ0FBQyxDQUFDO0FBRUgsSUFBSSx1QkFBUyxDQUFDLEtBQUssRUFBRSxrQ0FBa0MsRUFBRTtJQUN2RCxLQUFLLEVBQUUsb0JBQW9CLENBQUMsaUJBQWlCO0NBQzlDLENBQUMsQ0FBQztBQUVILE1BQU0sUUFBUSxHQUFHLElBQUksNkJBQVMsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFO0lBQzFDLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQztDQUNuQixDQUFDLENBQUM7QUFFSCxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRSxnQkFBZ0IsRUFBRTtJQUNsRixTQUFTLEVBQUUseUJBQXlCO0NBQ3JDLENBQUMsQ0FBQztBQUVILFFBQVEsQ0FBQyxZQUFZLENBQUMsOEJBQThCLEVBQUUsa0NBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDLENBQUM7QUFDMUgsUUFBUSxDQUFDLFlBQVksQ0FBQyxnQ0FBZ0MsRUFBRSxrQ0FBYyxDQUFDLGdCQUFnQixDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQztBQUU5RyxRQUFRLENBQUMsWUFBWSxDQUFDLDhCQUE4QixFQUFFLGtDQUFjLENBQUMsZ0JBQWdCLENBQUMsaUNBQWlDLENBQUMsQ0FBQyxDQUFDO0FBQzFILFFBQVEsQ0FBQyxZQUFZLENBQUMsZ0NBQWdDLEVBQUUsa0NBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxvRUFBb0UsQ0FBQyxDQUFDLENBQUM7QUFFL0osUUFBUSxDQUFDLFlBQVksQ0FBQyw4QkFBOEIsRUFBRSxrQ0FBYyxDQUFDLGdCQUFnQixDQUFDLG1DQUFtQyxDQUFDLENBQUMsQ0FBQztBQUM1SCxRQUFRLENBQUMsWUFBWSxDQUFDLGdDQUFnQyxFQUFFLGtDQUFjLENBQUMsZ0JBQWdCLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDO0FBRXBILFFBQVEsQ0FBQyxZQUFZLENBQUMsOEJBQThCLEVBQUUsa0NBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDLENBQUM7QUFDM0gsUUFBUSxDQUFDLFlBQVksQ0FBQyxnQ0FBZ0MsRUFBRSxrQ0FBYyxDQUFDLGdCQUFnQixDQUFDLHdGQUF3RixDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjY291bnRSb290UHJpbmNpcGFsLCBSb2xlIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWlhbSc7XG5pbXBvcnQgeyBBcHAsIENmbk91dHB1dCwgU3RhY2sgfSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBFeHBlY3RlZFJlc3VsdCwgSW50ZWdUZXN0IH0gZnJvbSAnQGF3cy1jZGsvaW50ZWctdGVzdHMtYWxwaGEnO1xuaW1wb3J0IHsgUHJvZmlsaW5nR3JvdXAgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtY29kZWd1cnVwcm9maWxlcic7XG5cbmNvbnN0IGFwcCA9IG5ldyBBcHAoKTtcblxuY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soYXBwLCAnUHJvZmlsaW5nR3JvdXBUZXN0U3RhY2snKTtcblxuY29uc3QgcHJvZmlsaW5nR3JvdXAxID0gbmV3IFByb2ZpbGluZ0dyb3VwKHN0YWNrLCAnUHJvZmlsaW5nR3JvdXBXaXRoRXhwbGljaXRseVNldE5hbWUnLCB7XG4gIHByb2ZpbGluZ0dyb3VwTmFtZTogJ0V4cGxpY2l0bHlTZXROYW1lJyxcbn0pO1xuY29uc3QgcHJvZmlsaW5nR3JvdXAyID0gbmV3IFByb2ZpbGluZ0dyb3VwKHN0YWNrLCAnUHJvZmlsaW5nR3JvdXBXaXRoSW1wbGljaXRseVNldE5hbWUnKTtcblxuY29uc3QgcHVibGlzaEFwcFJvbGUgPSBuZXcgUm9sZShzdGFjaywgJ1B1Ymxpc2hBcHBSb2xlJywge1xuICBhc3N1bWVkQnk6IG5ldyBBY2NvdW50Um9vdFByaW5jaXBhbCgpLFxufSk7XG5wcm9maWxpbmdHcm91cDEuZ3JhbnRQdWJsaXNoKHB1Ymxpc2hBcHBSb2xlKTtcbnByb2ZpbGluZ0dyb3VwMi5ncmFudFB1Ymxpc2gocHVibGlzaEFwcFJvbGUpO1xuXG5jb25zdCBpbXBvcnRlZEdyb3VwV2l0aEV4cGxpY2l0bHlTZXROYW1lID0gUHJvZmlsaW5nR3JvdXAuZnJvbVByb2ZpbGluZ0dyb3VwTmFtZShcbiAgc3RhY2ssXG4gICdJbXBvcnRlZFByb2ZpbGluZ0dyb3VwV2l0aEV4cGxpY2l0bHlTZXROYW1lJyxcbiAgcHJvZmlsaW5nR3JvdXAxLnByb2ZpbGluZ0dyb3VwTmFtZSxcbik7XG5cbmNvbnN0IGltcG9ydGVkR3JvdXBXaXRoSW1wbGljaXRseVNldE5hbWUgPSBQcm9maWxpbmdHcm91cC5mcm9tUHJvZmlsaW5nR3JvdXBOYW1lKFxuICBzdGFjayxcbiAgJ0ltcG9ydGVkUHJvZmlsaW5nR3JvdXBXaXRoSW1wbGljaXRseVNldE5hbWUnLFxuICBwcm9maWxpbmdHcm91cDIucHJvZmlsaW5nR3JvdXBOYW1lLFxuKTtcblxuY29uc3QgaW1wb3J0ZWRHcm91cEZyb21Bcm4gPSBQcm9maWxpbmdHcm91cC5mcm9tUHJvZmlsaW5nR3JvdXBBcm4oXG4gIHN0YWNrLFxuICAnSW1wb3J0ZWRQcm9maWxpbmdHcm91cEZyb21Bcm4nLFxuICAnYXJuOmF3czpjb2RlZ3VydS1wcm9maWxlcjphLXJlZ2lvbi0xOjEyMzQ1Njc4OTA6cHJvZmlsaW5nR3JvdXAvTXlBd2Vzb21lUHJvZmlsaW5nR3JvdXAnLFxuKTtcblxubmV3IENmbk91dHB1dChzdGFjaywgJ0V4cGxpY2l0bHlTZXRQcm9maWxpbmdHcm91cE5hbWUnLCB7XG4gIHZhbHVlOiBpbXBvcnRlZEdyb3VwV2l0aEV4cGxpY2l0bHlTZXROYW1lLnByb2ZpbGluZ0dyb3VwTmFtZSxcbn0pO1xuXG5uZXcgQ2ZuT3V0cHV0KHN0YWNrLCAnSW1wbGljaXRseVNldFByb2ZpbGluZ0dyb3VwTmFtZScsIHtcbiAgdmFsdWU6IGltcG9ydGVkR3JvdXBXaXRoSW1wbGljaXRseVNldE5hbWUucHJvZmlsaW5nR3JvdXBOYW1lLFxufSk7XG5cbm5ldyBDZm5PdXRwdXQoc3RhY2ssICdJbXBvcnRlZEZyb21Bcm5Qcm9maWxpbmdHcm91cE5hbWUnLCB7XG4gIHZhbHVlOiBpbXBvcnRlZEdyb3VwRnJvbUFybi5wcm9maWxpbmdHcm91cE5hbWUsXG59KTtcblxubmV3IENmbk91dHB1dChzdGFjaywgJ0ltcG9ydGVkRnJvbUFyblByb2ZpbGluZ0dyb3VwQXJuJywge1xuICB2YWx1ZTogaW1wb3J0ZWRHcm91cEZyb21Bcm4ucHJvZmlsaW5nR3JvdXBBcm4sXG59KTtcblxuY29uc3QgdGVzdENhc2UgPSBuZXcgSW50ZWdUZXN0KGFwcCwgJ3Rlc3QnLCB7XG4gIHRlc3RDYXNlczogW3N0YWNrXSxcbn0pO1xuXG5jb25zdCBkZXNjcmliZSA9IHRlc3RDYXNlLmFzc2VydGlvbnMuYXdzQXBpQ2FsbCgnQ2xvdWRGb3JtYXRpb24nLCAnZGVzY3JpYmVTdGFja3MnLCB7XG4gIFN0YWNrTmFtZTogJ1Byb2ZpbGluZ0dyb3VwVGVzdFN0YWNrJyxcbn0pO1xuXG5kZXNjcmliZS5hc3NlcnRBdFBhdGgoJ1N0YWNrcy4wLk91dHB1dHMuMC5PdXRwdXRLZXknLCBFeHBlY3RlZFJlc3VsdC5zdHJpbmdMaWtlUmVnZXhwKCdFeHBsaWNpdGx5U2V0UHJvZmlsaW5nR3JvdXBOYW1lJykpO1xuZGVzY3JpYmUuYXNzZXJ0QXRQYXRoKCdTdGFja3MuMC5PdXRwdXRzLjAuT3V0cHV0VmFsdWUnLCBFeHBlY3RlZFJlc3VsdC5zdHJpbmdMaWtlUmVnZXhwKCdFeHBsaWNpdGx5U2V0TmFtZScpKTtcblxuZGVzY3JpYmUuYXNzZXJ0QXRQYXRoKCdTdGFja3MuMC5PdXRwdXRzLjEuT3V0cHV0S2V5JywgRXhwZWN0ZWRSZXN1bHQuc3RyaW5nTGlrZVJlZ2V4cCgnSW1wbGljaXRseVNldFByb2ZpbGluZ0dyb3VwTmFtZScpKTtcbmRlc2NyaWJlLmFzc2VydEF0UGF0aCgnU3RhY2tzLjAuT3V0cHV0cy4xLk91dHB1dFZhbHVlJywgRXhwZWN0ZWRSZXN1bHQuc3RyaW5nTGlrZVJlZ2V4cCgnUHJvZmlsaW5nR3JvdXBUZXN0U3RhY2tQcm9maWxpbmdHcm91cFdpdGhJbXBsaWNpdGx5U2V0TmFtZTk4NDYzOTIzJykpO1xuXG5kZXNjcmliZS5hc3NlcnRBdFBhdGgoJ1N0YWNrcy4wLk91dHB1dHMuMi5PdXRwdXRLZXknLCBFeHBlY3RlZFJlc3VsdC5zdHJpbmdMaWtlUmVnZXhwKCdJbXBvcnRlZEZyb21Bcm5Qcm9maWxpbmdHcm91cE5hbWUnKSk7XG5kZXNjcmliZS5hc3NlcnRBdFBhdGgoJ1N0YWNrcy4wLk91dHB1dHMuMi5PdXRwdXRWYWx1ZScsIEV4cGVjdGVkUmVzdWx0LnN0cmluZ0xpa2VSZWdleHAoJ015QXdlc29tZVByb2ZpbGluZ0dyb3VwJykpO1xuXG5kZXNjcmliZS5hc3NlcnRBdFBhdGgoJ1N0YWNrcy4wLk91dHB1dHMuMy5PdXRwdXRLZXknLCBFeHBlY3RlZFJlc3VsdC5zdHJpbmdMaWtlUmVnZXhwKCdJbXBvcnRlZEZyb21Bcm5Qcm9maWxpbmdHcm91cEFybicpKTtcbmRlc2NyaWJlLmFzc2VydEF0UGF0aCgnU3RhY2tzLjAuT3V0cHV0cy4zLk91dHB1dFZhbHVlJywgRXhwZWN0ZWRSZXN1bHQuc3RyaW5nTGlrZVJlZ2V4cCgnYXJuOmF3czpjb2RlZ3VydS1wcm9maWxlcjphLXJlZ2lvbi0xOjEyMzQ1Njc4OTA6cHJvZmlsaW5nR3JvdXAvTXlBd2Vzb21lUHJvZmlsaW5nR3JvdXAnKSk7Il19