"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iam = require("aws-cdk-lib/aws-iam");
const sns = require("aws-cdk-lib/aws-sns");
const cdk = require("aws-cdk-lib");
const servicecatalog = require("aws-cdk-lib/aws-servicecatalog");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'integ-servicecatalog-portfolio');
const role = new iam.Role(stack, 'TestRole', {
    assumedBy: new iam.AccountRootPrincipal(),
});
const group = new iam.Group(stack, 'TestGroup');
const portfolio = new servicecatalog.Portfolio(stack, 'TestPortfolio', {
    displayName: 'TestPortfolio',
    providerName: 'TestProvider',
    description: 'This is our Service Catalog Portfolio',
    messageLanguage: servicecatalog.MessageLanguage.EN,
});
portfolio.giveAccessToRole(role);
portfolio.giveAccessToGroup(group);
const tagOptions = new servicecatalog.TagOptions(stack, 'TagOptions', {
    allowedValuesForTags: {
        key1: ['value1', 'value2'],
        key2: ['value1'],
    },
});
portfolio.associateTagOptions(tagOptions);
portfolio.shareWithAccount('123456789012');
const product = new servicecatalog.CloudFormationProduct(stack, 'TestProduct', {
    productName: 'testProduct',
    owner: 'testOwner',
    productVersions: [
        {
            validateTemplate: false,
            cloudFormationTemplate: servicecatalog.CloudFormationTemplate.fromUrl('https://awsdocs.s3.amazonaws.com/servicecatalog/development-environment.template'),
        },
    ],
    tagOptions: tagOptions,
});
portfolio.addProduct(product);
portfolio.constrainTagUpdates(product);
const topic = new sns.Topic(stack, 'Topic1');
const specialTopic = new sns.Topic(stack, 'specialTopic');
portfolio.notifyOnStackEvents(product, topic);
portfolio.notifyOnStackEvents(product, specialTopic, {
    description: 'special topic description',
    messageLanguage: servicecatalog.MessageLanguage.EN,
});
const launchRole = new iam.Role(stack, 'LaunchRole', {
    assumedBy: new iam.ServicePrincipal('servicecatalog.amazonaws.com'),
});
portfolio.setLaunchRole(product, launchRole);
const secondPortfolio = new servicecatalog.Portfolio(stack, 'SecondTestPortfolio', {
    displayName: 'SecondTestPortfolio',
    providerName: 'TestProvider',
});
const adminRole = new iam.Role(stack, 'AdminRole', {
    assumedBy: new iam.AccountRootPrincipal(),
});
secondPortfolio.deployWithStackSets(product, {
    accounts: ['000000000000', '111111111111', '222222222222'],
    regions: ['us-east-1', 'us-west-2', 'eu-west-1'],
    adminRole: adminRole,
    executionRoleName: 'StackSetExecutionRole',
    allowStackSetInstanceOperations: true,
});
portfolio.constrainCloudFormationParameters(product, {
    rule: {
        ruleName: 'SubnetsinVPC',
        assertions: [{
                assert: cdk.Fn.conditionEachMemberIn(cdk.Fn.valueOfAll('AWs::EC2::Subnet::Id', 'VpcId'), cdk.Fn.refAll('AWS::EC2::VPC::Id')),
                description: 'test description',
            }],
    },
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcucG9ydGZvbGlvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW50ZWcucG9ydGZvbGlvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkNBQTJDO0FBQzNDLDJDQUEyQztBQUMzQyxtQ0FBbUM7QUFDbkMsaUVBQWlFO0FBRWpFLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQzFCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0NBQWdDLENBQUMsQ0FBQztBQUVuRSxNQUFNLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRTtJQUMzQyxTQUFTLEVBQUUsSUFBSSxHQUFHLENBQUMsb0JBQW9CLEVBQUU7Q0FDMUMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxXQUFXLENBQUMsQ0FBQztBQUVoRCxNQUFNLFNBQVMsR0FBRyxJQUFJLGNBQWMsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLGVBQWUsRUFBRTtJQUNyRSxXQUFXLEVBQUUsZUFBZTtJQUM1QixZQUFZLEVBQUUsY0FBYztJQUM1QixXQUFXLEVBQUUsdUNBQXVDO0lBQ3BELGVBQWUsRUFBRSxjQUFjLENBQUMsZUFBZSxDQUFDLEVBQUU7Q0FDbkQsQ0FBQyxDQUFDO0FBRUgsU0FBUyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUVuQyxNQUFNLFVBQVUsR0FBRyxJQUFJLGNBQWMsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRTtJQUNwRSxvQkFBb0IsRUFBRTtRQUNwQixJQUFJLEVBQUUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDO1FBQzFCLElBQUksRUFBRSxD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IjpbImltcG9ydCAqIGFzIGlhbSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtaWFtJztcbmltcG9ydCAqIGFzIHNucyBmcm9tICdhd3MtY2RrLWxpYi9hd3Mtc25zJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgKiBhcyBzZXJ2aWNlY2F0YWxvZyBmcm9tICdhd3MtY2RrLWxpYi9hd3Mtc2VydmljZWNhdGFsb2cnO1xuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ2ludGVnLXNlcnZpY2VjYXRhbG9nLXBvcnRmb2xpbycpO1xuXG5jb25zdCByb2xlID0gbmV3IGlhbS5Sb2xlKHN0YWNrLCAnVGVzdFJvbGUnLCB7XG4gIGFzc3VtZWRCeTogbmV3IGlhbS5BY2NvdW50Um9vdFByaW5jaXBhbCgpLFxufSk7XG5cbmNvbnN0IGdyb3VwID0gbmV3IGlhbS5Hcm91cChzdGFjaywgJ1Rlc3RHcm91cCcpO1xuXG5jb25zdCBwb3J0Zm9saW8gPSBuZXcgc2VydmljZWNhdGFsb2cuUG9ydGZvbGlvKHN0YWNrLCAnVGVzdFBvcnRmb2xpbycsIHtcbiAgZGlzcGxheU5hbWU6ICdUZXN0UG9ydGZvbGlvJyxcbiAgcHJvdmlkZXJOYW1lOiAnVGVzdFByb3ZpZGVyJyxcbiAgZGVzY3JpcHRpb246ICdUaGlzIGlzIG91ciBTZXJ2aWNlIENhdGFsb2cgUG9ydGZvbGlvJyxcbiAgbWVzc2FnZUxhbmd1YWdlOiBzZXJ2aWNlY2F0YWxvZy5NZXNzYWdlTGFuZ3VhZ2UuRU4sXG59KTtcblxucG9ydGZvbGlvLmdpdmVBY2Nlc3NUb1JvbGUocm9sZSk7XG5wb3J0Zm9saW8uZ2l2ZUFjY2Vzc1RvR3JvdXAoZ3JvdXApO1xuXG5jb25zdCB0YWdPcHRpb25zID0gbmV3IHNlcnZpY2VjYXRhbG9nLlRhZ09wdGlvbnMoc3RhY2ssICdUYWdPcHRpb25zJywge1xuICBhbGxvd2VkVmFsdWVzRm9yVGFnczoge1xuICAgIGtleTE6IFsndmFsdWUxJywgJ3ZhbHVlMiddLFxuICAgIGtleTI6IFsndmFsdWUxJ10sXG4gIH0sXG59KTtcbnBvcnRmb2xpby5hc3NvY2lhdGVUYWdPcHRpb25zKHRhZ09wdGlvbnMpO1xuXG5wb3J0Zm9saW8uc2hhcmVXaXRoQWNjb3VudCgnMTIzNDU2Nzg5MDEyJyk7XG5cbmNvbnN0IHByb2R1Y3QgPSBuZXcgc2VydmljZWNhdGFsb2cuQ2xvdWRGb3JtYXRpb25Qcm9kdWN0KHN0YWNrLCAnVGVzdFByb2R1Y3QnLCB7XG4gIHByb2R1Y3ROYW1lOiAndGVzdFByb2R1Y3QnLFxuICBvd25lcjogJ3Rlc3RPd25lcicsXG4gIHByb2R1Y3RWZXJzaW9uczogW1xuICAgIHtcbiAgICAgIHZhbGlkYXRlVGVtcGxhdGU6IGZhbHNlLFxuICAgICAgY2xvdWRGb3JtYXRpb25UZW1wbGF0ZTogc2VydmljZWNhdGFsb2cuQ2xvdWRGb3JtYXRpb25UZW1wbGF0ZS5mcm9tVXJsKFxuICAgICAgICAnaHR0cHM6Ly9hd3Nkb2NzLnMzLmFtYXpvbmF3cy5jb20vc2VydmljZWNhdGFsb2cvZGV2ZWxvcG1lbnQtZW52aXJvbm1lbnQudGVtcGxhdGUnKSxcbiAgICB9LFxuICBdLFxuICB0YWdPcHRpb25zOiB0YWdPcHRpb25zLFxufSk7XG5cbnBvcnRmb2xpby5hZGRQcm9kdWN0KHByb2R1Y3QpO1xuXG5wb3J0Zm9saW8uY29uc3RyYWluVGFnVXBkYXRlcyhwcm9kdWN0KTtcblxuY29uc3QgdG9waWMgPSBuZXcgc25zLlRvcGljKHN0YWNrLCAnVG9waWMxJyk7XG5cbmNvbnN0IHNwZWNpYWxUb3BpYyA9IG5ldyBzbnMuVG9waWMoc3RhY2ssICdzcGVjaWFsVG9waWMnKTtcblxucG9ydGZvbGlvLm5vdGlmeU9uU3RhY2tFdmVudHMocHJvZHVjdCwgdG9waWMpO1xucG9ydGZvbGlvLm5vdGlmeU9uU3RhY2tFdmVudHMocHJvZHVjdCwgc3BlY2lhbFRvcGljLCB7XG4gIGRlc2NyaXB0aW9uOiAnc3BlY2lhbCB0b3BpYyBkZXNjcmlwdGlvbicsXG4gIG1lc3NhZ2VMYW5ndWFnZTogc2VydmljZWNhdGFsb2cuTWVzc2FnZUxhbmd1YWdlLkVOLFxufSk7XG5cbmNvbnN0IGxhdW5jaFJvbGUgPSBuZXcgaWFtLlJvbGUoc3RhY2ssICdMYXVuY2hSb2xlJywge1xuICBhc3N1bWVkQnk6IG5ldyBpYW0uU2VydmljZVByaW5jaXBhbCgnc2VydmljZWNhdGFsb2cuYW1hem9uYXdzLmNvbScpLFxufSk7XG5cbnBvcnRmb2xpby5zZXRMYXVuY2hSb2xlKHByb2R1Y3QsIGxhdW5jaFJvbGUpO1xuXG5jb25zdCBzZWNvbmRQb3J0Zm9saW8gPSBuZXcgc2VydmljZWNhdGFsb2cuUG9ydGZvbGlvKHN0YWNrLCAnU2Vjb25kVGVzdFBvcnRmb2xpbycsIHtcbiAgZGlzcGxheU5hbWU6ICdTZWNvbmRUZXN0UG9ydGZvbGlvJyxcbiAgcHJvdmlkZXJOYW1lOiAnVGVzdFByb3ZpZGVyJyxcbn0pO1xuXG5jb25zdCBhZG1pblJvbGUgPSBuZXcgaWFtLlJvbGUoc3RhY2ssICdBZG1pblJvbGUnLCB7XG4gIGFzc3VtZWRCeTogbmV3IGlhbS5BY2NvdW50Um9vdFByaW5jaXBhbCgpLFxufSk7XG5cbnNlY29uZFBvcnRmb2xpby5kZXBsb3lXaXRoU3RhY2tTZXRzKHByb2R1Y3QsIHtcbiAgYWNjb3VudHM6IFsnMDAwMDAwMDAwMDAwJywgJzExMTExMTExMTExMScsICcyMjIyMjIyMjIyMjInXSxcbiAgcmVnaW9uczogWyd1cy1lYXN0LTEnLCAndXMtd2VzdC0yJywgJ2V1LXdlc3QtMSddLFxuICBhZG1pblJvbGU6IGFkbWluUm9sZSxcbiAgZXhlY3V0aW9uUm9sZU5hbWU6ICdTdGFja1NldEV4ZWN1dGlvblJvbGUnLFxuICBhbGxvd1N0YWNrU2V0SW5zdGFuY2VPcGVyYXRpb25zOiB0cnVlLFxufSk7XG5cbnBvcnRmb2xpby5jb25zdHJhaW5DbG91ZEZvcm1hdGlvblBhcmFtZXRlcnMocHJvZHVjdCwge1xuICBydWxlOiB7XG4gICAgcnVsZU5hbWU6ICdTdWJuZXRzaW5WUEMnLFxuICAgIGFzc2VydGlvbnM6IFt7XG4gICAgICBhc3NlcnQ6IGNkay5Gbi5jb25kaXRpb25FYWNoTWVtYmVySW4oXG4gICAgICAgIGNkay5Gbi52YWx1ZU9mQWxsKCdBV3M6OkVDMjo6U3VibmV0OjpJZCcsICdWcGNJZCcpLFxuICAgICAgICBjZGsuRm4ucmVmQWxsKCdBV1M6OkVDMjo6VlBDOjpJZCcpKSxcbiAgICAgIGRlc2NyaXB0aW9uOiAndGVzdCBkZXNjcmlwdGlvbicsXG4gICAgfV0sXG4gIH0sXG59KTtcblxuYXBwLnN5bnRoKCk7XG4iXX0=