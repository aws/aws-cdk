"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_kms_1 = require("aws-cdk-lib/aws-kms");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const integ = require("@aws-cdk/integ-tests-alpha");
const aws_sqs_1 = require("aws-cdk-lib/aws-sqs");
const app = new aws_cdk_lib_1.App();
const stack = new aws_cdk_lib_1.Stack(app, 'aws-cdk-sqs');
const dlq = new aws_sqs_1.Queue(stack, 'DeadLetterQueue');
const queue = new aws_sqs_1.Queue(stack, 'Queue', {
    deadLetterQueue: { queue: dlq, maxReceiveCount: 5 },
    encryption: aws_sqs_1.QueueEncryption.KMS_MANAGED,
});
const fifo = new aws_sqs_1.Queue(stack, 'FifoQueue', {
    fifo: true,
    encryptionMasterKey: new aws_kms_1.Key(stack, 'EncryptionKey', { removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY }),
});
const highThroughputFifo = new aws_sqs_1.Queue(stack, 'HighThroughputFifoQueue', {
    fifo: true,
    fifoThroughputLimit: aws_sqs_1.FifoThroughputLimit.PER_MESSAGE_GROUP_ID,
    deduplicationScope: aws_sqs_1.DeduplicationScope.MESSAGE_GROUP,
});
const sqsManagedEncryptedQueue = new aws_sqs_1.Queue(stack, 'SqsManagedEncryptedQueue', {
    encryption: aws_sqs_1.QueueEncryption.SQS_MANAGED,
});
const unencryptedQueue = new aws_sqs_1.Queue(stack, 'UnencryptedQueue', {
    encryption: aws_sqs_1.QueueEncryption.UNENCRYPTED,
});
const ssl = new aws_sqs_1.Queue(stack, 'SSLQueue', { enforceSSL: true });
const role = new aws_iam_1.Role(stack, 'Role', {
    assumedBy: new aws_iam_1.AccountRootPrincipal(),
});
dlq.grantConsumeMessages(role);
queue.grantConsumeMessages(role);
fifo.grantConsumeMessages(role);
highThroughputFifo.grantConsumeMessages(role);
sqsManagedEncryptedQueue.grantConsumeMessages(role);
unencryptedQueue.grantConsumeMessages(role);
ssl.grantConsumeMessages(role);
new aws_cdk_lib_1.CfnOutput(stack, 'QueueUrl', { value: queue.queueUrl });
new integ.IntegTest(app, 'SqsTest', {
    testCases: [stack],
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuc3FzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW50ZWcuc3FzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaURBQWlFO0FBQ2pFLGlEQUEwQztBQUMxQyw2Q0FBbUU7QUFDbkUsb0RBQW9EO0FBQ3BELGlEQUFzRztBQUV0RyxNQUFNLEdBQUcsR0FBRyxJQUFJLGlCQUFHLEVBQUUsQ0FBQztBQUV0QixNQUFNLEtBQUssR0FBRyxJQUFJLG1CQUFLLENBQUMsR0FBRyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBRTVDLE1BQU0sR0FBRyxHQUFHLElBQUksZUFBSyxDQUFDLEtBQUssRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0FBQ2hELE1BQU0sS0FBSyxHQUFHLElBQUksZUFBSyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUU7SUFDdEMsZUFBZSxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxlQUFlLEVBQUUsQ0FBQyxFQUFFO0lBQ25ELFVBQVUsRUFBRSx5QkFBZSxDQUFDLFdBQVc7Q0FDeEMsQ0FBQyxDQUFDO0FBQ0gsTUFBTSxJQUFJLEdBQUcsSUFBSSxlQUFLLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRTtJQUN6QyxJQUFJLEVBQUUsSUFBSTtJQUNWLG1CQUFtQixFQUFFLElBQUksYUFBRyxDQUFDLEtBQUssRUFBRSxlQUFlLEVBQUUsRUFBRSxhQUFhLEVBQUUsMkJBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztDQUMvRixDQUFDLENBQUM7QUFDSCxNQUFNLGtCQUFrQixHQUFHLElBQUksZUFBSyxDQUFDLEtBQUssRUFBRSx5QkFBeUIsRUFBRTtJQUNyRSxJQUFJLEVBQUUsSUFBSTtJQUNWLG1CQUFtQixFQUFFLDZCQUFtQixDQUFDLG9CQUFvQjtJQUM3RCxrQkFBa0IsRUFBRSw0QkFBa0IsQ0FBQyxhQUFhO0NBQ3JELENBQUMsQ0FBQztBQUNILE1BQU0sd0JBQXdCLEdBQUcsSUFBSSxlQUFLLENBQUMsS0FBSyxFQUFFLDBCQUEwQixFQUFFO0lBQzVFLFVBQVUsRUFBRSx5QkFBZSxDQUFDLFdBQVc7Q0FDeEMsQ0FBQyxDQUFDO0FBQ0gsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLGVBQUssQ0FBQyxLQUFLLEVBQUUsa0JBQWtCLEVBQUU7SUFDNUQsVUFBVSxFQUFFLHlCQUFlLENBQUMsV0FBVztDQUN4QyxDQUFDLENBQUM7QUFDSCxNQUFNLEdBQUcsR0FBRyxJQUFJLGVBQUssQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFFL0QsTUFBTSxJQUFJLEdBQUcsSUFBSSxjQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRTtJQUNuQyxTQUFTLEVBQUUsSUFBSSw4QkFBb0IsRUFBRTtDQUN0QyxDQUFDLENBQUM7QUFFSCxHQUFHLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0IsS0FBSyxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNoQyxrQkFBa0IsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM5Qyx3QkFBd0IsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNwRCxnQkFBZ0IsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM1QyxHQUFHLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUM7QUFFL0IsSUFBSSx1QkFBUyxDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFFNUQsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUU7SUFDbEMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDO0NBQ25CLENBQUMsQ0FBQztBQUVILEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjY291bnRSb290UHJpbmNpcGFsLCBSb2xlIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWlhbSc7XG5pbXBvcnQgeyBLZXkgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3Mta21zJztcbmltcG9ydCB7IEFwcCwgQ2ZuT3V0cHV0LCBSZW1vdmFsUG9saWN5LCBTdGFjayB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCAqIGFzIGludGVnIGZyb20gJ0Bhd3MtY2RrL2ludGVnLXRlc3RzLWFscGhhJztcbmltcG9ydCB7IERlZHVwbGljYXRpb25TY29wZSwgRmlmb1Rocm91Z2hwdXRMaW1pdCwgUXVldWUsIFF1ZXVlRW5jcnlwdGlvbiB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1zcXMnO1xuXG5jb25zdCBhcHAgPSBuZXcgQXBwKCk7XG5cbmNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKGFwcCwgJ2F3cy1jZGstc3FzJyk7XG5cbmNvbnN0IGRscSA9IG5ldyBRdWV1ZShzdGFjaywgJ0RlYWRMZXR0ZXJRdWV1ZScpO1xuY29uc3QgcXVldWUgPSBuZXcgUXVldWUoc3RhY2ssICdRdWV1ZScsIHtcbiAgZGVhZExldHRlclF1ZXVlOiB7IHF1ZXVlOiBkbHEsIG1heFJlY2VpdmVDb3VudDogNSB9LFxuICBlbmNyeXB0aW9uOiBRdWV1ZUVuY3J5cHRpb24uS01TX01BTkFHRUQsXG59KTtcbmNvbnN0IGZpZm8gPSBuZXcgUXVldWUoc3RhY2ssICdGaWZvUXVldWUnLCB7XG4gIGZpZm86IHRydWUsXG4gIGVuY3J5cHRpb25NYXN0ZXJLZXk6IG5ldyBLZXkoc3RhY2ssICdFbmNyeXB0aW9uS2V5JywgeyByZW1vdmFsUG9saWN5OiBSZW1vdmFsUG9saWN5LkRFU1RST1kgfSksXG59KTtcbmNvbnN0IGhpZ2hUaHJvdWdocHV0RmlmbyA9IG5ldyBRdWV1ZShzdGFjaywgJ0hpZ2hUaHJvdWdocHV0Rmlmb1F1ZXVlJywge1xuICBmaWZvOiB0cnVlLFxuICBmaWZvVGhyb3VnaHB1dExpbWl0OiBGaWZvVGhyb3VnaHB1dExpbWl0LlBFUl9NRVNTQUdFX0dST1VQX0lELFxuICBkZWR1cGxpY2F0aW9uU2NvcGU6IERlZHVwbGljYXRpb25TY29wZS5NRVNTQUdFX0dST1VQLFxufSk7XG5jb25zdCBzcXNNYW5hZ2VkRW5jcnlwdGVkUXVldWUgPSBuZXcgUXVldWUoc3RhY2ssICdTcXNNYW5hZ2VkRW5jcnlwdGVkUXVldWUnLCB7XG4gIGVuY3J5cHRpb246IFF1ZXVlRW5jcnlwdGlvbi5TUVNfTUFOQUdFRCxcbn0pO1xuY29uc3QgdW5lbmNyeXB0ZWRRdWV1ZSA9IG5ldyBRdWV1ZShzdGFjaywgJ1VuZW5jcnlwdGVkUXVldWUnLCB7XG4gIGVuY3J5cHRpb246IFF1ZXVlRW5jcnlwdGlvbi5VTkVOQ1JZUFRFRCxcbn0pO1xuY29uc3Qgc3NsID0gbmV3IFF1ZXVlKHN0YWNrLCAnU1NMUXVldWUnLCB7IGVuZm9yY2VTU0w6IHRydWUgfSk7XG5cbmNvbnN0IHJvbGUgPSBuZXcgUm9sZShzdGFjaywgJ1JvbGUnLCB7XG4gIGFzc3VtZWRCeTogbmV3IEFjY291bnRSb290UHJpbmNpcGFsKCksXG59KTtcblxuZGxxLmdyYW50Q29uc3VtZU1lc3NhZ2VzKHJvbGUpO1xucXVldWUuZ3JhbnRDb25zdW1lTWVzc2FnZXMocm9sZSk7XG5maWZvLmdyYW50Q29uc3VtZU1lc3NhZ2VzKHJvbGUpO1xuaGlnaFRocm91Z2hwdXRGaWZvLmdyYW50Q29uc3VtZU1lc3NhZ2VzKHJvbGUpO1xuc3FzTWFuYWdlZEVuY3J5cHRlZFF1ZXVlLmdyYW50Q29uc3VtZU1lc3NhZ2VzKHJvbGUpO1xudW5lbmNyeXB0ZWRRdWV1ZS5ncmFudENvbnN1bWVNZXNzYWdlcyhyb2xlKTtcbnNzbC5ncmFudENvbnN1bWVNZXNzYWdlcyhyb2xlKTtcblxubmV3IENmbk91dHB1dChzdGFjaywgJ1F1ZXVlVXJsJywgeyB2YWx1ZTogcXVldWUucXVldWVVcmwgfSk7XG5cbm5ldyBpbnRlZy5JbnRlZ1Rlc3QoYXBwLCAnU3FzVGVzdCcsIHtcbiAgdGVzdENhc2VzOiBbc3RhY2tdLFxufSk7XG5cbmFwcC5zeW50aCgpO1xuIl19