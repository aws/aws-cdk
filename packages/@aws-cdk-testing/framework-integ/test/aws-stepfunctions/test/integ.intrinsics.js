"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("aws-cdk-lib");
const integ_tests_alpha_1 = require("@aws-cdk/integ-tests-alpha");
const aws_stepfunctions_1 = require("aws-cdk-lib/aws-stepfunctions");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-stepfunctions-intrinsics-integ');
const pass = new aws_stepfunctions_1.Pass(stack, 'pass', {
    parameters: {
        array1: aws_stepfunctions_1.JsonPath.array('asdf', aws_stepfunctions_1.JsonPath.stringAt('$.Id')),
        arrayPartition1: aws_stepfunctions_1.JsonPath.arrayPartition(aws_stepfunctions_1.JsonPath.listAt('$.inputArray'), 4),
        arrayPartition2: aws_stepfunctions_1.JsonPath.arrayPartition(aws_stepfunctions_1.JsonPath.listAt('$.inputArray'), aws_stepfunctions_1.JsonPath.numberAt('$.chunkSize')),
        arrayContains1: aws_stepfunctions_1.JsonPath.arrayContains(aws_stepfunctions_1.JsonPath.listAt('$.inputArray'), 5),
        arrayContains2: aws_stepfunctions_1.JsonPath.arrayContains(aws_stepfunctions_1.JsonPath.listAt('$.inputArray'), 'a'),
        arrayContains3: aws_stepfunctions_1.JsonPath.arrayContains(aws_stepfunctions_1.JsonPath.listAt('$.inputArray'), aws_stepfunctions_1.JsonPath.numberAt('$.lookingFor')),
        arrayRange1: aws_stepfunctions_1.JsonPath.arrayRange(1, 9, 2),
        arrayRange2: aws_stepfunctions_1.JsonPath.arrayRange(aws_stepfunctions_1.JsonPath.numberAt('$.start'), aws_stepfunctions_1.JsonPath.numberAt('$.end'), aws_stepfunctions_1.JsonPath.numberAt('$.step')),
        arrayGetItem1: aws_stepfunctions_1.JsonPath.arrayGetItem(aws_stepfunctions_1.JsonPath.listAt('$.inputArray'), 5),
        arrayGetItem2: aws_stepfunctions_1.JsonPath.arrayGetItem(aws_stepfunctions_1.JsonPath.numberAt('$.inputArray'), aws_stepfunctions_1.JsonPath.numberAt('$.index')),
        arrayLength1: aws_stepfunctions_1.JsonPath.arrayLength(aws_stepfunctions_1.JsonPath.listAt('$.inputArray')),
        arrayUnique1: aws_stepfunctions_1.JsonPath.arrayUnique(aws_stepfunctions_1.JsonPath.listAt('$.inputArray')),
        base64Encode1: aws_stepfunctions_1.JsonPath.base64Encode('Data to encode'),
        base64Encode2: aws_stepfunctions_1.JsonPath.base64Encode(aws_stepfunctions_1.JsonPath.stringAt('$.input')),
        base64Decode1: aws_stepfunctions_1.JsonPath.base64Decode('RGF0YSB0byBlbmNvZGU='),
        base64Decode2: aws_stepfunctions_1.JsonPath.base64Decode(aws_stepfunctions_1.JsonPath.stringAt('$.base64')),
        hash1: aws_stepfunctions_1.JsonPath.hash('Input data', 'SHA-1'),
        hash2: aws_stepfunctions_1.JsonPath.hash(aws_stepfunctions_1.JsonPath.objectAt('$.Data'), aws_stepfunctions_1.JsonPath.stringAt('$.Algorithm')),
        jsonMerge1: aws_stepfunctions_1.JsonPath.jsonMerge(aws_stepfunctions_1.JsonPath.objectAt('$.Obj1'), aws_stepfunctions_1.JsonPath.objectAt('$.Obj2')),
        mathRandom1: aws_stepfunctions_1.JsonPath.mathRandom(1, 999),
        mathRandom2: aws_stepfunctions_1.JsonPath.mathRandom(aws_stepfunctions_1.JsonPath.numberAt('$.start'), aws_stepfunctions_1.JsonPath.numberAt('$.end')),
        mathAdd1: aws_stepfunctions_1.JsonPath.mathAdd(1, 999),
        mathAdd2: aws_stepfunctions_1.JsonPath.mathAdd(aws_stepfunctions_1.JsonPath.numberAt('$.value1'), aws_stepfunctions_1.JsonPath.numberAt('$.step')),
        stringSplit1: aws_stepfunctions_1.JsonPath.stringSplit('1,2,3,4,5', ','),
        stringSplit2: aws_stepfunctions_1.JsonPath.stringSplit(aws_stepfunctions_1.JsonPath.stringAt('$.inputString'), aws_stepfunctions_1.JsonPath.stringAt('$.splitter')),
        uuid: aws_stepfunctions_1.JsonPath.uuid(),
        format1: aws_stepfunctions_1.JsonPath.format('Hi my name is {}.', aws_stepfunctions_1.JsonPath.stringAt('$.Name')),
        format2: aws_stepfunctions_1.JsonPath.format(aws_stepfunctions_1.JsonPath.stringAt('$.Format'), aws_stepfunctions_1.JsonPath.stringAt('$.Name')),
        stringToJson1: aws_stepfunctions_1.JsonPath.stringToJson(aws_stepfunctions_1.JsonPath.stringAt('$.Str')),
        jsonToString1: aws_stepfunctions_1.JsonPath.jsonToString(aws_stepfunctions_1.JsonPath.objectAt('$.Obj')),
    },
});
const stateMachine = new aws_stepfunctions_1.StateMachine(stack, 'StateMachine', {
    definition: pass,
});
const integ = new integ_tests_alpha_1.IntegTest(app, 'StateMachineIntrinsicsTest', {
    testCases: [stack],
});
integ.assertions.awsApiCall('StepFunctions', 'describeStateMachine', {
    stateMachineArn: stateMachine.stateMachineArn,
}).expect(integ_tests_alpha_1.ExpectedResult.objectLike({
    status: 'ACTIVE',
}));
app.synth();
//# sourceMappingURL=data:application/json;base64,