"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iam = require("aws-cdk-lib/aws-iam");
const cdk = require("aws-cdk-lib");
const integ_tests_alpha_1 = require("@aws-cdk/integ-tests-alpha");
const fake_task_1 = require("./fake-task");
const sfn = require("aws-cdk-lib/aws-stepfunctions");
/*
 * Stack verification steps:
 *
 * -- aws stepfunctions describe-state-machine --state-machine-arn <stack-output> has a status of `ACTIVE`
 */
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-stepfunctions-state-machine-credentials-integ');
const role = new iam.Role(stack, 'Role', {
    assumedBy: new iam.AccountPrincipal(stack.account),
});
new sfn.StateMachine(stack, 'StateMachineWithLiteralCredentials', {
    definition: new fake_task_1.FakeTask(stack, 'FakeTaskWithLiteralCredentials', { credentials: { role: sfn.TaskRole.fromRole(role) } }),
    timeout: cdk.Duration.seconds(30),
});
const crossAccountRole = iam.Role.fromRoleArn(stack, 'CrossAccountRole', 'arn:aws:iam::123456789012:role/CrossAccountRole');
new sfn.StateMachine(stack, 'StateMachineWithCrossAccountLiteralCredentials', {
    definition: new fake_task_1.FakeTask(stack, 'FakeTaskWithCrossAccountLiteralCredentials', { credentials: { role: sfn.TaskRole.fromRole(crossAccountRole) } }),
    timeout: cdk.Duration.seconds(30),
});
new sfn.StateMachine(stack, 'StateMachineWithJsonPathCredentials', {
    definition: new fake_task_1.FakeTask(stack, 'FakeTaskWithJsonPathCredentials', { credentials: { role: sfn.TaskRole.fromRoleArnJsonPath('$.RoleArn') } }),
    timeout: cdk.Duration.seconds(30),
});
new integ_tests_alpha_1.IntegTest(app, 'StateMachineCredentials', { testCases: [stack] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuc3RhdGUtbWFjaGluZS1jcmVkZW50aWFscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLnN0YXRlLW1hY2hpbmUtY3JlZGVudGlhbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FBMkM7QUFDM0MsbUNBQW1DO0FBQ25DLGtFQUF1RDtBQUN2RCwyQ0FBdUM7QUFDdkMscURBQXFEO0FBRXJEOzs7O0dBSUc7QUFDSCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUMxQixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLG1EQUFtRCxDQUFDLENBQUM7QUFFdEYsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUU7SUFDdkMsU0FBUyxFQUFFLElBQUksR0FBRyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUM7Q0FDbkQsQ0FBQyxDQUFDO0FBRUgsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxvQ0FBb0MsRUFBRTtJQUNoRSxVQUFVLEVBQUUsSUFBSSxvQkFBUSxDQUFDLEtBQUssRUFBRSxnQ0FBZ0MsRUFBRSxFQUFFLFdBQVcsRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7SUFDekgsT0FBTyxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztDQUNsQyxDQUFDLENBQUM7QUFFSCxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxrQkFBa0IsRUFBRSxpREFBaUQsQ0FBQyxDQUFDO0FBRTVILElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsZ0RBQWdELEVBQUU7SUFDNUUsVUFBVSxFQUFFLElBQUksb0JBQVEsQ0FBQyxLQUFLLEVBQUUsNENBQTRDLEVBQUUsRUFBRSxXQUFXLEVBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxFQUFFLENBQUM7SUFDakosT0FBTyxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztDQUNsQyxDQUFDLENBQUM7QUFFSCxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLHFDQUFxQyxFQUFFO0lBQ2pFLFVBQVUsRUFBRSxJQUFJLG9CQUFRLENBQUMsS0FBSyxFQUFFLGlDQUFpQyxFQUFFLEVBQUUsV0FBVyxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBQzVJLE9BQU8sRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7Q0FDbEMsQ0FBQyxDQUFDO0FBRUgsSUFBSSw2QkFBUyxDQUFDLEdBQUcsRUFBRSx5QkFBeUIsRUFBRSxFQUFFLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGlhbSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtaWFtJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBJbnRlZ1Rlc3QgfSBmcm9tICdAYXdzLWNkay9pbnRlZy10ZXN0cy1hbHBoYSc7XG5pbXBvcnQgeyBGYWtlVGFzayB9IGZyb20gJy4vZmFrZS10YXNrJztcbmltcG9ydCAqIGFzIHNmbiBmcm9tICdhd3MtY2RrLWxpYi9hd3Mtc3RlcGZ1bmN0aW9ucyc7XG5cbi8qXG4gKiBTdGFjayB2ZXJpZmljYXRpb24gc3RlcHM6XG4gKlxuICogLS0gYXdzIHN0ZXBmdW5jdGlvbnMgZGVzY3JpYmUtc3RhdGUtbWFjaGluZSAtLXN0YXRlLW1hY2hpbmUtYXJuIDxzdGFjay1vdXRwdXQ+IGhhcyBhIHN0YXR1cyBvZiBgQUNUSVZFYFxuICovXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ2F3cy1zdGVwZnVuY3Rpb25zLXN0YXRlLW1hY2hpbmUtY3JlZGVudGlhbHMtaW50ZWcnKTtcblxuY29uc3Qgcm9sZSA9IG5ldyBpYW0uUm9sZShzdGFjaywgJ1JvbGUnLCB7XG4gIGFzc3VtZWRCeTogbmV3IGlhbS5BY2NvdW50UHJpbmNpcGFsKHN0YWNrLmFjY291bnQpLFxufSk7XG5cbm5ldyBzZm4uU3RhdGVNYWNoaW5lKHN0YWNrLCAnU3RhdGVNYWNoaW5lV2l0aExpdGVyYWxDcmVkZW50aWFscycsIHtcbiAgZGVmaW5pdGlvbjogbmV3IEZha2VUYXNrKHN0YWNrLCAnRmFrZVRhc2tXaXRoTGl0ZXJhbENyZWRlbnRpYWxzJywgeyBjcmVkZW50aWFsczogeyByb2xlOiBzZm4uVGFza1JvbGUuZnJvbVJvbGUocm9sZSkgfSB9KSxcbiAgdGltZW91dDogY2RrLkR1cmF0aW9uLnNlY29uZHMoMzApLFxufSk7XG5cbmNvbnN0IGNyb3NzQWNjb3VudFJvbGUgPSBpYW0uUm9sZS5mcm9tUm9sZUFybihzdGFjaywgJ0Nyb3NzQWNjb3VudFJvbGUnLCAnYXJuOmF3czppYW06OjEyMzQ1Njc4OTAxMjpyb2xlL0Nyb3NzQWNjb3VudFJvbGUnKTtcblxubmV3IHNmbi5TdGF0ZU1hY2hpbmUoc3RhY2ssICdTdGF0ZU1hY2hpbmVXaXRoQ3Jvc3NBY2NvdW50TGl0ZXJhbENyZWRlbnRpYWxzJywge1xuICBkZWZpbml0aW9uOiBuZXcgRmFrZVRhc2soc3RhY2ssICdGYWtlVGFza1dpdGhDcm9zc0FjY291bnRMaXRlcmFsQ3JlZGVudGlhbHMnLCB7IGNyZWRlbnRpYWxzOiB7IHJvbGU6IHNmbi5UYXNrUm9sZS5mcm9tUm9sZShjcm9zc0FjY291bnRSb2xlKSB9IH0pLFxuICB0aW1lb3V0OiBjZGsuRHVyYXRpb24uc2Vjb25kcygzMCksXG59KTtcblxubmV3IHNmbi5TdGF0ZU1hY2hpbmUoc3RhY2ssICdTdGF0ZU1hY2hpbmVXaXRoSnNvblBhdGhDcmVkZW50aWFscycsIHtcbiAgZGVmaW5pdGlvbjogbmV3IEZha2VUYXNrKHN0YWNrLCAnRmFrZVRhc2tXaXRoSnNvblBhdGhDcmVkZW50aWFscycsIHsgY3JlZGVudGlhbHM6IHsgcm9sZTogc2ZuLlRhc2tSb2xlLmZyb21Sb2xlQXJuSnNvblBhdGgoJyQuUm9sZUFybicpIH0gfSksXG4gIHRpbWVvdXQ6IGNkay5EdXJhdGlvbi5zZWNvbmRzKDMwKSxcbn0pO1xuXG5uZXcgSW50ZWdUZXN0KGFwcCwgJ1N0YXRlTWFjaGluZUNyZWRlbnRpYWxzJywgeyB0ZXN0Q2FzZXM6IFtzdGFja10gfSk7XG4iXX0=