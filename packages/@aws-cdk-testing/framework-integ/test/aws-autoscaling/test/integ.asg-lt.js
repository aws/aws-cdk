#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ec2 = require("aws-cdk-lib/aws-ec2");
const cdk = require("aws-cdk-lib");
const autoscaling = require("aws-cdk-lib/aws-autoscaling");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-cdk-asg-integ');
const lt = new ec2.LaunchTemplate(stack, 'MainLT', {
    instanceType: new ec2.InstanceType('t3.micro'),
    machineImage: new ec2.AmazonLinuxImage({
        generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,
        cpuType: ec2.AmazonLinuxCpuType.X86_64,
    }),
});
const ltOverrideT4g = new ec2.LaunchTemplate(stack, 'T4gLT', {
    instanceType: new ec2.InstanceType('t4g.micro'),
    machineImage: new ec2.AmazonLinuxImage({
        generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,
        cpuType: ec2.AmazonLinuxCpuType.ARM_64,
    }),
});
const vpc = new ec2.Vpc(stack, 'VPC', {
    maxAzs: 2,
});
new autoscaling.AutoScalingGroup(stack, 'AsgFromLT', {
    vpc,
    launchTemplate: lt,
    minCapacity: 0,
    maxCapacity: 10,
    desiredCapacity: 5,
});
new autoscaling.AutoScalingGroup(stack, 'AsgWithDefaultInstanceWarmup', {
    vpc,
    launchTemplate: lt,
    defaultInstanceWarmup: cdk.Duration.seconds(5),
});
new autoscaling.AutoScalingGroup(stack, 'AsgFromMip', {
    vpc,
    mixedInstancesPolicy: {
        instancesDistribution: {
            onDemandPercentageAboveBaseCapacity: 50,
        },
        launchTemplate: lt,
        launchTemplateOverrides: [
            { instanceType: new ec2.InstanceType('t3.micro') },
            { instanceType: new ec2.InstanceType('t3a.micro') },
            { instanceType: new ec2.InstanceType('t4g.micro'), launchTemplate: ltOverrideT4g },
        ],
    },
    minCapacity: 0,
    maxCapacity: 10,
    desiredCapacity: 5,
});
new autoscaling.AutoScalingGroup(stack, 'AsgFromMipWithoutDistribution', {
    vpc,
    mixedInstancesPolicy: {
        launchTemplate: lt,
        launchTemplateOverrides: [
            { instanceType: new ec2.InstanceType('t3.micro') },
            { instanceType: new ec2.InstanceType('t3a.micro') },
            { instanceType: new ec2.InstanceType('t4g.micro'), launchTemplate: ltOverrideT4g },
        ],
    },
    minCapacity: 0,
    maxCapacity: 10,
    desiredCapacity: 5,
});
new autoscaling.AutoScalingGroup(stack, 'AsgWithGp3Blockdevice', {
    minCapacity: 0,
    maxCapacity: 10,
    desiredCapacity: 5,
    instanceType: ec2.InstanceType.of(ec2.InstanceClass.T3, ec2.InstanceSize.MICRO),
    machineImage: new ec2.AmazonLinuxImage(),
    blockDevices: [{
            deviceName: 'ebs',
            mappingEnabled: true,
            volume: autoscaling.BlockDeviceVolume.ebs(15, {
                deleteOnTermination: true,
                encrypted: true,
                volumeType: autoscaling.EbsDeviceVolumeType.GP3,
                throughput: 125,
            }),
        }],
    vpc,
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuYXNnLWx0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW50ZWcuYXNnLWx0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDJDQUEyQztBQUMzQyxtQ0FBbUM7QUFDbkMsMkRBQTJEO0FBRTNELE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQzFCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztBQUV0RCxNQUFNLEVBQUUsR0FBRyxJQUFJLEdBQUcsQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRTtJQUNqRCxZQUFZLEVBQUUsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQztJQUM5QyxZQUFZLEVBQUUsSUFBSSxHQUFHLENBQUMsZ0JBQWdCLENBQUM7UUFDckMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxjQUFjO1FBQ3BELE9BQU8sRUFBRSxHQUFHLENBQUMsa0JBQWtCLENBQUMsTUFBTTtLQUN2QyxDQUFDO0NBQ0gsQ0FBQyxDQUFDO0FBRUgsTUFBTSxhQUFhLEdBQUcsSUFBSSxHQUFHLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUU7SUFDM0QsWUFBWSxFQUFFLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUM7SUFDL0MsWUFBWSxFQUFFLElBQUksR0FBRyxDQUFDLGdCQUFnQixDQUFDO1FBQ3JDLFVBQVUsRUFBRSxHQUFHLENBQUMscUJBQXFCLENBQUMsY0FBYztRQUNwRCxPQUFPLEVBQUUsR0FBRyxDQUFDLGtCQUFrQixDQUFDLE1BQU07S0FDdkMsQ0FBQztDQUNILENBQUMsQ0FBQztBQUVILE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFO0lBQ3BDLE1BQU0sRUFBRSxDQUFD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aW4vZW52IG5vZGVcbmltcG9ydCAqIGFzIGVjMiBmcm9tICdhd3MtY2RrLWxpYi9hd3MtZWMyJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgKiBhcyBhdXRvc2NhbGluZyBmcm9tICdhd3MtY2RrLWxpYi9hd3MtYXV0b3NjYWxpbmcnO1xuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ2F3cy1jZGstYXNnLWludGVnJyk7XG5cbmNvbnN0IGx0ID0gbmV3IGVjMi5MYXVuY2hUZW1wbGF0ZShzdGFjaywgJ01haW5MVCcsIHtcbiAgaW5zdGFuY2VUeXBlOiBuZXcgZWMyLkluc3RhbmNlVHlwZSgndDMubWljcm8nKSxcbiAgbWFjaGluZUltYWdlOiBuZXcgZWMyLkFtYXpvbkxpbnV4SW1hZ2Uoe1xuICAgIGdlbmVyYXRpb246IGVjMi5BbWF6b25MaW51eEdlbmVyYXRpb24uQU1BWk9OX0xJTlVYXzIsXG4gICAgY3B1VHlwZTogZWMyLkFtYXpvbkxpbnV4Q3B1VHlwZS5YODZfNjQsXG4gIH0pLFxufSk7XG5cbmNvbnN0IGx0T3ZlcnJpZGVUNGcgPSBuZXcgZWMyLkxhdW5jaFRlbXBsYXRlKHN0YWNrLCAnVDRnTFQnLCB7XG4gIGluc3RhbmNlVHlwZTogbmV3IGVjMi5JbnN0YW5jZVR5cGUoJ3Q0Zy5taWNybycpLFxuICBtYWNoaW5lSW1hZ2U6IG5ldyBlYzIuQW1hem9uTGludXhJbWFnZSh7XG4gICAgZ2VuZXJhdGlvbjogZWMyLkFtYXpvbkxpbnV4R2VuZXJhdGlvbi5BTUFaT05fTElOVVhfMixcbiAgICBjcHVUeXBlOiBlYzIuQW1hem9uTGludXhDcHVUeXBlLkFSTV82NCxcbiAgfSksXG59KTtcblxuY29uc3QgdnBjID0gbmV3IGVjMi5WcGMoc3RhY2ssICdWUEMnLCB7XG4gIG1heEF6czogMixcbn0pO1xuXG5uZXcgYXV0b3NjYWxpbmcuQXV0b1NjYWxpbmdHcm91cChzdGFjaywgJ0FzZ0Zyb21MVCcsIHtcbiAgdnBjLFxuICBsYXVuY2hUZW1wbGF0ZTogbHQsXG4gIG1pbkNhcGFjaXR5OiAwLFxuICBtYXhDYXBhY2l0eTogMTAsXG4gIGRlc2lyZWRDYXBhY2l0eTogNSxcbn0pO1xuXG5uZXcgYXV0b3NjYWxpbmcuQXV0b1NjYWxpbmdHcm91cChzdGFjaywgJ0FzZ1dpdGhEZWZhdWx0SW5zdGFuY2VXYXJtdXAnLCB7XG4gIHZwYyxcbiAgbGF1bmNoVGVtcGxhdGU6IGx0LFxuICBkZWZhdWx0SW5zdGFuY2VXYXJtdXA6IGNkay5EdXJhdGlvbi5zZWNvbmRzKDUpLFxufSk7XG5cbm5ldyBhdXRvc2NhbGluZy5BdXRvU2NhbGluZ0dyb3VwKHN0YWNrLCAnQXNnRnJvbU1pcCcsIHtcbiAgdnBjLFxuICBtaXhlZEluc3RhbmNlc1BvbGljeToge1xuICAgIGluc3RhbmNlc0Rpc3RyaWJ1dGlvbjoge1xuICAgICAgb25EZW1hbmRQZXJjZW50YWdlQWJvdmVCYXNlQ2FwYWNpdHk6IDUwLFxuICAgIH0sXG4gICAgbGF1bmNoVGVtcGxhdGU6IGx0LFxuICAgIGxhdW5jaFRlbXBsYXRlT3ZlcnJpZGVzOiBbXG4gICAgICB7IGluc3RhbmNlVHlwZTogbmV3IGVjMi5JbnN0YW5jZVR5cGUoJ3QzLm1pY3JvJykgfSxcbiAgICAgIHsgaW5zdGFuY2VUeXBlOiBuZXcgZWMyLkluc3RhbmNlVHlwZSgndDNhLm1pY3JvJykgfSxcbiAgICAgIHsgaW5zdGFuY2VUeXBlOiBuZXcgZWMyLkluc3RhbmNlVHlwZSgndDRnLm1pY3JvJyksIGxhdW5jaFRlbXBsYXRlOiBsdE92ZXJyaWRlVDRnIH0sXG4gICAgXSxcbiAgfSxcbiAgbWluQ2FwYWNpdHk6IDAsXG4gIG1heENhcGFjaXR5OiAxMCxcbiAgZGVzaXJlZENhcGFjaXR5OiA1LFxufSk7XG5cbm5ldyBhdXRvc2NhbGluZy5BdXRvU2NhbGluZ0dyb3VwKHN0YWNrLCAnQXNnRnJvbU1pcFdpdGhvdXREaXN0cmlidXRpb24nLCB7XG4gIHZwYyxcbiAgbWl4ZWRJbnN0YW5jZXNQb2xpY3k6IHtcbiAgICBsYXVuY2hUZW1wbGF0ZTogbHQsXG4gICAgbGF1bmNoVGVtcGxhdGVPdmVycmlkZXM6IFtcbiAgICAgIHsgaW5zdGFuY2VUeXBlOiBuZXcgZWMyLkluc3RhbmNlVHlwZSgndDMubWljcm8nKSB9LFxuICAgICAgeyBpbnN0YW5jZVR5cGU6IG5ldyBlYzIuSW5zdGFuY2VUeXBlKCd0M2EubWljcm8nKSB9LFxuICAgICAgeyBpbnN0YW5jZVR5cGU6IG5ldyBlYzIuSW5zdGFuY2VUeXBlKCd0NGcubWljcm8nKSwgbGF1bmNoVGVtcGxhdGU6IGx0T3ZlcnJpZGVUNGcgfSxcbiAgICBdLFxuICB9LFxuICBtaW5DYXBhY2l0eTogMCxcbiAgbWF4Q2FwYWNpdHk6IDEwLFxuICBkZXNpcmVkQ2FwYWNpdHk6IDUsXG59KTtcblxubmV3IGF1dG9zY2FsaW5nLkF1dG9TY2FsaW5nR3JvdXAoc3RhY2ssICdBc2dXaXRoR3AzQmxvY2tkZXZpY2UnLCB7XG4gIG1pbkNhcGFjaXR5OiAwLFxuICBtYXhDYXBhY2l0eTogMTAsXG4gIGRlc2lyZWRDYXBhY2l0eTogNSxcbiAgaW5zdGFuY2VUeXBlOiBlYzIuSW5zdGFuY2VUeXBlLm9mKGVjMi5JbnN0YW5jZUNsYXNzLlQzLCBlYzIuSW5zdGFuY2VTaXplLk1JQ1JPKSxcbiAgbWFjaGluZUltYWdlOiBuZXcgZWMyLkFtYXpvbkxpbnV4SW1hZ2UoKSxcbiAgYmxvY2tEZXZpY2VzOiBbe1xuICAgIGRldmljZU5hbWU6ICdlYnMnLFxuICAgIG1hcHBpbmdFbmFibGVkOiB0cnVlLFxuICAgIHZvbHVtZTogYXV0b3NjYWxpbmcuQmxvY2tEZXZpY2VWb2x1bWUuZWJzKDE1LCB7XG4gICAgICBkZWxldGVPblRlcm1pbmF0aW9uOiB0cnVlLFxuICAgICAgZW5jcnlwdGVkOiB0cnVlLFxuICAgICAgdm9sdW1lVHlwZTogYXV0b3NjYWxpbmcuRWJzRGV2aWNlVm9sdW1lVHlwZS5HUDMsXG4gICAgICB0aHJvdWdocHV0OiAxMjUsXG4gICAgfSksXG4gIH1dLFxuICB2cGMsXG59KTtcblxuYXBwLnN5bnRoKCk7XG4iXX0=