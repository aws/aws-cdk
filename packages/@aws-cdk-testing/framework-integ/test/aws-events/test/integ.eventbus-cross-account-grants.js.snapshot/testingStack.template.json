{
 "Resources": {
  "MyFunctionServiceRole3C357FF2": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "MyFunctionServiceRoleDefaultPolicyB705ABD4": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "events:PutEvents",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":events:test-region:345678901234:event-bus/testingBus"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "MyFunctionServiceRoleDefaultPolicyB705ABD4",
    "Roles": [
     {
      "Ref": "MyFunctionServiceRole3C357FF2"
     }
    ]
   }
  },
  "MyFunction3BAA72D1": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "\nimport boto3\nimport json\nimport os\n \ndef handler(event, context):\n  try:\n      client = boto3.client('events')\n      \n      # Reference the EventBus in the other account\n      event_bus_name = os.environ['EVENT_BUS_NAME']\n      event_bus_account = os.environ['EVENT_BUS_ACCOUNT']\n      event_bus_arn = f\"arn:aws:events:{os.environ.get('AWS_REGION')}:{event_bus_account}:event-bus/{event_bus_name}\"\n \n      response = client.put_events(\n          Entries=[\n              {\n                  'Source': 'custom.myapp',\n                  'DetailType': 'MyCustomEvent',\n                  'Detail': json.dumps({'key': 'value'}),\n                  'EventBusName': event_bus_arn\n              }\n          ]\n      )\n      \n      return {\n          'statusCode': 200\n      }\n  except Exception as e:\n      return {\n          'statusCode': 500\n      }\n    "
    },
    "Environment": {
     "Variables": {
      "EVENT_BUS_NAME": "testingBus",
      "EVENT_BUS_ACCOUNT": "345678901234"
     }
    },
    "FunctionName": "testingstackgstackmyfunctione83a75ce9ffe929fc705",
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "MyFunctionServiceRole3C357FF2",
      "Arn"
     ]
    },
    "Runtime": "python3.9"
   },
   "DependsOn": [
    "MyFunctionServiceRoleDefaultPolicyB705ABD4",
    "MyFunctionServiceRole3C357FF2"
   ]
  },
  "MyFunctionInvokeoMZJGgicWEGdSWEljXOINke04MVnf5CWCOLLWenzHkB67A8F85": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "MyFunction3BAA72D1",
      "Arn"
     ]
    },
    "Principal": "12345678"
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}