"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_route53_1 = require("aws-cdk-lib/aws-route53");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const integ_tests_alpha_1 = require("@aws-cdk/integ-tests-alpha");
const aws_certificatemanager_1 = require("aws-cdk-lib/aws-certificatemanager");
/**
 * In order to test this you need to have a valid public hosted zone that you can use
 * to request certificates for. Currently there is not a great way to test scenarios that involve
 * multiple deploys so this is what I did to test these scenarios.
 *
 * 1. comment out the `cert.applyRemovalPolicy` line to create the certificate
 * 2. Run `yarn integ --update-on-failed --no-clean`
 * 3. uncomment the line to apply the removal policy
 * 4. Run `yarn integ --update-on-failed --no-clean` to validate that changing
 *    that property does not cause a new certificate to be created
 * 5. Run `yarn integ --force` to run the test again. Since we didn't pass `--no-clean`
 *    the stack will be deleted
 * 6. Validate that the certificate was not deleted.
 * 7. Delete the certificate manually.
 */
const hostedZoneId = process.env.CDK_INTEG_HOSTED_ZONE_ID ?? process.env.HOSTED_ZONE_ID;
if (!hostedZoneId)
    throw new Error('For this test you must provide your own HostedZoneId as an env var "HOSTED_ZONE_ID"');
const hostedZoneName = process.env.CDK_INTEG_HOSTED_ZONE_NAME ?? process.env.HOSTED_ZONE_NAME;
if (!hostedZoneName)
    throw new Error('For this test you must provide your own HostedZoneName as an env var "HOSTED_ZONE_NAME"');
const domainName = process.env.CDK_INTEG_DOMAIN_NAME ?? process.env.DOMAIN_NAME;
if (!domainName)
    throw new Error('For this test you must provide your own Domain Name as an env var "DOMAIN_NAME"');
const app = new aws_cdk_lib_1.App();
const stack = new aws_cdk_lib_1.Stack(app, 'integ-dns-validated-certificate');
const hostedZone = aws_route53_1.PublicHostedZone.fromHostedZoneAttributes(stack, 'HostedZone', {
    hostedZoneId,
    zoneName: hostedZoneName,
});
const cert = new aws_certificatemanager_1.DnsValidatedCertificate(stack, 'Certificate', {
    domainName,
    hostedZone,
    validation: aws_certificatemanager_1.CertificateValidation.fromDns(hostedZone),
});
cert.applyRemovalPolicy(aws_cdk_lib_1.RemovalPolicy.RETAIN);
new aws_cdk_lib_1.CfnOutput(stack, 'CertificateArn', {
    value: `https://${stack.region}.console.aws.amazon.com/acm/home?region=${stack.region}#/certificates/${aws_cdk_lib_1.Fn.select(1, aws_cdk_lib_1.Fn.split('/', cert.certificateArn))}`,
});
new integ_tests_alpha_1.IntegTest(app, 'integ-test', {
    testCases: [stack],
    diffAssets: true,
    enableLookups: true,
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuZG5zLXZhbGlkYXRlZC1jZXJ0aWZpY2F0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLmRucy12YWxpZGF0ZWQtY2VydGlmaWNhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5REFBMkQ7QUFDM0QsNkNBQXVFO0FBQ3ZFLGtFQUF1RDtBQUN2RCwrRUFBb0c7QUFFcEc7Ozs7Ozs7Ozs7Ozs7O0dBY0c7QUFFSCxNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDO0FBQ3hGLElBQUksQ0FBQyxZQUFZO0lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxxRkFBcUYsQ0FBQyxDQUFDO0FBQzFILE1BQU0sY0FBYyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsMEJBQTBCLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQztBQUM5RixJQUFJLENBQUMsY0FBYztJQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMseUZBQXlGLENBQUMsQ0FBQztBQUNoSSxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDO0FBQ2hGLElBQUksQ0FBQyxVQUFVO0lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxpRkFBaUYsQ0FBQyxDQUFDO0FBRXBILE1BQU0sR0FBRyxHQUFHLElBQUksaUJBQUcsRUFBRSxDQUFDO0FBQ3RCLE1BQU0sS0FBSyxHQUFHLElBQUksbUJBQUssQ0FBQyxHQUFHLEVBQUUsaUNBQWlDLENBQUMsQ0FBQztBQUNoRSxNQUFNLFVBQVUsR0FBRyw4QkFBZ0IsQ0FBQyx3QkFBd0IsQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFO0lBQ2hGLFlBQVk7SUFDWixRQUFRLEVBQUUsY0FBYztDQUN6QixDQUFDLENBQUM7QUFFSCxNQUFNLElBQUksR0FBRyxJQUFJLGdEQUF1QixDQUFDLEtBQUssRUFBRSxhQUFhLEVBQUU7SUFDN0QsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVLEVBQUUsOENBQXFCLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQztDQUN0RCxDQUFDLENBQUM7QUFDSCxJQUFJLENBQUMsa0JBQWtCLENBQUMsMkJBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM5QyxJQUFJLHVCQUFTLENBQUMsS0FBSyxFQUFFLGdCQUFnQixFQUFFO0lBQ3JDLEtBQUssRUFBRSxXQUFXLEtBQUssQ0FBQyxNQUFNLDJDQUEyQyxLQUFLLENBQUMsTUFBTSxrQkFBa0IsZ0JBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLGdCQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBRTtDQUMxSixDQUFDLENBQUM7QUFFSCxJQUFJLDZCQUFTLENBQUMsR0FBRyxFQUFFLFlBQVksRUFBRTtJQUMvQixTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUM7SUFDbEIsVUFBVSxFQUFFLElBQUk7SUFDaEIsYUFBYSxFQUFFLElBQUk7Q0FDcEIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHVibGljSG9zdGVkWm9uZSB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1yb3V0ZTUzJztcbmltcG9ydCB7IEFwcCwgU3RhY2ssIFJlbW92YWxQb2xpY3ksIENmbk91dHB1dCwgRm4gfSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBJbnRlZ1Rlc3QgfSBmcm9tICdAYXdzLWNkay9pbnRlZy10ZXN0cy1hbHBoYSc7XG5pbXBvcnQgeyBEbnNWYWxpZGF0ZWRDZXJ0aWZpY2F0ZSwgQ2VydGlmaWNhdGVWYWxpZGF0aW9uIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWNlcnRpZmljYXRlbWFuYWdlcic7XG5cbi8qKlxuICogSW4gb3JkZXIgdG8gdGVzdCB0aGlzIHlvdSBuZWVkIHRvIGhhdmUgYSB2YWxpZCBwdWJsaWMgaG9zdGVkIHpvbmUgdGhhdCB5b3UgY2FuIHVzZVxuICogdG8gcmVxdWVzdCBjZXJ0aWZpY2F0ZXMgZm9yLiBDdXJyZW50bHkgdGhlcmUgaXMgbm90IGEgZ3JlYXQgd2F5IHRvIHRlc3Qgc2NlbmFyaW9zIHRoYXQgaW52b2x2ZVxuICogbXVsdGlwbGUgZGVwbG95cyBzbyB0aGlzIGlzIHdoYXQgSSBkaWQgdG8gdGVzdCB0aGVzZSBzY2VuYXJpb3MuXG4gKlxuICogMS4gY29tbWVudCBvdXQgdGhlIGBjZXJ0LmFwcGx5UmVtb3ZhbFBvbGljeWAgbGluZSB0byBjcmVhdGUgdGhlIGNlcnRpZmljYXRlXG4gKiAyLiBSdW4gYHlhcm4gaW50ZWcgLS11cGRhdGUtb24tZmFpbGVkIC0tbm8tY2xlYW5gXG4gKiAzLiB1bmNvbW1lbnQgdGhlIGxpbmUgdG8gYXBwbHkgdGhlIHJlbW92YWwgcG9saWN5XG4gKiA0LiBSdW4gYHlhcm4gaW50ZWcgLS11cGRhdGUtb24tZmFpbGVkIC0tbm8tY2xlYW5gIHRvIHZhbGlkYXRlIHRoYXQgY2hhbmdpbmdcbiAqICAgIHRoYXQgcHJvcGVydHkgZG9lcyBub3QgY2F1c2UgYSBuZXcgY2VydGlmaWNhdGUgdG8gYmUgY3JlYXRlZFxuICogNS4gUnVuIGB5YXJuIGludGVnIC0tZm9yY2VgIHRvIHJ1biB0aGUgdGVzdCBhZ2Fpbi4gU2luY2Ugd2UgZGlkbid0IHBhc3MgYC0tbm8tY2xlYW5gXG4gKiAgICB0aGUgc3RhY2sgd2lsbCBiZSBkZWxldGVkXG4gKiA2LiBWYWxpZGF0ZSB0aGF0IHRoZSBjZXJ0aWZpY2F0ZSB3YXMgbm90IGRlbGV0ZWQuXG4gKiA3LiBEZWxldGUgdGhlIGNlcnRpZmljYXRlIG1hbnVhbGx5LlxuICovXG5cbmNvbnN0IGhvc3RlZFpvbmVJZCA9IHByb2Nlc3MuZW52LkNES19JTlRFR19IT1NURURfWk9ORV9JRCA/PyBwcm9jZXNzLmVudi5IT1NURURfWk9ORV9JRDtcbmlmICghaG9zdGVkWm9uZUlkKSB0aHJvdyBuZXcgRXJyb3IoJ0ZvciB0aGlzIHRlc3QgeW91IG11c3QgcHJvdmlkZSB5b3VyIG93biBIb3N0ZWRab25lSWQgYXMgYW4gZW52IHZhciBcIkhPU1RFRF9aT05FX0lEXCInKTtcbmNvbnN0IGhvc3RlZFpvbmVOYW1lID0gcHJvY2Vzcy5lbnYuQ0RLX0lOVEVHX0hPU1RFRF9aT05FX05BTUUgPz8gcHJvY2Vzcy5lbnYuSE9TVEVEX1pPTkVfTkFNRTtcbmlmICghaG9zdGVkWm9uZU5hbWUpIHRocm93IG5ldyBFcnJvcignRm9yIHRoaXMgdGVzdCB5b3UgbXVzdCBwcm92aWRlIHlvdXIgb3duIEhvc3RlZFpvbmVOYW1lIGFzIGFuIGVudiB2YXIgXCJIT1NURURfWk9ORV9OQU1FXCInKTtcbmNvbnN0IGRvbWFpbk5hbWUgPSBwcm9jZXNzLmVudi5DREtfSU5URUdfRE9NQUlOX05BTUUgPz8gcHJvY2Vzcy5lbnYuRE9NQUlOX05BTUU7XG5pZiAoIWRvbWFpbk5hbWUpIHRocm93IG5ldyBFcnJvcignRm9yIHRoaXMgdGVzdCB5b3UgbXVzdCBwcm92aWRlIHlvdXIgb3duIERvbWFpbiBOYW1lIGFzIGFuIGVudiB2YXIgXCJET01BSU5fTkFNRVwiJyk7XG5cbmNvbnN0IGFwcCA9IG5ldyBBcHAoKTtcbmNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKGFwcCwgJ2ludGVnLWRucy12YWxpZGF0ZWQtY2VydGlmaWNhdGUnKTtcbmNvbnN0IGhvc3RlZFpvbmUgPSBQdWJsaWNIb3N0ZWRab25lLmZyb21Ib3N0ZWRab25lQXR0cmlidXRlcyhzdGFjaywgJ0hvc3RlZFpvbmUnLCB7XG4gIGhvc3RlZFpvbmVJZCxcbiAgem9uZU5hbWU6IGhvc3RlZFpvbmVOYW1lLFxufSk7XG5cbmNvbnN0IGNlcnQgPSBuZXcgRG5zVmFsaWRhdGVkQ2VydGlmaWNhdGUoc3RhY2ssICdDZXJ0aWZpY2F0ZScsIHtcbiAgZG9tYWluTmFtZSxcbiAgaG9zdGVkWm9uZSxcbiAgdmFsaWRhdGlvbjogQ2VydGlmaWNhdGVWYWxpZGF0aW9uLmZyb21EbnMoaG9zdGVkWm9uZSksXG59KTtcbmNlcnQuYXBwbHlSZW1vdmFsUG9saWN5KFJlbW92YWxQb2xpY3kuUkVUQUlOKTtcbm5ldyBDZm5PdXRwdXQoc3RhY2ssICdDZXJ0aWZpY2F0ZUFybicsIHtcbiAgdmFsdWU6IGBodHRwczovLyR7c3RhY2sucmVnaW9ufS5jb25zb2xlLmF3cy5hbWF6b24uY29tL2FjbS9ob21lP3JlZ2lvbj0ke3N0YWNrLnJlZ2lvbn0jL2NlcnRpZmljYXRlcy8ke0ZuLnNlbGVjdCgxLCBGbi5zcGxpdCgnLycsIGNlcnQuY2VydGlmaWNhdGVBcm4pKX1gLFxufSk7XG5cbm5ldyBJbnRlZ1Rlc3QoYXBwLCAnaW50ZWctdGVzdCcsIHtcbiAgdGVzdENhc2VzOiBbc3RhY2tdLFxuICBkaWZmQXNzZXRzOiB0cnVlLFxuICBlbmFibGVMb29rdXBzOiB0cnVlLFxufSk7XG4iXX0=