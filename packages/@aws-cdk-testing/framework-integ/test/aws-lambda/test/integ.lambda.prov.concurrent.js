"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iam = require("aws-cdk-lib/aws-iam");
const cdk = require("aws-cdk-lib");
const cx_api_1 = require("aws-cdk-lib/cx-api");
const lambda = require("aws-cdk-lib/aws-lambda");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-cdk-lambda-pce-1');
const lambdaCode = 'exports.handler =  async function(event, context) { ' +
    'console.log("Hello from CDK! with #type# Provisioned Concurrent Exec!");}';
const pce = 5;
// Integration test for provisioned concurrent execution via Alias
const fn = new lambda.Function(stack, 'MyLambdaAliasPCE', {
    code: new lambda.InlineCode(lambdaCode.replace('#type#', 'Alias')),
    handler: 'index.handler',
    runtime: lambda.Runtime.NODEJS_14_X,
});
fn.addToRolePolicy(new iam.PolicyStatement({
    resources: ['*'],
    actions: ['*'],
}));
const version = fn.currentVersion;
const alias = new lambda.Alias(stack, 'Alias', {
    aliasName: 'prod',
    version,
    provisionedConcurrentExecutions: pce,
});
alias.addPermission('AliasPermission', {
    principal: new iam.ServicePrincipal('cloudformation.amazonaws.com'),
});
// Integration test for provisioned concurrent execution via Version
const fnVersionPCE = new lambda.Function(stack, 'MyLambdaVersionPCE', {
    code: new lambda.InlineCode(lambdaCode.replace('#type#', 'Version')),
    handler: 'index.handler',
    runtime: lambda.Runtime.NODEJS_14_X,
    currentVersionOptions: {
        provisionedConcurrentExecutions: pce,
    },
});
fnVersionPCE.addToRolePolicy(new iam.PolicyStatement({
    resources: ['*'],
    actions: ['*'],
}));
const version2 = fnVersionPCE.currentVersion;
const alias2 = new lambda.Alias(stack, 'Alias2', {
    aliasName: 'prod',
    version: version2,
});
alias2.addPermission('AliasPermission2', {
    principal: new iam.ServicePrincipal('cloudformation.amazonaws.com'),
});
// Changes the function description when the feature flag is present
// to validate the changed function hash.
cdk.Aspects.of(stack).add(new lambda.FunctionVersionUpgrade(cx_api_1.LAMBDA_RECOGNIZE_LAYER_VERSION));
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcubGFtYmRhLnByb3YuY29uY3VycmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLmxhbWJkYS5wcm92LmNvbmN1cnJlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FBMkM7QUFDM0MsbUNBQW1DO0FBQ25DLCtDQUFvRTtBQUNwRSxpREFBaUQ7QUFFakQsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFFMUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO0FBRXpELE1BQU0sVUFBVSxHQUFHLHNEQUFzRDtJQUN0RCwyRUFBMkUsQ0FBQztBQUUvRixNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFFZCxrRUFBa0U7QUFDbEUsTUFBTSxFQUFFLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxrQkFBa0IsRUFBRTtJQUN4RCxJQUFJLEVBQUUsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2xFLE9BQU8sRUFBRSxlQUFlO0lBQ3hCLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVc7Q0FDcEMsQ0FBQyxDQUFDO0FBRUgsRUFBRSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxlQUFlLENBQUM7SUFDekMsU0FBUyxFQUFFLENBQUMsR0FBRyxDQUFDO0lBQ2hCLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQztDQUNmLENBQUMsQ0FBQyxDQUFDO0FBRUosTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQztBQUVsQyxNQUFNLEtBQUssR0FBRyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRTtJQUM3QyxTQUFTLEVBQUUsTUFBTTtJQUNqQixPQUFPO0lBQ1AsK0JBQStCLEVBQUUsR0FBRztDQUNyQyxDQUFDLENBQUM7QUFFSCxLQUFLLENBQUMsYUFBYSxDQUFDLGlCQUFpQixFQUFFO0lBQ3JDLFNBQVMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyw4QkFBOEIsQ0FBQztDQUNwRSxDQUFDLENBQUM7QUFFSCxvRUFBb0U7QUFDcEUsTUFBTSxZQUFZLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxvQkFBb0IsRUFBRTtJQUNwRSxJQUFJLEVBQUUsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3BFLE9BQU8sRUFBRSxlQUFlO0lBQ3hCLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVc7SUFDbkMscUJBQXFCLEVBQUU7UUFDckIsK0JBQStCLEVBQUUsR0FBRztLQUNyQztDQUNGLENBQUMsQ0FBQztBQUVILFlBQVksQ0FBQyxlQUFlLENBQUMsSUFBSSxHQUFHLENBQUMsZUFBZSxDQUFDO0lBQ25ELFNBQVMsRUFBRSxDQUFDLEdBQUcsQ0FBQztJQUNoQixPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUM7Q0FDZixDQUFDLENBQUMsQ0FBQztBQUVKLE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxjQUFjLENBQUM7QUFFN0MsTUFBTSxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUU7SUFDL0MsU0FBUyxFQUFFLE1BQU07SUFDakIsT0FBTyxFQUFFLFFBQVE7Q0FDbEIsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsRUFBRTtJQUN2QyxTQUFTLEVBQUUsSUFBSSxHQUFHLENBQUMsZ0JBQWdCLENBQUMsOEJBQThCLENBQUM7Q0FDcEUsQ0FBQyxDQUFDO0FBRUgsb0VBQW9FO0FBQ3BFLHlDQUF5QztBQUN6QyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxNQUFNLENBQUMsc0JBQXNCLENBQUMsdUNBQThCLENBQUMsQ0FBQyxDQUFDO0FBRTdGLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGlhbSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtaWFtJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBMQU1CREFfUkVDT0dOSVpFX0xBWUVSX1ZFUlNJT04gfSBmcm9tICdhd3MtY2RrLWxpYi9jeC1hcGknO1xuaW1wb3J0ICogYXMgbGFtYmRhIGZyb20gJ2F3cy1jZGstbGliL2F3cy1sYW1iZGEnO1xuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuXG5jb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soYXBwLCAnYXdzLWNkay1sYW1iZGEtcGNlLTEnKTtcblxuY29uc3QgbGFtYmRhQ29kZSA9ICdleHBvcnRzLmhhbmRsZXIgPSAgYXN5bmMgZnVuY3Rpb24oZXZlbnQsIGNvbnRleHQpIHsgJyArXG4gICAgICAgICAgICAgICAgICAgJ2NvbnNvbGUubG9nKFwiSGVsbG8gZnJvbSBDREshIHdpdGggI3R5cGUjIFByb3Zpc2lvbmVkIENvbmN1cnJlbnQgRXhlYyFcIik7fSc7XG5cbmNvbnN0IHBjZSA9IDU7XG5cbi8vIEludGVncmF0aW9uIHRlc3QgZm9yIHByb3Zpc2lvbmVkIGNvbmN1cnJlbnQgZXhlY3V0aW9uIHZpYSBBbGlhc1xuY29uc3QgZm4gPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHN0YWNrLCAnTXlMYW1iZGFBbGlhc1BDRScsIHtcbiAgY29kZTogbmV3IGxhbWJkYS5JbmxpbmVDb2RlKGxhbWJkYUNvZGUucmVwbGFjZSgnI3R5cGUjJywgJ0FsaWFzJykpLFxuICBoYW5kbGVyOiAnaW5kZXguaGFuZGxlcicsXG4gIHJ1bnRpbWU6IGxhbWJkYS5SdW50aW1lLk5PREVKU18xNF9YLFxufSk7XG5cbmZuLmFkZFRvUm9sZVBvbGljeShuZXcgaWFtLlBvbGljeVN0YXRlbWVudCh7XG4gIHJlc291cmNlczogWycqJ10sXG4gIGFjdGlvbnM6IFsnKiddLFxufSkpO1xuXG5jb25zdCB2ZXJzaW9uID0gZm4uY3VycmVudFZlcnNpb247XG5cbmNvbnN0IGFsaWFzID0gbmV3IGxhbWJkYS5BbGlhcyhzdGFjaywgJ0FsaWFzJywge1xuICBhbGlhc05hbWU6ICdwcm9kJyxcbiAgdmVyc2lvbixcbiAgcHJvdmlzaW9uZWRDb25jdXJyZW50RXhlY3V0aW9uczogcGNlLFxufSk7XG5cbmFsaWFzLmFkZFBlcm1pc3Npb24oJ0FsaWFzUGVybWlzc2lvbicsIHtcbiAgcHJpbmNpcGFsOiBuZXcgaWFtLlNlcnZpY2VQcmluY2lwYWwoJ2Nsb3VkZm9ybWF0aW9uLmFtYXpvbmF3cy5jb20nKSxcbn0pO1xuXG4vLyBJbnRlZ3JhdGlvbiB0ZXN0IGZvciBwcm92aXNpb25lZCBjb25jdXJyZW50IGV4ZWN1dGlvbiB2aWEgVmVyc2lvblxuY29uc3QgZm5WZXJzaW9uUENFID0gbmV3IGxhbWJkYS5GdW5jdGlvbihzdGFjaywgJ015TGFtYmRhVmVyc2lvblBDRScsIHtcbiAgY29kZTogbmV3IGxhbWJkYS5JbmxpbmVDb2RlKGxhbWJkYUNvZGUucmVwbGFjZSgnI3R5cGUjJywgJ1ZlcnNpb24nKSksXG4gIGhhbmRsZXI6ICdpbmRleC5oYW5kbGVyJyxcbiAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzE0X1gsXG4gIGN1cnJlbnRWZXJzaW9uT3B0aW9uczoge1xuICAgIHByb3Zpc2lvbmVkQ29uY3VycmVudEV4ZWN1dGlvbnM6IHBjZSxcbiAgfSxcbn0pO1xuXG5mblZlcnNpb25QQ0UuYWRkVG9Sb2xlUG9saWN5KG5ldyBpYW0uUG9saWN5U3RhdGVtZW50KHtcbiAgcmVzb3VyY2VzOiBbJyonXSxcbiAgYWN0aW9uczogWycqJ10sXG59KSk7XG5cbmNvbnN0IHZlcnNpb24yID0gZm5WZXJzaW9uUENFLmN1cnJlbnRWZXJzaW9uO1xuXG5jb25zdCBhbGlhczIgPSBuZXcgbGFtYmRhLkFsaWFzKHN0YWNrLCAnQWxpYXMyJywge1xuICBhbGlhc05hbWU6ICdwcm9kJyxcbiAgdmVyc2lvbjogdmVyc2lvbjIsXG59KTtcblxuYWxpYXMyLmFkZFBlcm1pc3Npb24oJ0FsaWFzUGVybWlzc2lvbjInLCB7XG4gIHByaW5jaXBhbDogbmV3IGlhbS5TZXJ2aWNlUHJpbmNpcGFsKCdjbG91ZGZvcm1hdGlvbi5hbWF6b25hd3MuY29tJyksXG59KTtcblxuLy8gQ2hhbmdlcyB0aGUgZnVuY3Rpb24gZGVzY3JpcHRpb24gd2hlbiB0aGUgZmVhdHVyZSBmbGFnIGlzIHByZXNlbnRcbi8vIHRvIHZhbGlkYXRlIHRoZSBjaGFuZ2VkIGZ1bmN0aW9uIGhhc2guXG5jZGsuQXNwZWN0cy5vZihzdGFjaykuYWRkKG5ldyBsYW1iZGEuRnVuY3Rpb25WZXJzaW9uVXBncmFkZShMQU1CREFfUkVDT0dOSVpFX0xBWUVSX1ZFUlNJT04pKTtcblxuYXBwLnN5bnRoKCk7XG4iXX0=