"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
// eslint-disable-next-line import/no-extraneous-dependencies
const client_codepipeline_1 = require("@aws-sdk/client-codepipeline");
const client = new client_codepipeline_1.CodePipeline({ apiVersion: '2015-07-09' });
const TIMEOUT_IN_MINUTES = 5;
const sleep = (seconds) => {
    return new Promise(resolve => setTimeout(resolve, seconds * 1000));
};
async function handler(event, _context) {
    const { PipelineName: pipelineName, StageName: stageName, ActionName: actionName, } = event;
    function parseState(response) {
        const stages = response.stageStates;
        const validStages = stages?.filter((s) => s.stageName === stageName);
        const manualApproval = validStages.length &&
            validStages[0].actionStates.filter((state) => state.actionName === actionName);
        const latest = manualApproval && manualApproval.length &&
            manualApproval[0].latestExecution;
        return latest ? latest.token : undefined;
    }
    const deadline = Date.now() + TIMEOUT_IN_MINUTES * 60000;
    while (Date.now() < deadline) {
        const response = await client.getPipelineState({ name: pipelineName });
        const token = parseState(response);
        if (token) {
            await client.putApprovalResult({
                pipelineName,
                actionName,
                stageName,
                result: {
                    summary: 'No security changes detected. Automatically approved by Lambda.',
                    status: 'Approved',
                },
                token,
            });
            return;
        }
        await sleep(5);
    }
}
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2REFBNkQ7QUFDN0Qsc0VBQTREO0FBRTVELE1BQU0sTUFBTSxHQUFHLElBQUksa0NBQVksQ0FBQyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDO0FBQzlELE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxDQUFDO0FBRTdCLE1BQU0sS0FBSyxHQUFHLENBQUMsT0FBZSxFQUFFLEVBQUU7SUFDaEMsT0FBTyxJQUFJLE9BQU8sQ0FBTyxPQUFPLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDM0UsQ0FBQyxDQUFDO0FBRUssS0FBSyxVQUFVLE9BQU8sQ0FBQyxLQUFVLEVBQUUsUUFBYTtJQUNyRCxNQUFNLEVBQ0osWUFBWSxFQUFFLFlBQVksRUFDMUIsU0FBUyxFQUFFLFNBQVMsRUFDcEIsVUFBVSxFQUFFLFVBQVUsR0FDdkIsR0FBRyxLQUFLLENBQUM7SUFFVixTQUFTLFVBQVUsQ0FBQyxRQUFhO1FBQy9CLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUM7UUFDcEMsTUFBTSxXQUFXLEdBQUcsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsS0FBSyxTQUFTLENBQUMsQ0FBQztRQUMxRSxNQUFNLGNBQWMsR0FBRyxXQUFXLENBQUMsTUFBTTtZQUN2QyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsS0FBSyxVQUFVLENBQUMsQ0FBQztRQUN0RixNQUFNLE1BQU0sR0FBRyxjQUFjLElBQUksY0FBYyxDQUFDLE1BQU07WUFDcEQsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQztRQUVwQyxPQUFPLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0lBQzNDLENBQUM7SUFFRCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsa0JBQWtCLEdBQUcsS0FBSyxDQUFDO0lBQ3pELE9BQU8sSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLFFBQVEsRUFBRTtRQUM1QixNQUFNLFFBQVEsR0FBRyxNQUFNLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZFLE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNuQyxJQUFJLEtBQUssRUFBRTtZQUNULE1BQU0sTUFBTSxDQUFDLGlCQUFpQixDQUFDO2dCQUM3QixZQUFZO2dCQUNaLFVBQVU7Z0JBQ1YsU0FBUztnQkFDVCxNQUFNLEVBQUU7b0JBQ04sT0FBTyxFQUFFLGlFQUFpRTtvQkFDMUUsTUFBTSxFQUFFLFVBQVU7aUJBQ25CO2dCQUNELEtBQUs7YUFDTixDQUFDLENBQUM7WUFDSCxPQUFPO1NBQ1I7UUFDRCxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNoQjtBQUNILENBQUM7QUFyQ0QsMEJBcUNDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1leHRyYW5lb3VzLWRlcGVuZGVuY2llc1xuaW1wb3J0IHsgQ29kZVBpcGVsaW5lIH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWNvZGVwaXBlbGluZSc7XG5cbmNvbnN0IGNsaWVudCA9IG5ldyBDb2RlUGlwZWxpbmUoeyBhcGlWZXJzaW9uOiAnMjAxNS0wNy0wOScgfSk7XG5jb25zdCBUSU1FT1VUX0lOX01JTlVURVMgPSA1O1xuXG5jb25zdCBzbGVlcCA9IChzZWNvbmRzOiBudW1iZXIpID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBzZWNvbmRzICogMTAwMCkpO1xufTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIoZXZlbnQ6IGFueSwgX2NvbnRleHQ6IGFueSkge1xuICBjb25zdCB7XG4gICAgUGlwZWxpbmVOYW1lOiBwaXBlbGluZU5hbWUsXG4gICAgU3RhZ2VOYW1lOiBzdGFnZU5hbWUsXG4gICAgQWN0aW9uTmFtZTogYWN0aW9uTmFtZSxcbiAgfSA9IGV2ZW50O1xuXG4gIGZ1bmN0aW9uIHBhcnNlU3RhdGUocmVzcG9uc2U6IGFueSk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgY29uc3Qgc3RhZ2VzID0gcmVzcG9uc2Uuc3RhZ2VTdGF0ZXM7XG4gICAgY29uc3QgdmFsaWRTdGFnZXMgPSBzdGFnZXM/LmZpbHRlcigoczogYW55KSA9PiBzLnN0YWdlTmFtZSA9PT0gc3RhZ2VOYW1lKTtcbiAgICBjb25zdCBtYW51YWxBcHByb3ZhbCA9IHZhbGlkU3RhZ2VzLmxlbmd0aCAmJlxuICAgICAgdmFsaWRTdGFnZXNbMF0uYWN0aW9uU3RhdGVzLmZpbHRlcigoc3RhdGU6IGFueSkgPT4gc3RhdGUuYWN0aW9uTmFtZSA9PT0gYWN0aW9uTmFtZSk7XG4gICAgY29uc3QgbGF0ZXN0ID0gbWFudWFsQXBwcm92YWwgJiYgbWFudWFsQXBwcm92YWwubGVuZ3RoICYmXG4gICAgICBtYW51YWxBcHByb3ZhbFswXS5sYXRlc3RFeGVjdXRpb247XG5cbiAgICByZXR1cm4gbGF0ZXN0ID8gbGF0ZXN0LnRva2VuIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgY29uc3QgZGVhZGxpbmUgPSBEYXRlLm5vdygpICsgVElNRU9VVF9JTl9NSU5VVEVTICogNjAwMDA7XG4gIHdoaWxlIChEYXRlLm5vdygpIDwgZGVhZGxpbmUpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNsaWVudC5nZXRQaXBlbGluZVN0YXRlKHsgbmFtZTogcGlwZWxpbmVOYW1lIH0pO1xuICAgIGNvbnN0IHRva2VuID0gcGFyc2VTdGF0ZShyZXNwb25zZSk7XG4gICAgaWYgKHRva2VuKSB7XG4gICAgICBhd2FpdCBjbGllbnQucHV0QXBwcm92YWxSZXN1bHQoe1xuICAgICAgICBwaXBlbGluZU5hbWUsXG4gICAgICAgIGFjdGlvbk5hbWUsXG4gICAgICAgIHN0YWdlTmFtZSxcbiAgICAgICAgcmVzdWx0OiB7XG4gICAgICAgICAgc3VtbWFyeTogJ05vIHNlY3VyaXR5IGNoYW5nZXMgZGV0ZWN0ZWQuIEF1dG9tYXRpY2FsbHkgYXBwcm92ZWQgYnkgTGFtYmRhLicsXG4gICAgICAgICAgc3RhdHVzOiAnQXBwcm92ZWQnLFxuICAgICAgICB9LFxuICAgICAgICB0b2tlbixcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhd2FpdCBzbGVlcCg1KTtcbiAgfVxufVxuIl19