"use strict";
// Integration test to deploy some resources, create an alarm on it and create a dashboard.
//
// Because literally every other library is going to depend on @aws-cdk/aws-cloudwatch, we drop down
// to the very lowest level to create CloudFormation resources by hand, without even generated
// library support.
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("aws-cdk-lib");
const integ_tests_alpha_1 = require("@aws-cdk/integ-tests-alpha");
const cloudwatch = require("aws-cdk-lib/aws-cloudwatch");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-cdk-cloudwatch');
const queue = new cdk.CfnResource(stack, 'queue', { type: 'AWS::SQS::Queue' });
const metricA = new cloudwatch.Metric({
    namespace: 'AWS/SQS',
    metricName: 'ApproximateNumberOfMessagesVisible',
    dimensionsMap: { QueueName: queue.getAtt('QueueName').toString() },
    period: cdk.Duration.seconds(10),
    label: 'Visible Messages',
});
const metricB = new cloudwatch.Metric({
    namespace: 'AWS/SQS',
    metricName: 'ApproximateNumberOfMessagesNotVisible',
    dimensionsMap: { QueueName: queue.getAtt('QueueName').toString() },
    period: cdk.Duration.seconds(30),
    label: 'NotVisible Messages',
});
const sumExpression = new cloudwatch.MathExpression({
    expression: 'm1+m2',
    usingMetrics: {
        m1: metricA,
        m2: metricB,
    },
    label: 'Total Messages',
    period: cdk.Duration.minutes(1),
});
const alarm = sumExpression.createAlarm(stack, 'Alarm', {
    threshold: 100,
    evaluationPeriods: 3,
});
const dashboard = new cloudwatch.Dashboard(stack, 'Dash', {
    dashboardName: 'MyMathExpressionDashboardName',
});
dashboard.addWidgets(new cloudwatch.AlarmWidget({
    title: 'Total messages in queue',
    alarm,
}));
dashboard.addWidgets(new cloudwatch.GraphWidget({
    title: 'More total messages in queue with alarm annotation',
    left: [sumExpression],
    right: [metricA, metricB],
    leftAnnotations: [alarm.toAnnotation()],
}));
dashboard.addWidgets(new cloudwatch.GraphWidget({
    title: 'Percentage of messages in each queue as pie chart',
    left: [metricA, metricB],
    view: cloudwatch.GraphWidgetView.PIE,
    setPeriodToTimeRange: true,
}));
dashboard.addWidgets(new cloudwatch.SingleValueWidget({
    title: 'Current total messages in queue',
    metrics: [sumExpression],
}));
new integ_tests_alpha_1.IntegTest(app, 'cdk-integ-math-alarm-and-dashboard', {
    testCases: [stack],
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcubWF0aC1hbGFybS1hbmQtZGFzaGJvYXJkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW50ZWcubWF0aC1hbGFybS1hbmQtZGFzaGJvYXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSwyRkFBMkY7QUFDM0YsRUFBRTtBQUNGLG9HQUFvRztBQUNwRyw4RkFBOEY7QUFDOUYsbUJBQW1COztBQUVuQixtQ0FBbUM7QUFDbkMsa0VBQXVEO0FBQ3ZELHlEQUF5RDtBQUV6RCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUUxQixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLG9CQUFvQixDQUFDLENBQUM7QUFFdkQsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRSxJQUFJLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO0FBRS9FLE1BQU0sT0FBTyxHQUFHLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQztJQUNwQyxTQUFTLEVBQUUsU0FBUztJQUNwQixVQUFVLEVBQUUsb0NBQW9DO0lBQ2hELGFBQWEsRUFBRSxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO0lBQ2xFLE1BQU0sRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7SUFDaEMsS0FBSyxFQUFFLGtCQUFrQjtDQUMxQixDQUFDLENBQUM7QUFFSCxNQUFNLE9BQU8sR0FBRyxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUM7SUFDcEMsU0FBUyxFQUFFLFNBQVM7SUFDcEIsVUFBVSxFQUFFLHVDQUF1QztJQUNuRCxhQUFhLEVBQUUsRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtJQUNsRSxNQUFNLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO0lBQ2hDLEtBQUssRUFBRSxxQkFBcUI7Q0FDN0IsQ0FBQyxDQUFDO0FBRUgsTUFBTSxhQUFhLEdBQUcsSUFBSSxVQUFVLENBQUMsY0FBYyxDQUFDO0lBQ2xELFVBQVUsRUFBRSxPQUFPO0lBQ25CLFlBQVksRUFBRTtRQUNaLEVBQUUsRUFBRSxPQUFPO1FBQ1gsRUFBRSxFQUFFLE9BQU87S0FDWjtJQUNELEtBQUssRUFBRSxnQkFBZ0I7SUFDdkIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztDQUNoQyxDQUFDLENBQUM7QUFFSCxNQUFNLEtBQUssR0FBRyxhQUFhLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUU7SUFDdEQsU0FBUyxFQUFFLEdBQUc7SUFDZCxpQkFBaUIsRUFBRSxDQUFDO0NBQ3JCLENBQUMsQ0FBQztBQUVILE1BQU0sU0FBUyxHQUFHLElBQUksVUFBVSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFO0lBQ3hELGFBQWEsRUFBRSwrQkFBK0I7Q0FDL0MsQ0FBQyxDQUFDO0FBQ0gsU0FBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxXQUFXLENBQUM7SUFDOUMsS0FBSyxFQUFFLHlCQUF5QjtJQUNoQyxLQUFLO0NBQ04sQ0FBQyxDQUFDLENBQUM7QUFFSixTQUFTLENBQUMsVUFBVSxDQUFDLElBQUksVUFBVSxDQUFDLFdBQVcsQ0FBQztJQUM5QyxLQUFLLEVBQUUsb0RBQW9EO0lBQzNELElBQUksRUFBRSxDQUFDLGFBQWEsQ0FBQztJQUNyQixLQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDO0lBQ3pCLGVBQWUsRUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQztDQUN4QyxDQUFDLENBQUMsQ0FBQztBQUVKLFNBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxVQUFVLENBQUMsV0FBVyxDQUFDO0lBQzlDLEtBQUssRUFBRSxtREFBbUQ7SUFDMUQsSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQztJQUN4QixJQUFJLEVBQUUsVUFBVSxDQUFDLGVBQWUsQ0FBQyxHQUFHO0lBQ3BDLG9CQUFvQixFQUFFLElBQUk7Q0FDM0IsQ0FBQyxDQUFDLENBQUM7QUFFSixTQUFTLENBQUMsVUFBVSxDQUFDLElBQUksVUFBVSxDQUFDLGlCQUFpQixDQUFDO0lBQ3BELEtBQUssRUFBRSxpQ0FBaUM7SUFDeEMsT0FBTyxFQUFFLENBQUMsYUFBYSxDQUFDO0NBQ3pCLENBQUMsQ0FBQyxDQUFDO0FBRUosSUFBSSw2QkFBUyxDQUFDLEdBQUcsRUFBRSxvQ0FBb0MsRUFBRTtJQUN2RCxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUM7Q0FDbkIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSW50ZWdyYXRpb24gdGVzdCB0byBkZXBsb3kgc29tZSByZXNvdXJjZXMsIGNyZWF0ZSBhbiBhbGFybSBvbiBpdCBhbmQgY3JlYXRlIGEgZGFzaGJvYXJkLlxuLy9cbi8vIEJlY2F1c2UgbGl0ZXJhbGx5IGV2ZXJ5IG90aGVyIGxpYnJhcnkgaXMgZ29pbmcgdG8gZGVwZW5kIG9uIEBhd3MtY2RrL2F3cy1jbG91ZHdhdGNoLCB3ZSBkcm9wIGRvd25cbi8vIHRvIHRoZSB2ZXJ5IGxvd2VzdCBsZXZlbCB0byBjcmVhdGUgQ2xvdWRGb3JtYXRpb24gcmVzb3VyY2VzIGJ5IGhhbmQsIHdpdGhvdXQgZXZlbiBnZW5lcmF0ZWRcbi8vIGxpYnJhcnkgc3VwcG9ydC5cblxuaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IEludGVnVGVzdCB9IGZyb20gJ0Bhd3MtY2RrL2ludGVnLXRlc3RzLWFscGhhJztcbmltcG9ydCAqIGFzIGNsb3Vkd2F0Y2ggZnJvbSAnYXdzLWNkay1saWIvYXdzLWNsb3Vkd2F0Y2gnO1xuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuXG5jb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soYXBwLCAnYXdzLWNkay1jbG91ZHdhdGNoJyk7XG5cbmNvbnN0IHF1ZXVlID0gbmV3IGNkay5DZm5SZXNvdXJjZShzdGFjaywgJ3F1ZXVlJywgeyB0eXBlOiAnQVdTOjpTUVM6OlF1ZXVlJyB9KTtcblxuY29uc3QgbWV0cmljQSA9IG5ldyBjbG91ZHdhdGNoLk1ldHJpYyh7XG4gIG5hbWVzcGFjZTogJ0FXUy9TUVMnLFxuICBtZXRyaWNOYW1lOiAnQXBwcm94aW1hdGVOdW1iZXJPZk1lc3NhZ2VzVmlzaWJsZScsXG4gIGRpbWVuc2lvbnNNYXA6IHsgUXVldWVOYW1lOiBxdWV1ZS5nZXRBdHQoJ1F1ZXVlTmFtZScpLnRvU3RyaW5nKCkgfSxcbiAgcGVyaW9kOiBjZGsuRHVyYXRpb24uc2Vjb25kcygxMCksXG4gIGxhYmVsOiAnVmlzaWJsZSBNZXNzYWdlcycsXG59KTtcblxuY29uc3QgbWV0cmljQiA9IG5ldyBjbG91ZHdhdGNoLk1ldHJpYyh7XG4gIG5hbWVzcGFjZTogJ0FXUy9TUVMnLFxuICBtZXRyaWNOYW1lOiAnQXBwcm94aW1hdGVOdW1iZXJPZk1lc3NhZ2VzTm90VmlzaWJsZScsXG4gIGRpbWVuc2lvbnNNYXA6IHsgUXVldWVOYW1lOiBxdWV1ZS5nZXRBdHQoJ1F1ZXVlTmFtZScpLnRvU3RyaW5nKCkgfSxcbiAgcGVyaW9kOiBjZGsuRHVyYXRpb24uc2Vjb25kcygzMCksXG4gIGxhYmVsOiAnTm90VmlzaWJsZSBNZXNzYWdlcycsXG59KTtcblxuY29uc3Qgc3VtRXhwcmVzc2lvbiA9IG5ldyBjbG91ZHdhdGNoLk1hdGhFeHByZXNzaW9uKHtcbiAgZXhwcmVzc2lvbjogJ20xK20yJyxcbiAgdXNpbmdNZXRyaWNzOiB7XG4gICAgbTE6IG1ldHJpY0EsXG4gICAgbTI6IG1ldHJpY0IsXG4gIH0sXG4gIGxhYmVsOiAnVG90YWwgTWVzc2FnZXMnLFxuICBwZXJpb2Q6IGNkay5EdXJhdGlvbi5taW51dGVzKDEpLFxufSk7XG5cbmNvbnN0IGFsYXJtID0gc3VtRXhwcmVzc2lvbi5jcmVhdGVBbGFybShzdGFjaywgJ0FsYXJtJywge1xuICB0aHJlc2hvbGQ6IDEwMCxcbiAgZXZhbHVhdGlvblBlcmlvZHM6IDMsXG59KTtcblxuY29uc3QgZGFzaGJvYXJkID0gbmV3IGNsb3Vkd2F0Y2guRGFzaGJvYXJkKHN0YWNrLCAnRGFzaCcsIHtcbiAgZGFzaGJvYXJkTmFtZTogJ015TWF0aEV4cHJlc3Npb25EYXNoYm9hcmROYW1lJyxcbn0pO1xuZGFzaGJvYXJkLmFkZFdpZGdldHMobmV3IGNsb3Vkd2F0Y2guQWxhcm1XaWRnZXQoe1xuICB0aXRsZTogJ1RvdGFsIG1lc3NhZ2VzIGluIHF1ZXVlJyxcbiAgYWxhcm0sXG59KSk7XG5cbmRhc2hib2FyZC5hZGRXaWRnZXRzKG5ldyBjbG91ZHdhdGNoLkdyYXBoV2lkZ2V0KHtcbiAgdGl0bGU6ICdNb3JlIHRvdGFsIG1lc3NhZ2VzIGluIHF1ZXVlIHdpdGggYWxhcm0gYW5ub3RhdGlvbicsXG4gIGxlZnQ6IFtzdW1FeHByZXNzaW9uXSxcbiAgcmlnaHQ6IFttZXRyaWNBLCBtZXRyaWNCXSxcbiAgbGVmdEFubm90YXRpb25zOiBbYWxhcm0udG9Bbm5vdGF0aW9uKCldLFxufSkpO1xuXG5kYXNoYm9hcmQuYWRkV2lkZ2V0cyhuZXcgY2xvdWR3YXRjaC5HcmFwaFdpZGdldCh7XG4gIHRpdGxlOiAnUGVyY2VudGFnZSBvZiBtZXNzYWdlcyBpbiBlYWNoIHF1ZXVlIGFzIHBpZSBjaGFydCcsXG4gIGxlZnQ6IFttZXRyaWNBLCBtZXRyaWNCXSxcbiAgdmlldzogY2xvdWR3YXRjaC5HcmFwaFdpZGdldFZpZXcuUElFLFxuICBzZXRQZXJpb2RUb1RpbWVSYW5nZTogdHJ1ZSxcbn0pKTtcblxuZGFzaGJvYXJkLmFkZFdpZGdldHMobmV3IGNsb3Vkd2F0Y2guU2luZ2xlVmFsdWVXaWRnZXQoe1xuICB0aXRsZTogJ0N1cnJlbnQgdG90YWwgbWVzc2FnZXMgaW4gcXVldWUnLFxuICBtZXRyaWNzOiBbc3VtRXhwcmVzc2lvbl0sXG59KSk7XG5cbm5ldyBJbnRlZ1Rlc3QoYXBwLCAnY2RrLWludGVnLW1hdGgtYWxhcm0tYW5kLWRhc2hib2FyZCcsIHtcbiAgdGVzdENhc2VzOiBbc3RhY2tdLFxufSk7XG4iXX0=