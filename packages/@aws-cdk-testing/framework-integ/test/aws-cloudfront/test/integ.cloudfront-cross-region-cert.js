"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const acm = require("aws-cdk-lib/aws-certificatemanager");
const route53 = require("aws-cdk-lib/aws-route53");
const cdk = require("aws-cdk-lib");
const integ_tests_alpha_1 = require("@aws-cdk/integ-tests-alpha");
const test_origin_1 = require("./test-origin");
const cloudfront = require("aws-cdk-lib/aws-cloudfront");
const account = process.env.CDK_INTEG_ACCOUNT ?? process.env.CDK_DEFAULT_ACCOUNT;
const hostedZoneId = process.env.CDK_INTEG_HOSTED_ZONE_ID ?? process.env.HOSTED_ZONE_ID;
if (!hostedZoneId)
    throw new Error('For this test you must provide your own HostedZoneId as an env var "HOSTED_ZONE_ID"');
const hostedZoneName = process.env.CDK_INTEG_HOSTED_ZONE_NAME ?? process.env.HOSTED_ZONE_NAME;
if (!hostedZoneName)
    throw new Error('For this test you must provide your own HostedZoneName as an env var "HOSTED_ZONE_NAME"');
const domainName = process.env.CDK_INTEG_DOMAIN_NAME ?? process.env.DOMAIN_NAME;
if (!domainName)
    throw new Error('For this test you must provide your own Domain Name as an env var "DOMAIN_NAME"');
const app = new cdk.App({
    treeMetadata: false,
});
const acmStack = new cdk.Stack(app, 'integ-acm-stack', {
    env: {
        region: 'us-east-1',
        account,
    },
    crossRegionReferences: true,
});
const cloudFrontStack = new cdk.Stack(app, 'integ-cloudfront-stack', {
    env: {
        region: 'us-east-2',
        account,
    },
    crossRegionReferences: true,
});
const hostedZone = route53.PublicHostedZone.fromHostedZoneAttributes(acmStack, 'HostedZone', {
    hostedZoneId,
    zoneName: hostedZoneName,
});
const cert = new acm.Certificate(acmStack, 'Cert', {
    domainName,
    validation: acm.CertificateValidation.fromDns(hostedZone),
});
new cloudfront.Distribution(cloudFrontStack, 'Distro', {
    defaultBehavior: { origin: new test_origin_1.TestOrigin(domainName) },
    certificate: cert,
    domainNames: [domainName],
});
new integ_tests_alpha_1.IntegTest(app, 'integ-cloudfront-cross-region-acm', {
    testCases: [cloudFrontStack],
    diffAssets: false,
    enableLookups: true,
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuY2xvdWRmcm9udC1jcm9zcy1yZWdpb24tY2VydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLmNsb3VkZnJvbnQtY3Jvc3MtcmVnaW9uLWNlcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwwREFBMEQ7QUFDMUQsbURBQW1EO0FBQ25ELG1DQUFtQztBQUNuQyxrRUFBdUQ7QUFDdkQsK0NBQTJDO0FBQzNDLHlEQUF5RDtBQUV6RCxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUM7QUFDakYsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQztBQUN4RixJQUFJLENBQUMsWUFBWTtJQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMscUZBQXFGLENBQUMsQ0FBQztBQUMxSCxNQUFNLGNBQWMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLDBCQUEwQixJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUM7QUFDOUYsSUFBSSxDQUFDLGNBQWM7SUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHlGQUF5RixDQUFDLENBQUM7QUFDaEksTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQztBQUNoRixJQUFJLENBQUMsVUFBVTtJQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsaUZBQWlGLENBQUMsQ0FBQztBQUVwSCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUM7SUFDdEIsWUFBWSxFQUFFLEtBQUs7Q0FDcEIsQ0FBQyxDQUFDO0FBQ0gsTUFBTSxRQUFRLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxpQkFBaUIsRUFBRTtJQUNyRCxHQUFHLEVBQUU7UUFDSCxNQUFNLEVBQUUsV0FBVztRQUNuQixPQUFPO0tBQ1I7SUFDRCxxQkFBcUIsRUFBRSxJQUFJO0NBQzVCLENBQUMsQ0FBQztBQUVILE1BQU0sZUFBZSxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsd0JBQXdCLEVBQUU7SUFDbkUsR0FBRyxFQUFFO1FBQ0gsTUFBTSxFQUFFLFdBQVc7UUFDbkIsT0FBTztLQUNSO0lBQ0QscUJBQXFCLEVBQUUsSUFBSTtDQUM1QixDQUFDLENBQUM7QUFHSCxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsd0JBQXdCLENBQUMsUUFBUSxFQUFFLFlBQVksRUFBRTtJQUMzRixZQUFZO0lBQ1osUUFBUSxFQUFFLGNBQWM7Q0FDekIsQ0FBQyxDQUFDO0FBRUgsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUU7SUFDakQsVUFBVTtJQUNWLFVBQVUsRUFBRSxHQUFHLENBQUMscUJBQXFCLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQztDQUMxRCxDQUFDLENBQUM7QUFFSCxJQUFJLFVBQVUsQ0FBQyxZQUFZLENBQUMsZUFBZSxFQUFFLFFBQVEsRUFBRTtJQUNyRCxlQUFlLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSx3QkFBVSxDQUFDLFVBQVUsQ0FBQyxFQUFFO0lBQ3ZELFdBQVcsRUFBRSxJQUFJO0lBQ2pCLFdBQVcsRUFBRSxDQUFDLFVBQVUsQ0FBQztDQUMxQixDQUFDLENBQUM7QUFFSCxJQUFJLDZCQUFTLENBQUMsR0FBRyxFQUFFLG1DQUFtQyxFQUFFO0lBQ3RELFNBQVMsRUFBRSxDQUFDLGVBQWUsQ0FBQztJQUM1QixVQUFVLEVBQUUsS0FBSztJQUNqQixhQUFhLEVBQUUsSUFBSTtDQUNwQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhY20gZnJvbSAnYXdzLWNkay1saWIvYXdzLWNlcnRpZmljYXRlbWFuYWdlcic7XG5pbXBvcnQgKiBhcyByb3V0ZTUzIGZyb20gJ2F3cy1jZGstbGliL2F3cy1yb3V0ZTUzJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBJbnRlZ1Rlc3QgfSBmcm9tICdAYXdzLWNkay9pbnRlZy10ZXN0cy1hbHBoYSc7XG5pbXBvcnQgeyBUZXN0T3JpZ2luIH0gZnJvbSAnLi90ZXN0LW9yaWdpbic7XG5pbXBvcnQgKiBhcyBjbG91ZGZyb250IGZyb20gJ2F3cy1jZGstbGliL2F3cy1jbG91ZGZyb250JztcblxuY29uc3QgYWNjb3VudCA9IHByb2Nlc3MuZW52LkNES19JTlRFR19BQ0NPVU5UID8/IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX0FDQ09VTlQ7XG5jb25zdCBob3N0ZWRab25lSWQgPSBwcm9jZXNzLmVudi5DREtfSU5URUdfSE9TVEVEX1pPTkVfSUQgPz8gcHJvY2Vzcy5lbnYuSE9TVEVEX1pPTkVfSUQ7XG5pZiAoIWhvc3RlZFpvbmVJZCkgdGhyb3cgbmV3IEVycm9yKCdGb3IgdGhpcyB0ZXN0IHlvdSBtdXN0IHByb3ZpZGUgeW91ciBvd24gSG9zdGVkWm9uZUlkIGFzIGFuIGVudiB2YXIgXCJIT1NURURfWk9ORV9JRFwiJyk7XG5jb25zdCBob3N0ZWRab25lTmFtZSA9IHByb2Nlc3MuZW52LkNES19JTlRFR19IT1NURURfWk9ORV9OQU1FID8/IHByb2Nlc3MuZW52LkhPU1RFRF9aT05FX05BTUU7XG5pZiAoIWhvc3RlZFpvbmVOYW1lKSB0aHJvdyBuZXcgRXJyb3IoJ0ZvciB0aGlzIHRlc3QgeW91IG11c3QgcHJvdmlkZSB5b3VyIG93biBIb3N0ZWRab25lTmFtZSBhcyBhbiBlbnYgdmFyIFwiSE9TVEVEX1pPTkVfTkFNRVwiJyk7XG5jb25zdCBkb21haW5OYW1lID0gcHJvY2Vzcy5lbnYuQ0RLX0lOVEVHX0RPTUFJTl9OQU1FID8/IHByb2Nlc3MuZW52LkRPTUFJTl9OQU1FO1xuaWYgKCFkb21haW5OYW1lKSB0aHJvdyBuZXcgRXJyb3IoJ0ZvciB0aGlzIHRlc3QgeW91IG11c3QgcHJvdmlkZSB5b3VyIG93biBEb21haW4gTmFtZSBhcyBhbiBlbnYgdmFyIFwiRE9NQUlOX05BTUVcIicpO1xuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCh7XG4gIHRyZWVNZXRhZGF0YTogZmFsc2UsXG59KTtcbmNvbnN0IGFjbVN0YWNrID0gbmV3IGNkay5TdGFjayhhcHAsICdpbnRlZy1hY20tc3RhY2snLCB7XG4gIGVudjoge1xuICAgIHJlZ2lvbjogJ3VzLWVhc3QtMScsXG4gICAgYWNjb3VudCxcbiAgfSxcbiAgY3Jvc3NSZWdpb25SZWZlcmVuY2VzOiB0cnVlLFxufSk7XG5cbmNvbnN0IGNsb3VkRnJvbnRTdGFjayA9IG5ldyBjZGsuU3RhY2soYXBwLCAnaW50ZWctY2xvdWRmcm9udC1zdGFjaycsIHtcbiAgZW52OiB7XG4gICAgcmVnaW9uOiAndXMtZWFzdC0yJyxcbiAgICBhY2NvdW50LFxuICB9LFxuICBjcm9zc1JlZ2lvblJlZmVyZW5jZXM6IHRydWUsXG59KTtcblxuXG5jb25zdCBob3N0ZWRab25lID0gcm91dGU1My5QdWJsaWNIb3N0ZWRab25lLmZyb21Ib3N0ZWRab25lQXR0cmlidXRlcyhhY21TdGFjaywgJ0hvc3RlZFpvbmUnLCB7XG4gIGhvc3RlZFpvbmVJZCxcbiAgem9uZU5hbWU6IGhvc3RlZFpvbmVOYW1lLFxufSk7XG5cbmNvbnN0IGNlcnQgPSBuZXcgYWNtLkNlcnRpZmljYXRlKGFjbVN0YWNrLCAnQ2VydCcsIHtcbiAgZG9tYWluTmFtZSxcbiAgdmFsaWRhdGlvbjogYWNtLkNlcnRpZmljYXRlVmFsaWRhdGlvbi5mcm9tRG5zKGhvc3RlZFpvbmUpLFxufSk7XG5cbm5ldyBjbG91ZGZyb250LkRpc3RyaWJ1dGlvbihjbG91ZEZyb250U3RhY2ssICdEaXN0cm8nLCB7XG4gIGRlZmF1bHRCZWhhdmlvcjogeyBvcmlnaW46IG5ldyBUZXN0T3JpZ2luKGRvbWFpbk5hbWUpIH0sXG4gIGNlcnRpZmljYXRlOiBjZXJ0LFxuICBkb21haW5OYW1lczogW2RvbWFpbk5hbWVdLFxufSk7XG5cbm5ldyBJbnRlZ1Rlc3QoYXBwLCAnaW50ZWctY2xvdWRmcm9udC1jcm9zcy1yZWdpb24tYWNtJywge1xuICB0ZXN0Q2FzZXM6IFtjbG91ZEZyb250U3RhY2tdLFxuICBkaWZmQXNzZXRzOiBmYWxzZSxcbiAgZW5hYmxlTG9va3VwczogdHJ1ZSxcbn0pO1xuIl19