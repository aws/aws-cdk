"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_route53_1 = require("aws-cdk-lib/aws-route53");
const aws_cdk_lib_1 = require("aws-cdk-lib");
// import { ROUTE53_PATTERNS_USE_CERTIFICATE } from '@aws-cdk/cx-api';
const integ_tests_alpha_1 = require("@aws-cdk/integ-tests-alpha");
const aws_route53_patterns_1 = require("aws-cdk-lib/aws-route53-patterns");
const hostedZoneId = process.env.CDK_INTEG_HOSTED_ZONE_ID ?? process.env.HOSTED_ZONE_ID;
if (!hostedZoneId)
    throw new Error('For this test you must provide your own HostedZoneId as an env var "HOSTED_ZONE_ID"');
const hostedZoneName = process.env.CDK_INTEG_HOSTED_ZONE_NAME ?? process.env.HOSTED_ZONE_NAME;
if (!hostedZoneName)
    throw new Error('For this test you must provide your own HostedZoneName as an env var "HOSTED_ZONE_NAME"');
const domainName = process.env.CDK_INTEG_DOMAIN_NAME ?? process.env.DOMAIN_NAME;
if (!domainName)
    throw new Error('For this test you must provide your own Domain Name as an env var "DOMAIN_NAME"');
const app = new aws_cdk_lib_1.App({
// uncomment this to test the old behavior
// postCliContext: {
//   [ROUTE53_PATTERNS_USE_CERTIFICATE]: false,
// },
});
const testCase = new aws_cdk_lib_1.Stack(app, 'integ-https-redirect', {
    crossRegionReferences: true,
    env: {
        account: process.env.CDK_DEFAULT_ACCOUNT,
        region: 'us-east-2', // specifying region to test cross region functionality
    },
});
const hostedZone = aws_route53_1.PublicHostedZone.fromHostedZoneAttributes(testCase, 'HostedZone', {
    hostedZoneId,
    zoneName: hostedZoneName,
});
new aws_route53_patterns_1.HttpsRedirect(testCase, 'redirect', {
    zone: hostedZone,
    recordNames: [`integ.${hostedZoneName}`],
    targetDomain: 'aws.amazon.com',
});
new integ_tests_alpha_1.IntegTest(app, 'integ-test', {
    testCases: [testCase],
    enableLookups: true,
    stackUpdateWorkflow: false,
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuaG9zdGVkLXJlZGlyZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW50ZWcuaG9zdGVkLXJlZGlyZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEseURBQTJEO0FBQzNELDZDQUF5QztBQUN6QyxzRUFBc0U7QUFDdEUsa0VBQXVEO0FBQ3ZELDJFQUFpRTtBQUNqRSxNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDO0FBQ3hGLElBQUksQ0FBQyxZQUFZO0lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxxRkFBcUYsQ0FBQyxDQUFDO0FBQzFILE1BQU0sY0FBYyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsMEJBQTBCLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQztBQUM5RixJQUFJLENBQUMsY0FBYztJQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMseUZBQXlGLENBQUMsQ0FBQztBQUNoSSxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDO0FBQ2hGLElBQUksQ0FBQyxVQUFVO0lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxpRkFBaUYsQ0FBQyxDQUFDO0FBRXBILE1BQU0sR0FBRyxHQUFHLElBQUksaUJBQUcsQ0FBQztBQUNsQiwwQ0FBMEM7QUFDMUMsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxLQUFLO0NBQ04sQ0FBQyxDQUFDO0FBQ0gsTUFBTSxRQUFRLEdBQUcsSUFBSSxtQkFBSyxDQUFDLEdBQUcsRUFBRSxzQkFBc0IsRUFBRTtJQUN0RCxxQkFBcUIsRUFBRSxJQUFJO0lBQzNCLEdBQUcsRUFBRTtRQUNILE9BQU8sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQjtRQUN4QyxNQUFNLEVBQUUsV0FBVyxFQUFFLHVEQUF1RDtLQUM3RTtDQUNGLENBQUMsQ0FBQztBQUVILE1BQU0sVUFBVSxHQUFHLDhCQUFnQixDQUFDLHdCQUF3QixDQUFDLFFBQVEsRUFBRSxZQUFZLEVBQUU7SUFDbkYsWUFBWTtJQUNaLFFBQVEsRUFBRSxjQUFjO0NBQ3pCLENBQUMsQ0FBQztBQUNILElBQUksb0NBQWEsQ0FBQyxRQUFRLEVBQUUsVUFBVSxFQUFFO0lBQ3RDLElBQUksRUFBRSxVQUFVO0lBQ2hCLFdBQVcsRUFBRSxDQUFDLFNBQVMsY0FBYyxFQUFFLENBQUM7SUFDeEMsWUFBWSxFQUFFLGdCQUFnQjtDQUMvQixDQUFDLENBQUM7QUFFSCxJQUFJLDZCQUFTLENBQUMsR0FBRyxFQUFFLFlBQVksRUFBRTtJQUMvQixTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUM7SUFDckIsYUFBYSxFQUFFLElBQUk7SUFDbkIsbUJBQW1CLEVBQUUsS0FBSztDQUMzQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQdWJsaWNIb3N0ZWRab25lIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLXJvdXRlNTMnO1xuaW1wb3J0IHsgU3RhY2ssIEFwcCB9IGZyb20gJ2F3cy1jZGstbGliJztcbi8vIGltcG9ydCB7IFJPVVRFNTNfUEFUVEVSTlNfVVNFX0NFUlRJRklDQVRFIH0gZnJvbSAnQGF3cy1jZGsvY3gtYXBpJztcbmltcG9ydCB7IEludGVnVGVzdCB9IGZyb20gJ0Bhd3MtY2RrL2ludGVnLXRlc3RzLWFscGhhJztcbmltcG9ydCB7IEh0dHBzUmVkaXJlY3QgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3Mtcm91dGU1My1wYXR0ZXJucyc7XG5jb25zdCBob3N0ZWRab25lSWQgPSBwcm9jZXNzLmVudi5DREtfSU5URUdfSE9TVEVEX1pPTkVfSUQgPz8gcHJvY2Vzcy5lbnYuSE9TVEVEX1pPTkVfSUQ7XG5pZiAoIWhvc3RlZFpvbmVJZCkgdGhyb3cgbmV3IEVycm9yKCdGb3IgdGhpcyB0ZXN0IHlvdSBtdXN0IHByb3ZpZGUgeW91ciBvd24gSG9zdGVkWm9uZUlkIGFzIGFuIGVudiB2YXIgXCJIT1NURURfWk9ORV9JRFwiJyk7XG5jb25zdCBob3N0ZWRab25lTmFtZSA9IHByb2Nlc3MuZW52LkNES19JTlRFR19IT1NURURfWk9ORV9OQU1FID8/IHByb2Nlc3MuZW52LkhPU1RFRF9aT05FX05BTUU7XG5pZiAoIWhvc3RlZFpvbmVOYW1lKSB0aHJvdyBuZXcgRXJyb3IoJ0ZvciB0aGlzIHRlc3QgeW91IG11c3QgcHJvdmlkZSB5b3VyIG93biBIb3N0ZWRab25lTmFtZSBhcyBhbiBlbnYgdmFyIFwiSE9TVEVEX1pPTkVfTkFNRVwiJyk7XG5jb25zdCBkb21haW5OYW1lID0gcHJvY2Vzcy5lbnYuQ0RLX0lOVEVHX0RPTUFJTl9OQU1FID8/IHByb2Nlc3MuZW52LkRPTUFJTl9OQU1FO1xuaWYgKCFkb21haW5OYW1lKSB0aHJvdyBuZXcgRXJyb3IoJ0ZvciB0aGlzIHRlc3QgeW91IG11c3QgcHJvdmlkZSB5b3VyIG93biBEb21haW4gTmFtZSBhcyBhbiBlbnYgdmFyIFwiRE9NQUlOX05BTUVcIicpO1xuXG5jb25zdCBhcHAgPSBuZXcgQXBwKHtcbiAgLy8gdW5jb21tZW50IHRoaXMgdG8gdGVzdCB0aGUgb2xkIGJlaGF2aW9yXG4gIC8vIHBvc3RDbGlDb250ZXh0OiB7XG4gIC8vICAgW1JPVVRFNTNfUEFUVEVSTlNfVVNFX0NFUlRJRklDQVRFXTogZmFsc2UsXG4gIC8vIH0sXG59KTtcbmNvbnN0IHRlc3RDYXNlID0gbmV3IFN0YWNrKGFwcCwgJ2ludGVnLWh0dHBzLXJlZGlyZWN0Jywge1xuICBjcm9zc1JlZ2lvblJlZmVyZW5jZXM6IHRydWUsXG4gIGVudjoge1xuICAgIGFjY291bnQ6IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX0FDQ09VTlQsXG4gICAgcmVnaW9uOiAndXMtZWFzdC0yJywgLy8gc3BlY2lmeWluZyByZWdpb24gdG8gdGVzdCBjcm9zcyByZWdpb24gZnVuY3Rpb25hbGl0eVxuICB9LFxufSk7XG5cbmNvbnN0IGhvc3RlZFpvbmUgPSBQdWJsaWNIb3N0ZWRab25lLmZyb21Ib3N0ZWRab25lQXR0cmlidXRlcyh0ZXN0Q2FzZSwgJ0hvc3RlZFpvbmUnLCB7XG4gIGhvc3RlZFpvbmVJZCxcbiAgem9uZU5hbWU6IGhvc3RlZFpvbmVOYW1lLFxufSk7XG5uZXcgSHR0cHNSZWRpcmVjdCh0ZXN0Q2FzZSwgJ3JlZGlyZWN0Jywge1xuICB6b25lOiBob3N0ZWRab25lLFxuICByZWNvcmROYW1lczogW2BpbnRlZy4ke2hvc3RlZFpvbmVOYW1lfWBdLFxuICB0YXJnZXREb21haW46ICdhd3MuYW1hem9uLmNvbScsXG59KTtcblxubmV3IEludGVnVGVzdChhcHAsICdpbnRlZy10ZXN0Jywge1xuICB0ZXN0Q2FzZXM6IFt0ZXN0Q2FzZV0sXG4gIGVuYWJsZUxvb2t1cHM6IHRydWUsXG4gIHN0YWNrVXBkYXRlV29ya2Zsb3c6IGZhbHNlLFxufSk7XG5cbiJdfQ==