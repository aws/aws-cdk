"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ddb = require("aws-cdk-lib/aws-dynamodb");
const sfn = require("aws-cdk-lib/aws-stepfunctions");
const cdk = require("aws-cdk-lib");
const integ = require("@aws-cdk/integ-tests-alpha");
const tasks = require("aws-cdk-lib/aws-stepfunctions-tasks");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'stringset-after-parallel');
const table = new ddb.Table(stack, 'Table', {
    partitionKey: { name: 'pk', type: ddb.AttributeType.STRING },
    removalPolicy: cdk.RemovalPolicy.DESTROY,
});
const passPK = new sfn.Pass(stack, 'passPK', {
    parameters: { 'pk.$': '$.pk' },
});
const passStringSet = new sfn.Pass(stack, 'PassStringSet', {
    parameters: { 'stringset.$': '$.stringset' },
});
const parallel = new sfn.Parallel(stack, 'Parallel', {
    resultPath: '$',
});
parallel.branch(passPK)
    .branch(passStringSet);
const putItem = new tasks.DynamoPutItem(stack, 'PutItem', {
    table: table,
    item: {
        pk: tasks.DynamoAttributeValue.fromString('$[0].pk'),
        stringset: tasks.DynamoAttributeValue.fromStringSet(sfn.JsonPath.listAt('$[1].stringset')),
    },
});
const definition = sfn.Chain.start(parallel).next(putItem);
new sfn.StateMachine(stack, 'StateMachine', {
    definition: definition,
});
new integ.IntegTest(app, 'StringSetAfterParallel', {
    testCases: [stack],
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuc3RyaW5nc2V0LWFmdGVyLXBhcmFsbGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW50ZWcuc3RyaW5nc2V0LWFmdGVyLXBhcmFsbGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsZ0RBQWdEO0FBQ2hELHFEQUFxRDtBQUNyRCxtQ0FBbUM7QUFDbkMsb0RBQW9EO0FBQ3BELDZEQUE2RDtBQUU3RCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUMxQixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLDBCQUEwQixDQUFDLENBQUM7QUFFN0QsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUU7SUFDMUMsWUFBWSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUU7SUFDNUQsYUFBYSxFQUFFLEdBQUcsQ0FBQyxhQUFhLENBQUMsT0FBTztDQUN6QyxDQUFDLENBQUM7QUFFSCxNQUFNLE1BQU0sR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRTtJQUMzQyxVQUFVLEVBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFO0NBQy9CLENBQUMsQ0FBQztBQUNILE1BQU0sYUFBYSxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsZUFBZSxFQUFFO0lBQ3pELFVBQVUsRUFBRSxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUU7Q0FDN0MsQ0FBQyxDQUFDO0FBRUgsTUFBTSxRQUFRLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUU7SUFDbkQsVUFBVSxFQUFFLEdBQUc7Q0FDaEIsQ0FBQyxDQUFDO0FBQ0gsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7S0FDcEIsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBRXpCLE1BQU0sT0FBTyxHQUFHLElBQUksS0FBSyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFO0lBQ3hELEtBQUssRUFBRSxLQUFLO0lBQ1osSUFBSSxFQUFFO1FBQ0osRUFBRSxFQUFFLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDO1FBQ3BELFNBQVMsRUFBRSxLQUFLLENBQUMsb0JBQW9CLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUM7S0FDM0Y7Q0FDRixDQUFDLENBQUM7QUFFSCxNQUFNLFVBQVUsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFFM0QsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxjQUFjLEVBQUU7SUFDMUMsVUFBVSxFQUFFLFVBQVU7Q0FDdkIsQ0FBQyxDQUFDO0FBRUgsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSx3QkFBd0IsRUFBRTtJQUNqRCxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUM7Q0FDbkIsQ0FBQyxDQUFDO0FBRUgsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZGRiIGZyb20gJ2F3cy1jZGstbGliL2F3cy1keW5hbW9kYic7XG5pbXBvcnQgKiBhcyBzZm4gZnJvbSAnYXdzLWNkay1saWIvYXdzLXN0ZXBmdW5jdGlvbnMnO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCAqIGFzIGludGVnIGZyb20gJ0Bhd3MtY2RrL2ludGVnLXRlc3RzLWFscGhhJztcbmltcG9ydCAqIGFzIHRhc2tzIGZyb20gJ2F3cy1jZGstbGliL2F3cy1zdGVwZnVuY3Rpb25zLXRhc2tzJztcblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcbmNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjayhhcHAsICdzdHJpbmdzZXQtYWZ0ZXItcGFyYWxsZWwnKTtcblxuY29uc3QgdGFibGUgPSBuZXcgZGRiLlRhYmxlKHN0YWNrLCAnVGFibGUnLCB7XG4gIHBhcnRpdGlvbktleTogeyBuYW1lOiAncGsnLCB0eXBlOiBkZGIuQXR0cmlidXRlVHlwZS5TVFJJTkcgfSxcbiAgcmVtb3ZhbFBvbGljeTogY2RrLlJlbW92YWxQb2xpY3kuREVTVFJPWSxcbn0pO1xuXG5jb25zdCBwYXNzUEsgPSBuZXcgc2ZuLlBhc3Moc3RhY2ssICdwYXNzUEsnLCB7XG4gIHBhcmFtZXRlcnM6IHsgJ3BrLiQnOiAnJC5waycgfSxcbn0pO1xuY29uc3QgcGFzc1N0cmluZ1NldCA9IG5ldyBzZm4uUGFzcyhzdGFjaywgJ1Bhc3NTdHJpbmdTZXQnLCB7XG4gIHBhcmFtZXRlcnM6IHsgJ3N0cmluZ3NldC4kJzogJyQuc3RyaW5nc2V0JyB9LFxufSk7XG5cbmNvbnN0IHBhcmFsbGVsID0gbmV3IHNmbi5QYXJhbGxlbChzdGFjaywgJ1BhcmFsbGVsJywge1xuICByZXN1bHRQYXRoOiAnJCcsXG59KTtcbnBhcmFsbGVsLmJyYW5jaChwYXNzUEspXG4gIC5icmFuY2gocGFzc1N0cmluZ1NldCk7XG5cbmNvbnN0IHB1dEl0ZW0gPSBuZXcgdGFza3MuRHluYW1vUHV0SXRlbShzdGFjaywgJ1B1dEl0ZW0nLCB7XG4gIHRhYmxlOiB0YWJsZSxcbiAgaXRlbToge1xuICAgIHBrOiB0YXNrcy5EeW5hbW9BdHRyaWJ1dGVWYWx1ZS5mcm9tU3RyaW5nKCckWzBdLnBrJyksXG4gICAgc3RyaW5nc2V0OiB0YXNrcy5EeW5hbW9BdHRyaWJ1dGVWYWx1ZS5mcm9tU3RyaW5nU2V0KHNmbi5Kc29uUGF0aC5saXN0QXQoJyRbMV0uc3RyaW5nc2V0JykpLFxuICB9LFxufSk7XG5cbmNvbnN0IGRlZmluaXRpb24gPSBzZm4uQ2hhaW4uc3RhcnQocGFyYWxsZWwpLm5leHQocHV0SXRlbSk7XG5cbm5ldyBzZm4uU3RhdGVNYWNoaW5lKHN0YWNrLCAnU3RhdGVNYWNoaW5lJywge1xuICBkZWZpbml0aW9uOiBkZWZpbml0aW9uLFxufSk7XG5cbm5ldyBpbnRlZy5JbnRlZ1Rlc3QoYXBwLCAnU3RyaW5nU2V0QWZ0ZXJQYXJhbGxlbCcsIHtcbiAgdGVzdENhc2VzOiBbc3RhY2tdLFxufSk7XG5cbmFwcC5zeW50aCgpOyJdfQ==