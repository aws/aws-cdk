{
 "Resources": {
  "Ec2ClusterEE43E89D": {
   "Type": "AWS::ECS::Cluster"
  },
  "Ec2ClusterVpc568127F1": {
   "Type": "AWS::EC2::VPC",
   "Properties": {
    "CidrBlock": "10.0.0.0/16",
    "EnableDnsHostnames": true,
    "EnableDnsSupport": true,
    "InstanceTenancy": "default",
    "Tags": [
     {
      "Key": "Name",
      "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/Vpc"
     }
    ]
   }
  },
  "Ec2ClusterVpcPublicSubnet1SubnetD46FD92B": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.0.0/18",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/Vpc/PublicSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "Ec2ClusterVpc568127F1"
    }
   }
  },
  "Ec2ClusterVpcPublicSubnet1RouteTableE30610F5": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/Vpc/PublicSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "Ec2ClusterVpc568127F1"
    }
   }
  },
  "Ec2ClusterVpcPublicSubnet1RouteTableAssociation9C78F646": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "Ec2ClusterVpcPublicSubnet1RouteTableE30610F5"
    },
    "SubnetId": {
     "Ref": "Ec2ClusterVpcPublicSubnet1SubnetD46FD92B"
    }
   }
  },
  "Ec2ClusterVpcPublicSubnet1DefaultRouteC7FBE273": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "Ec2ClusterVpcIGW605638EB"
    },
    "RouteTableId": {
     "Ref": "Ec2ClusterVpcPublicSubnet1RouteTableE30610F5"
    }
   },
   "DependsOn": [
    "Ec2ClusterVpcVPCGW24F3B413"
   ]
  },
  "Ec2ClusterVpcPublicSubnet1EIPD4B5D142": {
   "Type": "AWS::EC2::EIP",
   "Properties": {
    "Domain": "vpc",
    "Tags": [
     {
      "Key": "Name",
      "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/Vpc/PublicSubnet1"
     }
    ]
   }
  },
  "Ec2ClusterVpcPublicSubnet1NATGateway79A8A839": {
   "Type": "AWS::EC2::NatGateway",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Ec2ClusterVpcPublicSubnet1EIPD4B5D142",
      "AllocationId"
     ]
    },
    "SubnetId": {
     "Ref": "Ec2ClusterVpcPublicSubnet1SubnetD46FD92B"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/Vpc/PublicSubnet1"
     }
    ]
   },
   "DependsOn": [
    "Ec2ClusterVpcPublicSubnet1DefaultRouteC7FBE273",
    "Ec2ClusterVpcPublicSubnet1RouteTableAssociation9C78F646"
   ]
  },
  "Ec2ClusterVpcPublicSubnet2Subnet207D9E5E": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      1,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.64.0/18",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/Vpc/PublicSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "Ec2ClusterVpc568127F1"
    }
   }
  },
  "Ec2ClusterVpcPublicSubnet2RouteTable44A09188": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/Vpc/PublicSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "Ec2ClusterVpc568127F1"
    }
   }
  },
  "Ec2ClusterVpcPublicSubnet2RouteTableAssociation7615C6B2": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "Ec2ClusterVpcPublicSubnet2RouteTable44A09188"
    },
    "SubnetId": {
     "Ref": "Ec2ClusterVpcPublicSubnet2Subnet207D9E5E"
    }
   }
  },
  "Ec2ClusterVpcPublicSubnet2DefaultRouteEBA52256": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "Ec2ClusterVpcIGW605638EB"
    },
    "RouteTableId": {
     "Ref": "Ec2ClusterVpcPublicSubnet2RouteTable44A09188"
    }
   },
   "DependsOn": [
    "Ec2ClusterVpcVPCGW24F3B413"
   ]
  },
  "Ec2ClusterVpcPublicSubnet2EIP921925E6": {
   "Type": "AWS::EC2::EIP",
   "Properties": {
    "Domain": "vpc",
    "Tags": [
     {
      "Key": "Name",
      "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/Vpc/PublicSubnet2"
     }
    ]
   }
  },
  "Ec2ClusterVpcPublicSubnet2NATGateway302F96C0": {
   "Type": "AWS::EC2::NatGateway",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Ec2ClusterVpcPublicSubnet2EIP921925E6",
      "AllocationId"
     ]
    },
    "SubnetId": {
     "Ref": "Ec2ClusterVpcPublicSubnet2Subnet207D9E5E"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/Vpc/PublicSubnet2"
     }
    ]
   },
   "DependsOn": [
    "Ec2ClusterVpcPublicSubnet2DefaultRouteEBA52256",
    "Ec2ClusterVpcPublicSubnet2RouteTableAssociation7615C6B2"
   ]
  },
  "Ec2ClusterVpcPrivateSubnet1Subnet0AE9B91E": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.128.0/18",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Private"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Private"
     },
     {
      "Key": "Name",
      "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/Vpc/PrivateSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "Ec2ClusterVpc568127F1"
    }
   }
  },
  "Ec2ClusterVpcPrivateSubnet1RouteTable50D391D1": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/Vpc/PrivateSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "Ec2ClusterVpc568127F1"
    }
   }
  },
  "Ec2ClusterVpcPrivateSubnet1RouteTableAssociation1043DBDA": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "Ec2ClusterVpcPrivateSubnet1RouteTable50D391D1"
    },
    "SubnetId": {
     "Ref": "Ec2ClusterVpcPrivateSubnet1Subnet0AE9B91E"
    }
   }
  },
  "Ec2ClusterVpcPrivateSubnet1DefaultRouteD31A76F0": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId": {
     "Ref": "Ec2ClusterVpcPublicSubnet1NATGateway79A8A839"
    },
    "RouteTableId": {
     "Ref": "Ec2ClusterVpcPrivateSubnet1RouteTable50D391D1"
    }
   }
  },
  "Ec2ClusterVpcPrivateSubnet2Subnet16B68C19": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      1,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.192.0/18",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Private"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Private"
     },
     {
      "Key": "Name",
      "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/Vpc/PrivateSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "Ec2ClusterVpc568127F1"
    }
   }
  },
  "Ec2ClusterVpcPrivateSubnet2RouteTable22B9DAE6": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/Vpc/PrivateSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "Ec2ClusterVpc568127F1"
    }
   }
  },
  "Ec2ClusterVpcPrivateSubnet2RouteTableAssociation3AFD70F4": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "Ec2ClusterVpcPrivateSubnet2RouteTable22B9DAE6"
    },
    "SubnetId": {
     "Ref": "Ec2ClusterVpcPrivateSubnet2Subnet16B68C19"
    }
   }
  },
  "Ec2ClusterVpcPrivateSubnet2DefaultRoute22B3073E": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId": {
     "Ref": "Ec2ClusterVpcPublicSubnet2NATGateway302F96C0"
    },
    "RouteTableId": {
     "Ref": "Ec2ClusterVpcPrivateSubnet2RouteTable22B9DAE6"
    }
   }
  },
  "Ec2ClusterVpcIGW605638EB": {
   "Type": "AWS::EC2::InternetGateway",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/Vpc"
     }
    ]
   }
  },
  "Ec2ClusterVpcVPCGW24F3B413": {
   "Type": "AWS::EC2::VPCGatewayAttachment",
   "Properties": {
    "InternetGatewayId": {
     "Ref": "Ec2ClusterVpcIGW605638EB"
    },
    "VpcId": {
     "Ref": "Ec2ClusterVpc568127F1"
    }
   }
  },
  "Ec2ClusterVpcRestrictDefaultSecurityGroupCustomResource326BF034": {
   "Type": "Custom::VpcRestrictDefaultSG",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E",
      "Arn"
     ]
    },
    "DefaultSecurityGroupId": {
     "Fn::GetAtt": [
      "Ec2ClusterVpc568127F1",
      "DefaultSecurityGroup"
     ]
    },
    "Account": {
     "Ref": "AWS::AccountId"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "Ec2ClusterAutoScalingGroup1InstanceSecurityGroup7EC0AE5C": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/AutoScalingGroup1/InstanceSecurityGroup",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "Tags": [
     {
      "Key": "Name",
      "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/AutoScalingGroup1"
     }
    ],
    "VpcId": {
     "Ref": "Ec2ClusterVpc568127F1"
    }
   }
  },
  "Ec2ClusterAutoScalingGroup1InstanceRole48CD7205": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ec2.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/AutoScalingGroup1"
     }
    ]
   }
  },
  "Ec2ClusterAutoScalingGroup1InstanceRoleDefaultPolicyE4383740": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ecs:DeregisterContainerInstance",
        "ecs:RegisterContainerInstance",
        "ecs:Submit*"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "Ec2ClusterEE43E89D",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "ecs:Poll",
        "ecs:StartTelemetrySession"
       ],
       "Condition": {
        "ArnEquals": {
         "ecs:cluster": {
          "Fn::GetAtt": [
           "Ec2ClusterEE43E89D",
           "Arn"
          ]
         }
        }
       },
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "ecr:GetAuthorizationToken",
        "ecs:DiscoverPollEndpoint",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "Ec2ClusterAutoScalingGroup1InstanceRoleDefaultPolicyE4383740",
    "Roles": [
     {
      "Ref": "Ec2ClusterAutoScalingGroup1InstanceRole48CD7205"
     }
    ]
   }
  },
  "Ec2ClusterAutoScalingGroup1InstanceProfile58B69C2C": {
   "Type": "AWS::IAM::InstanceProfile",
   "Properties": {
    "Roles": [
     {
      "Ref": "Ec2ClusterAutoScalingGroup1InstanceRole48CD7205"
     }
    ]
   }
  },
  "Ec2ClusterAutoScalingGroup1LaunchTemplate95C574D1": {
   "Type": "AWS::EC2::LaunchTemplate",
   "Properties": {
    "LaunchTemplateData": {
     "IamInstanceProfile": {
      "Arn": {
       "Fn::GetAtt": [
        "Ec2ClusterAutoScalingGroup1InstanceProfile58B69C2C",
        "Arn"
       ]
      }
     },
     "ImageId": {
      "Ref": "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter"
     },
     "InstanceType": "t2.micro",
     "Monitoring": {
      "Enabled": false
     },
     "SecurityGroupIds": [
      {
       "Fn::GetAtt": [
        "Ec2ClusterAutoScalingGroup1InstanceSecurityGroup7EC0AE5C",
        "GroupId"
       ]
      }
     ],
     "TagSpecifications": [
      {
       "ResourceType": "instance",
       "Tags": [
        {
         "Key": "Name",
         "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/AutoScalingGroup1/LaunchTemplate"
        }
       ]
      },
      {
       "ResourceType": "volume",
       "Tags": [
        {
         "Key": "Name",
         "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/AutoScalingGroup1/LaunchTemplate"
        }
       ]
      }
     ],
     "UserData": {
      "Fn::Base64": {
       "Fn::Join": [
        "",
        [
         "#!/bin/bash\necho ECS_CLUSTER=",
         {
          "Ref": "Ec2ClusterEE43E89D"
         },
         " >> /etc/ecs/ecs.config\necho ECS_CLUSTER=",
         {
          "Ref": "Ec2ClusterEE43E89D"
         },
         " >> /etc/ecs/ecs.config"
        ]
       ]
      }
     }
    },
    "TagSpecifications": [
     {
      "ResourceType": "launch-template",
      "Tags": [
       {
        "Key": "Name",
        "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/AutoScalingGroup1/LaunchTemplate"
       }
      ]
     }
    ]
   },
   "DependsOn": [
    "Ec2ClusterAutoScalingGroup1InstanceRoleDefaultPolicyE4383740",
    "Ec2ClusterAutoScalingGroup1InstanceRole48CD7205"
   ]
  },
  "Ec2ClusterAutoScalingGroup1ASGE52165B0": {
   "Type": "AWS::AutoScaling::AutoScalingGroup",
   "Properties": {
    "LaunchTemplate": {
     "LaunchTemplateId": {
      "Ref": "Ec2ClusterAutoScalingGroup1LaunchTemplate95C574D1"
     },
     "Version": {
      "Fn::GetAtt": [
       "Ec2ClusterAutoScalingGroup1LaunchTemplate95C574D1",
       "LatestVersionNumber"
      ]
     }
    },
    "MaxSize": "2",
    "MinSize": "1",
    "NewInstancesProtectedFromScaleIn": true,
    "Tags": [
     {
      "Key": "Name",
      "PropagateAtLaunch": true,
      "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/AutoScalingGroup1"
     }
    ],
    "VPCZoneIdentifier": [
     {
      "Ref": "Ec2ClusterVpcPublicSubnet1SubnetD46FD92B"
     },
     {
      "Ref": "Ec2ClusterVpcPublicSubnet2Subnet207D9E5E"
     }
    ]
   },
   "UpdatePolicy": {
    "AutoScalingReplacingUpdate": {
     "WillReplace": true
    },
    "AutoScalingScheduledAction": {
     "IgnoreUnmodifiedGroupSizeProperties": true
    }
   }
  },
  "Ec2ClusterAutoScalingGroup1DrainECSHookFunctionServiceRole4C265B22": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "Tags": [
     {
      "Key": "Name",
      "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/AutoScalingGroup1"
     }
    ]
   }
  },
  "Ec2ClusterAutoScalingGroup1DrainECSHookFunctionServiceRoleDefaultPolicyA40DDE41": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ec2:DescribeHosts",
        "ec2:DescribeInstanceAttribute",
        "ec2:DescribeInstanceStatus",
        "ec2:DescribeInstances"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": "autoscaling:CompleteLifecycleAction",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":autoscaling:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":autoScalingGroup:*:autoScalingGroupName/",
          {
           "Ref": "Ec2ClusterAutoScalingGroup1ASGE52165B0"
          }
         ]
        ]
       }
      },
      {
       "Action": [
        "ecs:DescribeContainerInstances",
        "ecs:DescribeTasks",
        "ecs:ListTasks",
        "ecs:UpdateContainerInstancesState"
       ],
       "Condition": {
        "ArnEquals": {
         "ecs:cluster": {
          "Fn::GetAtt": [
           "Ec2ClusterEE43E89D",
           "Arn"
          ]
         }
        }
       },
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "ecs:ListContainerInstances",
        "ecs:SubmitContainerStateChange",
        "ecs:SubmitTaskStateChange"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "Ec2ClusterEE43E89D",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "Ec2ClusterAutoScalingGroup1DrainECSHookFunctionServiceRoleDefaultPolicyA40DDE41",
    "Roles": [
     {
      "Ref": "Ec2ClusterAutoScalingGroup1DrainECSHookFunctionServiceRole4C265B22"
     }
    ]
   }
  },
  "Ec2ClusterAutoScalingGroup1DrainECSHookFunction575C65C4": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "import boto3, json, os, time\n\necs = boto3.client('ecs')\nautoscaling = boto3.client('autoscaling')\n\n\ndef lambda_handler(event, context):\n  print(json.dumps(dict(event, ResponseURL='...')))\n  cluster = os.environ['CLUSTER']\n  snsTopicArn = event['Records'][0]['Sns']['TopicArn']\n  lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])\n  instance_id = lifecycle_event.get('EC2InstanceId')\n  if not instance_id:\n    print('Got event without EC2InstanceId: %s', json.dumps(dict(event, ResponseURL='...')))\n    return\n\n  instance_arn = container_instance_arn(cluster, instance_id)\n  print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))\n\n  if not instance_arn:\n    return\n\n  task_arns = container_instance_task_arns(cluster, instance_arn)\n\n  if task_arns:\n    print('Instance ARN %s has task ARNs %s' % (instance_arn, ', '.join(task_arns)))\n\n  while has_tasks(cluster, instance_arn, task_arns):\n    time.sleep(10)\n\n  try:\n    print('Terminating instance %s' % instance_id)\n    autoscaling.complete_lifecycle_action(\n        LifecycleActionResult='CONTINUE',\n        **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))\n  except Exception as e:\n    # Lifecycle action may have already completed.\n    print(str(e))\n\n\ndef container_instance_arn(cluster, instance_id):\n  \"\"\"Turn an instance ID into a container instance ARN.\"\"\"\n  arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']\n  if not arns:\n    return None\n  return arns[0]\n\ndef container_instance_task_arns(cluster, instance_arn):\n  \"\"\"Fetch tasks for a container instance ARN.\"\"\"\n  arns = ecs.list_tasks(cluster=cluster, containerInstance=instance_arn)['taskArns']\n  return arns\n\ndef has_tasks(cluster, instance_arn, task_arns):\n  \"\"\"Return True if the instance is running tasks for the given cluster.\"\"\"\n  instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']\n  if not instances:\n    return False\n  instance = instances[0]\n\n  if instance['status'] == 'ACTIVE':\n    # Start draining, then try again later\n    set_container_instance_to_draining(cluster, instance_arn)\n    return True\n\n  task_count = None\n\n  if task_arns:\n    # Fetch details for tasks running on the container instance\n    tasks = ecs.describe_tasks(cluster=cluster, tasks=task_arns)['tasks']\n    if tasks:\n      # Consider any non-stopped tasks as running\n      task_count = sum(task['lastStatus'] != 'STOPPED' for task in tasks) + instance['pendingTasksCount']\n\n  if not task_count:\n    # Fallback to instance task counts if detailed task information is unavailable\n    task_count = instance['runningTasksCount'] + instance['pendingTasksCount']\n\n  print('Instance %s has %s tasks' % (instance_arn, task_count))\n\n  return task_count > 0\n\ndef set_container_instance_to_draining(cluster, instance_arn):\n  ecs.update_container_instances_state(\n      cluster=cluster,\n      containerInstances=[instance_arn], status='DRAINING')\n\n\ndef pick(dct, *keys):\n  \"\"\"Pick a subset of a dict.\"\"\"\n  return {k: v for k, v in dct.items() if k in keys}\n"
    },
    "Environment": {
     "Variables": {
      "CLUSTER": {
       "Ref": "Ec2ClusterEE43E89D"
      }
     }
    },
    "Handler": "index.lambda_handler",
    "Role": {
     "Fn::GetAtt": [
      "Ec2ClusterAutoScalingGroup1DrainECSHookFunctionServiceRole4C265B22",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Tags": [
     {
      "Key": "Name",
      "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/AutoScalingGroup1"
     }
    ],
    "Timeout": 310
   },
   "DependsOn": [
    "Ec2ClusterAutoScalingGroup1DrainECSHookFunctionServiceRoleDefaultPolicyA40DDE41",
    "Ec2ClusterAutoScalingGroup1DrainECSHookFunctionServiceRole4C265B22"
   ]
  },
  "Ec2ClusterAutoScalingGroup1DrainECSHookFunctionLogGroup8E7C82B3": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "Ec2ClusterAutoScalingGroup1DrainECSHookFunction575C65C4"
       }
      ]
     ]
    },
    "RetentionInDays": 731,
    "Tags": [
     {
      "Key": "Name",
      "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/AutoScalingGroup1"
     }
    ]
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "Ec2ClusterAutoScalingGroup1DrainECSHookFunctionAllowInvokeSfnTasksEcsEc2RunTaskCapacityProviderEc2ClusterAutoScalingGroup1LifecycleHookDrainHookTopic9C0C3E4DC6DA7EF1": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "Ec2ClusterAutoScalingGroup1DrainECSHookFunction575C65C4",
      "Arn"
     ]
    },
    "Principal": "sns.amazonaws.com",
    "SourceArn": {
     "Ref": "Ec2ClusterAutoScalingGroup1LifecycleHookDrainHookTopic6A09BCD6"
    }
   }
  },
  "Ec2ClusterAutoScalingGroup1DrainECSHookFunctionTopic1C8026AE": {
   "Type": "AWS::SNS::Subscription",
   "Properties": {
    "Endpoint": {
     "Fn::GetAtt": [
      "Ec2ClusterAutoScalingGroup1DrainECSHookFunction575C65C4",
      "Arn"
     ]
    },
    "Protocol": "lambda",
    "TopicArn": {
     "Ref": "Ec2ClusterAutoScalingGroup1LifecycleHookDrainHookTopic6A09BCD6"
    }
   }
  },
  "Ec2ClusterAutoScalingGroup1LifecycleHookDrainHookTopic6A09BCD6": {
   "Type": "AWS::SNS::Topic",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/AutoScalingGroup1"
     }
    ]
   }
  },
  "Ec2ClusterAutoScalingGroup1LifecycleHookDrainHookRole890DBFC5": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "autoscaling.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/AutoScalingGroup1"
     }
    ]
   }
  },
  "Ec2ClusterAutoScalingGroup1LifecycleHookDrainHookRoleDefaultPolicyDB56D412": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sns:Publish",
       "Effect": "Allow",
       "Resource": {
        "Ref": "Ec2ClusterAutoScalingGroup1LifecycleHookDrainHookTopic6A09BCD6"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "Ec2ClusterAutoScalingGroup1LifecycleHookDrainHookRoleDefaultPolicyDB56D412",
    "Roles": [
     {
      "Ref": "Ec2ClusterAutoScalingGroup1LifecycleHookDrainHookRole890DBFC5"
     }
    ]
   }
  },
  "Ec2ClusterAutoScalingGroup1LifecycleHookDrainHook0A7D2A2B": {
   "Type": "AWS::AutoScaling::LifecycleHook",
   "Properties": {
    "AutoScalingGroupName": {
     "Ref": "Ec2ClusterAutoScalingGroup1ASGE52165B0"
    },
    "DefaultResult": "CONTINUE",
    "HeartbeatTimeout": 300,
    "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
    "NotificationTargetARN": {
     "Ref": "Ec2ClusterAutoScalingGroup1LifecycleHookDrainHookTopic6A09BCD6"
    },
    "RoleARN": {
     "Fn::GetAtt": [
      "Ec2ClusterAutoScalingGroup1LifecycleHookDrainHookRole890DBFC5",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "Ec2ClusterAutoScalingGroup1LifecycleHookDrainHookRoleDefaultPolicyDB56D412",
    "Ec2ClusterAutoScalingGroup1LifecycleHookDrainHookRole890DBFC5"
   ]
  },
  "Ec2ClusterAutoScalingGroup2InstanceSecurityGroup2F95246F": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/AutoScalingGroup2/InstanceSecurityGroup",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "Tags": [
     {
      "Key": "Name",
      "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/AutoScalingGroup2"
     }
    ],
    "VpcId": {
     "Ref": "Ec2ClusterVpc568127F1"
    }
   }
  },
  "Ec2ClusterAutoScalingGroup2InstanceRoleBDC15A26": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ec2.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/AutoScalingGroup2"
     }
    ]
   }
  },
  "Ec2ClusterAutoScalingGroup2InstanceRoleDefaultPolicy95EBD97D": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ecs:DeregisterContainerInstance",
        "ecs:RegisterContainerInstance",
        "ecs:Submit*"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "Ec2ClusterEE43E89D",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "ecs:Poll",
        "ecs:StartTelemetrySession"
       ],
       "Condition": {
        "ArnEquals": {
         "ecs:cluster": {
          "Fn::GetAtt": [
           "Ec2ClusterEE43E89D",
           "Arn"
          ]
         }
        }
       },
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "ecr:GetAuthorizationToken",
        "ecs:DiscoverPollEndpoint",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "Ec2ClusterAutoScalingGroup2InstanceRoleDefaultPolicy95EBD97D",
    "Roles": [
     {
      "Ref": "Ec2ClusterAutoScalingGroup2InstanceRoleBDC15A26"
     }
    ]
   }
  },
  "Ec2ClusterAutoScalingGroup2InstanceProfile526A8A6F": {
   "Type": "AWS::IAM::InstanceProfile",
   "Properties": {
    "Roles": [
     {
      "Ref": "Ec2ClusterAutoScalingGroup2InstanceRoleBDC15A26"
     }
    ]
   }
  },
  "Ec2ClusterAutoScalingGroup2LaunchTemplate1460FF80": {
   "Type": "AWS::EC2::LaunchTemplate",
   "Properties": {
    "LaunchTemplateData": {
     "IamInstanceProfile": {
      "Arn": {
       "Fn::GetAtt": [
        "Ec2ClusterAutoScalingGroup2InstanceProfile526A8A6F",
        "Arn"
       ]
      }
     },
     "ImageId": {
      "Ref": "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter"
     },
     "InstanceType": "t2.micro",
     "Monitoring": {
      "Enabled": false
     },
     "SecurityGroupIds": [
      {
       "Fn::GetAtt": [
        "Ec2ClusterAutoScalingGroup2InstanceSecurityGroup2F95246F",
        "GroupId"
       ]
      }
     ],
     "TagSpecifications": [
      {
       "ResourceType": "instance",
       "Tags": [
        {
         "Key": "Name",
         "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/AutoScalingGroup2/LaunchTemplate"
        }
       ]
      },
      {
       "ResourceType": "volume",
       "Tags": [
        {
         "Key": "Name",
         "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/AutoScalingGroup2/LaunchTemplate"
        }
       ]
      }
     ],
     "UserData": {
      "Fn::Base64": {
       "Fn::Join": [
        "",
        [
         "#!/bin/bash\necho ECS_CLUSTER=",
         {
          "Ref": "Ec2ClusterEE43E89D"
         },
         " >> /etc/ecs/ecs.config\necho ECS_CLUSTER=",
         {
          "Ref": "Ec2ClusterEE43E89D"
         },
         " >> /etc/ecs/ecs.config"
        ]
       ]
      }
     }
    },
    "TagSpecifications": [
     {
      "ResourceType": "launch-template",
      "Tags": [
       {
        "Key": "Name",
        "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/AutoScalingGroup2/LaunchTemplate"
       }
      ]
     }
    ]
   },
   "DependsOn": [
    "Ec2ClusterAutoScalingGroup2InstanceRoleDefaultPolicy95EBD97D",
    "Ec2ClusterAutoScalingGroup2InstanceRoleBDC15A26"
   ]
  },
  "Ec2ClusterAutoScalingGroup2ASGEF542746": {
   "Type": "AWS::AutoScaling::AutoScalingGroup",
   "Properties": {
    "LaunchTemplate": {
     "LaunchTemplateId": {
      "Ref": "Ec2ClusterAutoScalingGroup2LaunchTemplate1460FF80"
     },
     "Version": {
      "Fn::GetAtt": [
       "Ec2ClusterAutoScalingGroup2LaunchTemplate1460FF80",
       "LatestVersionNumber"
      ]
     }
    },
    "MaxSize": "2",
    "MinSize": "1",
    "NewInstancesProtectedFromScaleIn": true,
    "Tags": [
     {
      "Key": "Name",
      "PropagateAtLaunch": true,
      "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/AutoScalingGroup2"
     }
    ],
    "VPCZoneIdentifier": [
     {
      "Ref": "Ec2ClusterVpcPublicSubnet1SubnetD46FD92B"
     },
     {
      "Ref": "Ec2ClusterVpcPublicSubnet2Subnet207D9E5E"
     }
    ]
   },
   "UpdatePolicy": {
    "AutoScalingReplacingUpdate": {
     "WillReplace": true
    },
    "AutoScalingScheduledAction": {
     "IgnoreUnmodifiedGroupSizeProperties": true
    }
   }
  },
  "Ec2ClusterAutoScalingGroup2DrainECSHookFunctionServiceRole3309719B": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "Tags": [
     {
      "Key": "Name",
      "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/AutoScalingGroup2"
     }
    ]
   }
  },
  "Ec2ClusterAutoScalingGroup2DrainECSHookFunctionServiceRoleDefaultPolicyF121A8F3": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ec2:DescribeHosts",
        "ec2:DescribeInstanceAttribute",
        "ec2:DescribeInstanceStatus",
        "ec2:DescribeInstances"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": "autoscaling:CompleteLifecycleAction",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":autoscaling:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":autoScalingGroup:*:autoScalingGroupName/",
          {
           "Ref": "Ec2ClusterAutoScalingGroup2ASGEF542746"
          }
         ]
        ]
       }
      },
      {
       "Action": [
        "ecs:DescribeContainerInstances",
        "ecs:DescribeTasks",
        "ecs:ListTasks",
        "ecs:UpdateContainerInstancesState"
       ],
       "Condition": {
        "ArnEquals": {
         "ecs:cluster": {
          "Fn::GetAtt": [
           "Ec2ClusterEE43E89D",
           "Arn"
          ]
         }
        }
       },
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "ecs:ListContainerInstances",
        "ecs:SubmitContainerStateChange",
        "ecs:SubmitTaskStateChange"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "Ec2ClusterEE43E89D",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "Ec2ClusterAutoScalingGroup2DrainECSHookFunctionServiceRoleDefaultPolicyF121A8F3",
    "Roles": [
     {
      "Ref": "Ec2ClusterAutoScalingGroup2DrainECSHookFunctionServiceRole3309719B"
     }
    ]
   }
  },
  "Ec2ClusterAutoScalingGroup2DrainECSHookFunctionB14ACE58": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "import boto3, json, os, time\n\necs = boto3.client('ecs')\nautoscaling = boto3.client('autoscaling')\n\n\ndef lambda_handler(event, context):\n  print(json.dumps(dict(event, ResponseURL='...')))\n  cluster = os.environ['CLUSTER']\n  snsTopicArn = event['Records'][0]['Sns']['TopicArn']\n  lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])\n  instance_id = lifecycle_event.get('EC2InstanceId')\n  if not instance_id:\n    print('Got event without EC2InstanceId: %s', json.dumps(dict(event, ResponseURL='...')))\n    return\n\n  instance_arn = container_instance_arn(cluster, instance_id)\n  print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))\n\n  if not instance_arn:\n    return\n\n  task_arns = container_instance_task_arns(cluster, instance_arn)\n\n  if task_arns:\n    print('Instance ARN %s has task ARNs %s' % (instance_arn, ', '.join(task_arns)))\n\n  while has_tasks(cluster, instance_arn, task_arns):\n    time.sleep(10)\n\n  try:\n    print('Terminating instance %s' % instance_id)\n    autoscaling.complete_lifecycle_action(\n        LifecycleActionResult='CONTINUE',\n        **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))\n  except Exception as e:\n    # Lifecycle action may have already completed.\n    print(str(e))\n\n\ndef container_instance_arn(cluster, instance_id):\n  \"\"\"Turn an instance ID into a container instance ARN.\"\"\"\n  arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']\n  if not arns:\n    return None\n  return arns[0]\n\ndef container_instance_task_arns(cluster, instance_arn):\n  \"\"\"Fetch tasks for a container instance ARN.\"\"\"\n  arns = ecs.list_tasks(cluster=cluster, containerInstance=instance_arn)['taskArns']\n  return arns\n\ndef has_tasks(cluster, instance_arn, task_arns):\n  \"\"\"Return True if the instance is running tasks for the given cluster.\"\"\"\n  instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']\n  if not instances:\n    return False\n  instance = instances[0]\n\n  if instance['status'] == 'ACTIVE':\n    # Start draining, then try again later\n    set_container_instance_to_draining(cluster, instance_arn)\n    return True\n\n  task_count = None\n\n  if task_arns:\n    # Fetch details for tasks running on the container instance\n    tasks = ecs.describe_tasks(cluster=cluster, tasks=task_arns)['tasks']\n    if tasks:\n      # Consider any non-stopped tasks as running\n      task_count = sum(task['lastStatus'] != 'STOPPED' for task in tasks) + instance['pendingTasksCount']\n\n  if not task_count:\n    # Fallback to instance task counts if detailed task information is unavailable\n    task_count = instance['runningTasksCount'] + instance['pendingTasksCount']\n\n  print('Instance %s has %s tasks' % (instance_arn, task_count))\n\n  return task_count > 0\n\ndef set_container_instance_to_draining(cluster, instance_arn):\n  ecs.update_container_instances_state(\n      cluster=cluster,\n      containerInstances=[instance_arn], status='DRAINING')\n\n\ndef pick(dct, *keys):\n  \"\"\"Pick a subset of a dict.\"\"\"\n  return {k: v for k, v in dct.items() if k in keys}\n"
    },
    "Environment": {
     "Variables": {
      "CLUSTER": {
       "Ref": "Ec2ClusterEE43E89D"
      }
     }
    },
    "Handler": "index.lambda_handler",
    "Role": {
     "Fn::GetAtt": [
      "Ec2ClusterAutoScalingGroup2DrainECSHookFunctionServiceRole3309719B",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Tags": [
     {
      "Key": "Name",
      "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/AutoScalingGroup2"
     }
    ],
    "Timeout": 310
   },
   "DependsOn": [
    "Ec2ClusterAutoScalingGroup2DrainECSHookFunctionServiceRoleDefaultPolicyF121A8F3",
    "Ec2ClusterAutoScalingGroup2DrainECSHookFunctionServiceRole3309719B"
   ]
  },
  "Ec2ClusterAutoScalingGroup2DrainECSHookFunctionLogGroupDEFF7930": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "Ec2ClusterAutoScalingGroup2DrainECSHookFunctionB14ACE58"
       }
      ]
     ]
    },
    "RetentionInDays": 731,
    "Tags": [
     {
      "Key": "Name",
      "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/AutoScalingGroup2"
     }
    ]
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "Ec2ClusterAutoScalingGroup2DrainECSHookFunctionAllowInvokeSfnTasksEcsEc2RunTaskCapacityProviderEc2ClusterAutoScalingGroup2LifecycleHookDrainHookTopic8E657CED98023859": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "Ec2ClusterAutoScalingGroup2DrainECSHookFunctionB14ACE58",
      "Arn"
     ]
    },
    "Principal": "sns.amazonaws.com",
    "SourceArn": {
     "Ref": "Ec2ClusterAutoScalingGroup2LifecycleHookDrainHookTopicBA5314DD"
    }
   }
  },
  "Ec2ClusterAutoScalingGroup2DrainECSHookFunctionTopicFB2FF2A5": {
   "Type": "AWS::SNS::Subscription",
   "Properties": {
    "Endpoint": {
     "Fn::GetAtt": [
      "Ec2ClusterAutoScalingGroup2DrainECSHookFunctionB14ACE58",
      "Arn"
     ]
    },
    "Protocol": "lambda",
    "TopicArn": {
     "Ref": "Ec2ClusterAutoScalingGroup2LifecycleHookDrainHookTopicBA5314DD"
    }
   }
  },
  "Ec2ClusterAutoScalingGroup2LifecycleHookDrainHookTopicBA5314DD": {
   "Type": "AWS::SNS::Topic",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/AutoScalingGroup2"
     }
    ]
   }
  },
  "Ec2ClusterAutoScalingGroup2LifecycleHookDrainHookRole9E32E8F6": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "autoscaling.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "SfnTasksEcsEc2RunTaskCapacityProvider/Ec2Cluster/AutoScalingGroup2"
     }
    ]
   }
  },
  "Ec2ClusterAutoScalingGroup2LifecycleHookDrainHookRoleDefaultPolicyBE67DFF8": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sns:Publish",
       "Effect": "Allow",
       "Resource": {
        "Ref": "Ec2ClusterAutoScalingGroup2LifecycleHookDrainHookTopicBA5314DD"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "Ec2ClusterAutoScalingGroup2LifecycleHookDrainHookRoleDefaultPolicyBE67DFF8",
    "Roles": [
     {
      "Ref": "Ec2ClusterAutoScalingGroup2LifecycleHookDrainHookRole9E32E8F6"
     }
    ]
   }
  },
  "Ec2ClusterAutoScalingGroup2LifecycleHookDrainHook580850A7": {
   "Type": "AWS::AutoScaling::LifecycleHook",
   "Properties": {
    "AutoScalingGroupName": {
     "Ref": "Ec2ClusterAutoScalingGroup2ASGEF542746"
    },
    "DefaultResult": "CONTINUE",
    "HeartbeatTimeout": 300,
    "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
    "NotificationTargetARN": {
     "Ref": "Ec2ClusterAutoScalingGroup2LifecycleHookDrainHookTopicBA5314DD"
    },
    "RoleARN": {
     "Fn::GetAtt": [
      "Ec2ClusterAutoScalingGroup2LifecycleHookDrainHookRole9E32E8F6",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "Ec2ClusterAutoScalingGroup2LifecycleHookDrainHookRoleDefaultPolicyBE67DFF8",
    "Ec2ClusterAutoScalingGroup2LifecycleHookDrainHookRole9E32E8F6"
   ]
  },
  "Ec2Cluster56240A3A": {
   "Type": "AWS::ECS::ClusterCapacityProviderAssociations",
   "Properties": {
    "CapacityProviders": [
     {
      "Ref": "CP1A08C5A07"
     },
     {
      "Ref": "CP238A17852"
     }
    ],
    "Cluster": {
     "Ref": "Ec2ClusterEE43E89D"
    },
    "DefaultCapacityProviderStrategy": [
     {
      "Base": 1,
      "CapacityProvider": {
       "Ref": "CP1A08C5A07"
      },
      "Weight": 1
     },
     {
      "CapacityProvider": {
       "Ref": "CP238A17852"
      },
      "Weight": 2
     }
    ]
   }
  },
  "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ],
    "Policies": [
     {
      "PolicyName": "Inline",
      "PolicyDocument": {
       "Version": "2012-10-17",
       "Statement": [
        {
         "Effect": "Allow",
         "Action": [
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:RevokeSecurityGroupEgress"
         ],
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             "arn:",
             {
              "Ref": "AWS::Partition"
             },
             ":ec2:",
             {
              "Ref": "AWS::Region"
             },
             ":",
             {
              "Ref": "AWS::AccountId"
             },
             ":security-group/",
             {
              "Fn::GetAtt": [
               "Ec2ClusterVpc568127F1",
               "DefaultSecurityGroup"
              ]
             }
            ]
           ]
          }
         ]
        }
       ]
      }
     }
    ]
   }
  },
  "CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "a1acfc2b5f4f6b183fd2bb9863f486bc5edef6a357b355a070d9a0e502df418c.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "__entrypoint__.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0",
      "Arn"
     ]
    },
    "Runtime": "nodejs22.x",
    "Description": "Lambda function for removing all inbound/outbound rules from the VPC default security group"
   },
   "DependsOn": [
    "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0"
   ]
  },
  "CP1A08C5A07": {
   "Type": "AWS::ECS::CapacityProvider",
   "Properties": {
    "AutoScalingGroupProvider": {
     "AutoScalingGroupArn": {
      "Ref": "Ec2ClusterAutoScalingGroup1ASGE52165B0"
     },
     "ManagedScaling": {
      "Status": "ENABLED",
      "TargetCapacity": 100
     },
     "ManagedTerminationProtection": "ENABLED"
    }
   }
  },
  "CP238A17852": {
   "Type": "AWS::ECS::CapacityProvider",
   "Properties": {
    "AutoScalingGroupProvider": {
     "AutoScalingGroupArn": {
      "Ref": "Ec2ClusterAutoScalingGroup2ASGEF542746"
     },
     "ManagedScaling": {
      "Status": "ENABLED",
      "TargetCapacity": 100
     },
     "ManagedTerminationProtection": "ENABLED"
    }
   }
  },
  "TaskDefTaskRole1EDB4A67": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "TaskDef54694570": {
   "Type": "AWS::ECS::TaskDefinition",
   "Properties": {
    "ContainerDefinitions": [
     {
      "Essential": true,
      "Image": {
       "Fn::Sub": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}:cb8db1ca45b29cf8a7db558e2cb31ac823252251ae003dc87318f485c6415d2b"
      },
      "LogConfiguration": {
       "LogDriver": "awslogs",
       "Options": {
        "awslogs-group": {
         "Ref": "TaskDefContainerLogGroupB60E6F44"
        },
        "awslogs-stream-prefix": "EventDemo",
        "awslogs-region": {
         "Ref": "AWS::Region"
        }
       }
      },
      "Memory": 256,
      "Name": "Container"
     }
    ],
    "ExecutionRoleArn": {
     "Fn::GetAtt": [
      "TaskDefExecutionRoleB4775C97",
      "Arn"
     ]
    },
    "Family": "SfnTasksEcsEc2RunTaskCapacityProviderTaskDef53C32B95",
    "NetworkMode": "bridge",
    "RequiresCompatibilities": [
     "EC2"
    ],
    "TaskRoleArn": {
     "Fn::GetAtt": [
      "TaskDefTaskRole1EDB4A67",
      "Arn"
     ]
    }
   }
  },
  "TaskDefContainerLogGroupB60E6F44": {
   "Type": "AWS::Logs::LogGroup",
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "TaskDefExecutionRoleB4775C97": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "TaskDefExecutionRoleDefaultPolicy0DBB737A": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:BatchGetImage",
        "ecr:GetDownloadUrlForLayer"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":ecr:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":repository/",
          {
           "Fn::Sub": "cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}"
          }
         ]
        ]
       }
      },
      {
       "Action": "ecr:GetAuthorizationToken",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "TaskDefContainerLogGroupB60E6F44",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "TaskDefExecutionRoleDefaultPolicy0DBB737A",
    "Roles": [
     {
      "Ref": "TaskDefExecutionRoleB4775C97"
     }
    ]
   }
  },
  "StateMachineRoleB840431D": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "states.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "StateMachineRoleDefaultPolicyDF1E6607": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "ecs:RunTask",
       "Effect": "Allow",
       "Resource": {
        "Ref": "TaskDef54694570"
       }
      },
      {
       "Action": [
        "ecs:DescribeTasks",
        "ecs:StopTask"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": "iam:PassRole",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "TaskDefExecutionRoleB4775C97",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "TaskDefTaskRole1EDB4A67",
          "Arn"
         ]
        }
       ]
      },
      {
       "Action": [
        "events:DescribeRule",
        "events:PutRule",
        "events:PutTargets"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":events:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":rule/StepFunctionsGetEventsForECSTaskRule"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "StateMachineRoleDefaultPolicyDF1E6607",
    "Roles": [
     {
      "Ref": "StateMachineRoleB840431D"
     }
    ]
   }
  },
  "StateMachine2E01A3A5": {
   "Type": "AWS::StepFunctions::StateMachine",
   "Properties": {
    "DefinitionString": {
     "Fn::Join": [
      "",
      [
       "{\"StartAt\":\"Start\",\"States\":{\"Start\":{\"Type\":\"Pass\",\"Result\":{\"SomeKey\":\"SomeValue\"},\"Next\":\"Ec2TaskWithNone\"},\"Ec2TaskWithNone\":{\"Next\":\"Ec2TaskWithCustom\",\"Type\":\"Task\",\"ResultPath\":null,\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::ecs:runTask.sync\",\"Parameters\":{\"Cluster\":\"",
       {
        "Fn::GetAtt": [
         "Ec2ClusterEE43E89D",
         "Arn"
        ]
       },
       "\",\"TaskDefinition\":\"SfnTasksEcsEc2RunTaskCapacityProviderTaskDef53C32B95\",\"Overrides\":{\"ContainerOverrides\":[{\"Name\":\"Container\",\"Environment\":[{\"Name\":\"SOME_KEY\",\"Value.$\":\"$.SomeKey\"}]}]},\"LaunchType\":\"EC2\",\"EnableExecuteCommand\":true}},\"Ec2TaskWithCustom\":{\"Next\":\"Ec2TaskWithDefault\",\"Type\":\"Task\",\"ResultPath\":null,\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::ecs:runTask\",\"Parameters\":{\"Cluster\":\"",
       {
        "Fn::GetAtt": [
         "Ec2ClusterEE43E89D",
         "Arn"
        ]
       },
       "\",\"TaskDefinition\":\"SfnTasksEcsEc2RunTaskCapacityProviderTaskDef53C32B95\",\"CapacityProviderStrategy\":[{\"CapacityProvider\":\"",
       {
        "Ref": "CP1A08C5A07"
       },
       "\",\"Weight\":1,\"Base\":0},{\"CapacityProvider\":\"",
       {
        "Ref": "CP238A17852"
       },
       "\",\"Weight\":2,\"Base\":1}]}},\"Ec2TaskWithDefault\":{\"End\":true,\"Type\":\"Task\",\"ResultPath\":null,\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::ecs:runTask\",\"Parameters\":{\"Cluster\":\"",
       {
        "Fn::GetAtt": [
         "Ec2ClusterEE43E89D",
         "Arn"
        ]
       },
       "\",\"TaskDefinition\":\"SfnTasksEcsEc2RunTaskCapacityProviderTaskDef53C32B95\"}}}}"
      ]
     ]
    },
    "RoleArn": {
     "Fn::GetAtt": [
      "StateMachineRoleB840431D",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "StateMachineRoleDefaultPolicyDF1E6607",
    "StateMachineRoleB840431D"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  }
 },
 "Parameters": {
  "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter": {
   "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
   "Default": "/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id"
  },
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Outputs": {
  "ExportsOutputRefStateMachine2E01A3A5BA46F753": {
   "Value": {
    "Ref": "StateMachine2E01A3A5"
   },
   "Export": {
    "Name": "SfnTasksEcsEc2RunTaskCapacityProvider:ExportsOutputRefStateMachine2E01A3A5BA46F753"
   }
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}