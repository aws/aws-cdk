"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sfn = require("aws-cdk-lib/aws-stepfunctions");
const cdk = require("aws-cdk-lib");
const aws_stepfunctions_tasks_1 = require("aws-cdk-lib/aws-stepfunctions-tasks");
/*
 * Stack verification steps:
 * * aws stepfunctions start-execution --state-machine-arn <deployed state machine arn> : should return execution arn
 * * aws stepfunctions describe-execution --execution-arn <exection-arn generated before> : should return status as SUCCEEDED and a query-execution-id
 * * aws athena get-query-results --query-execution-id <query-execution-id generated before> : should return query results
 */
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-stepfunctions-tasks-athena-get-query-results-integ');
const query = sfn.JsonPath.stringAt('$.queryString');
const startQueryExecutionJob = new aws_stepfunctions_tasks_1.AthenaStartQueryExecution(stack, 'Start Athena Query', {
    queryString: query,
    queryExecutionContext: {
        databaseName: 'mydatabase',
    },
    resultConfiguration: {
        encryptionConfiguration: {
            encryptionOption: aws_stepfunctions_tasks_1.EncryptionOption.S3_MANAGED,
        },
    },
});
const wait = new sfn.Wait(stack, 'Wait', {
    time: sfn.WaitTime.duration(cdk.Duration.seconds(10)),
});
const getQueryResultsJob = new aws_stepfunctions_tasks_1.AthenaGetQueryResults(stack, 'Get Query Results', {
    queryExecutionId: sfn.JsonPath.stringAt('$.QueryExecutionId'),
});
const chain = sfn.Chain
    .start(startQueryExecutionJob)
    .next(wait)
    .next(getQueryResultsJob);
const sm = new sfn.StateMachine(stack, 'StateMachine', {
    definition: chain,
    timeout: cdk.Duration.seconds(30),
});
new cdk.CfnOutput(stack, 'stateMachineArn', {
    value: sm.stateMachineArn,
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuZ2V0LXF1ZXJ5LXJlc3VsdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy5nZXQtcXVlcnktcmVzdWx0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFEQUFxRDtBQUNyRCxtQ0FBbUM7QUFDbkMsaUZBQXlIO0FBRXpIOzs7OztHQUtHO0FBQ0gsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDMUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSx3REFBd0QsQ0FBQyxDQUFDO0FBRTNGLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBRXJELE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxtREFBeUIsQ0FBQyxLQUFLLEVBQUUsb0JBQW9CLEVBQUU7SUFDeEYsV0FBVyxFQUFFLEtBQUs7SUFDbEIscUJBQXFCLEVBQUU7UUFDckIsWUFBWSxFQUFFLFlBQVk7S0FDM0I7SUFDRCxtQkFBbUIsRUFBRTtRQUNuQix1QkFBdUIsRUFBRTtZQUN2QixnQkFBZ0IsRUFBRSwwQ0FBZ0IsQ0FBQyxVQUFVO1NBQzlDO0tBQ0Y7Q0FDRixDQUFDLENBQUM7QUFFSCxNQUFNLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRTtJQUN2QyxJQUFJLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7Q0FDdEQsQ0FBQyxDQUFDO0FBRUgsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLCtDQUFxQixDQUFDLEtBQUssRUFBRSxtQkFBbUIsRUFBRTtJQUMvRSxnQkFBZ0IsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQztDQUM5RCxDQUFDLENBQUM7QUFFSCxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSztLQUNwQixLQUFLLENBQUMsc0JBQXNCLENBQUM7S0FDN0IsSUFBSSxDQUFDLElBQUksQ0FBQztLQUNWLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBRTVCLE1BQU0sRUFBRSxHQUFHLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsY0FBYyxFQUFFO0lBQ3JELFVBQVUsRUFBRSxLQUFLO0lBQ2pCLE9BQU8sRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7Q0FDbEMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxpQkFBaUIsRUFBRTtJQUMxQyxLQUFLLEVBQUUsRUFBRSxDQUFDLGVBQWU7Q0FDMUIsQ0FBQyxDQUFDO0FBR0gsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgc2ZuIGZyb20gJ2F3cy1jZGstbGliL2F3cy1zdGVwZnVuY3Rpb25zJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBBdGhlbmFTdGFydFF1ZXJ5RXhlY3V0aW9uLCBBdGhlbmFHZXRRdWVyeVJlc3VsdHMsIEVuY3J5cHRpb25PcHRpb24gfSBmcm9tICdhd3MtY2RrLWxpYi9hd3Mtc3RlcGZ1bmN0aW9ucy10YXNrcyc7XG5cbi8qXG4gKiBTdGFjayB2ZXJpZmljYXRpb24gc3RlcHM6XG4gKiAqIGF3cyBzdGVwZnVuY3Rpb25zIHN0YXJ0LWV4ZWN1dGlvbiAtLXN0YXRlLW1hY2hpbmUtYXJuIDxkZXBsb3llZCBzdGF0ZSBtYWNoaW5lIGFybj4gOiBzaG91bGQgcmV0dXJuIGV4ZWN1dGlvbiBhcm5cbiAqICogYXdzIHN0ZXBmdW5jdGlvbnMgZGVzY3JpYmUtZXhlY3V0aW9uIC0tZXhlY3V0aW9uLWFybiA8ZXhlY3Rpb24tYXJuIGdlbmVyYXRlZCBiZWZvcmU+IDogc2hvdWxkIHJldHVybiBzdGF0dXMgYXMgU1VDQ0VFREVEIGFuZCBhIHF1ZXJ5LWV4ZWN1dGlvbi1pZFxuICogKiBhd3MgYXRoZW5hIGdldC1xdWVyeS1yZXN1bHRzIC0tcXVlcnktZXhlY3V0aW9uLWlkIDxxdWVyeS1leGVjdXRpb24taWQgZ2VuZXJhdGVkIGJlZm9yZT4gOiBzaG91bGQgcmV0dXJuIHF1ZXJ5IHJlc3VsdHNcbiAqL1xuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcbmNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjayhhcHAsICdhd3Mtc3RlcGZ1bmN0aW9ucy10YXNrcy1hdGhlbmEtZ2V0LXF1ZXJ5LXJlc3VsdHMtaW50ZWcnKTtcblxuY29uc3QgcXVlcnkgPSBzZm4uSnNvblBhdGguc3RyaW5nQXQoJyQucXVlcnlTdHJpbmcnKTtcblxuY29uc3Qgc3RhcnRRdWVyeUV4ZWN1dGlvbkpvYiA9IG5ldyBBdGhlbmFTdGFydFF1ZXJ5RXhlY3V0aW9uKHN0YWNrLCAnU3RhcnQgQXRoZW5hIFF1ZXJ5Jywge1xuICBxdWVyeVN0cmluZzogcXVlcnksXG4gIHF1ZXJ5RXhlY3V0aW9uQ29udGV4dDoge1xuICAgIGRhdGFiYXNlTmFtZTogJ215ZGF0YWJhc2UnLFxuICB9LFxuICByZXN1bHRDb25maWd1cmF0aW9uOiB7XG4gICAgZW5jcnlwdGlvbkNvbmZpZ3VyYXRpb246IHtcbiAgICAgIGVuY3J5cHRpb25PcHRpb246IEVuY3J5cHRpb25PcHRpb24uUzNfTUFOQUdFRCxcbiAgICB9LFxuICB9LFxufSk7XG5cbmNvbnN0IHdhaXQgPSBuZXcgc2ZuLldhaXQoc3RhY2ssICdXYWl0Jywge1xuICB0aW1lOiBzZm4uV2FpdFRpbWUuZHVyYXRpb24oY2RrLkR1cmF0aW9uLnNlY29uZHMoMTApKSxcbn0pO1xuXG5jb25zdCBnZXRRdWVyeVJlc3VsdHNKb2IgPSBuZXcgQXRoZW5hR2V0UXVlcnlSZXN1bHRzKHN0YWNrLCAnR2V0IFF1ZXJ5IFJlc3VsdHMnLCB7XG4gIHF1ZXJ5RXhlY3V0aW9uSWQ6IHNmbi5Kc29uUGF0aC5zdHJpbmdBdCgnJC5RdWVyeUV4ZWN1dGlvbklkJyksXG59KTtcblxuY29uc3QgY2hhaW4gPSBzZm4uQ2hhaW5cbiAgLnN0YXJ0KHN0YXJ0UXVlcnlFeGVjdXRpb25Kb2IpXG4gIC5uZXh0KHdhaXQpXG4gIC5uZXh0KGdldFF1ZXJ5UmVzdWx0c0pvYik7XG5cbmNvbnN0IHNtID0gbmV3IHNmbi5TdGF0ZU1hY2hpbmUoc3RhY2ssICdTdGF0ZU1hY2hpbmUnLCB7XG4gIGRlZmluaXRpb246IGNoYWluLFxuICB0aW1lb3V0OiBjZGsuRHVyYXRpb24uc2Vjb25kcygzMCksXG59KTtcblxubmV3IGNkay5DZm5PdXRwdXQoc3RhY2ssICdzdGF0ZU1hY2hpbmVBcm4nLCB7XG4gIHZhbHVlOiBzbS5zdGF0ZU1hY2hpbmVBcm4sXG59KTtcblxuXG5hcHAuc3ludGgoKTtcbiJdfQ==