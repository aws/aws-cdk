"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sfn = require("aws-cdk-lib/aws-stepfunctions");
const cdk = require("aws-cdk-lib");
const aws_stepfunctions_tasks_1 = require("aws-cdk-lib/aws-stepfunctions-tasks");
/*
 * Stack verification steps:
 * * aws stepfunctions start-execution --state-machine-arn <deployed state machine arn> : should return execution arn
 * * aws stepfunctions describe-execution --execution-arn <exection-arn generated before> : should return status as SUCCEEDED and a query-execution-id
 * * aws athena get-query-execution --query-execution-id <query-execution-id generated before> : should return QueryExecution
 */
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-stepfunctions-tasks-athena-stop-query-execution-integ');
const query = sfn.JsonPath.stringAt('$.queryString');
const startQueryExecutionJob = new aws_stepfunctions_tasks_1.AthenaStartQueryExecution(stack, 'Start Athena Query', {
    queryString: query,
    queryExecutionContext: {
        databaseName: 'mydatabase',
    },
    resultConfiguration: {
        encryptionConfiguration: {
            encryptionOption: aws_stepfunctions_tasks_1.EncryptionOption.S3_MANAGED,
        },
    },
});
const stopQueryExecutionJob = new aws_stepfunctions_tasks_1.AthenaStopQueryExecution(stack, 'Stop Query Execution', {
    queryExecutionId: sfn.JsonPath.stringAt('$.QueryExecutionId'),
});
const chain = sfn.Chain.start(startQueryExecutionJob).next(stopQueryExecutionJob);
const sm = new sfn.StateMachine(stack, 'StateMachine', {
    definition: chain,
    timeout: cdk.Duration.seconds(30),
});
new cdk.CfnOutput(stack, 'stateMachineArn', {
    value: sm.stateMachineArn,
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuc3RvcC1xdWVyeS1leGVjdXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy5zdG9wLXF1ZXJ5LWV4ZWN1dGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFEQUFxRDtBQUNyRCxtQ0FBbUM7QUFDbkMsaUZBQTRIO0FBRTVIOzs7OztHQUtHO0FBQ0gsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDMUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSwyREFBMkQsQ0FBQyxDQUFDO0FBRTlGLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBRXJELE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxtREFBeUIsQ0FBQyxLQUFLLEVBQUUsb0JBQW9CLEVBQUU7SUFDeEYsV0FBVyxFQUFFLEtBQUs7SUFDbEIscUJBQXFCLEVBQUU7UUFDckIsWUFBWSxFQUFFLFlBQVk7S0FDM0I7SUFDRCxtQkFBbUIsRUFBRTtRQUNuQix1QkFBdUIsRUFBRTtZQUN2QixnQkFBZ0IsRUFBRSwwQ0FBZ0IsQ0FBQyxVQUFVO1NBQzlDO0tBQ0Y7Q0FDRixDQUFDLENBQUM7QUFFSCxNQUFNLHFCQUFxQixHQUFHLElBQUksa0RBQXdCLENBQUMsS0FBSyxFQUFFLHNCQUFzQixFQUFFO0lBQ3hGLGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLG9CQUFvQixDQUFDO0NBQzlELENBQUMsQ0FBQztBQUVILE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFFbEYsTUFBTSxFQUFFLEdBQUcsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxjQUFjLEVBQUU7SUFDckQsVUFBVSxFQUFFLEtBQUs7SUFDakIsT0FBTyxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztDQUNsQyxDQUFDLENBQUM7QUFFSCxJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLGlCQUFpQixFQUFFO0lBQzFDLEtBQUssRUFBRSxFQUFFLENBQUMsZUFBZTtDQUMxQixDQUFDLENBQUM7QUFHSCxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBzZm4gZnJvbSAnYXdzLWNkay1saWIvYXdzLXN0ZXBmdW5jdGlvbnMnO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IEF0aGVuYVN0YXJ0UXVlcnlFeGVjdXRpb24sIEF0aGVuYVN0b3BRdWVyeUV4ZWN1dGlvbiwgRW5jcnlwdGlvbk9wdGlvbiB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1zdGVwZnVuY3Rpb25zLXRhc2tzJztcblxuLypcbiAqIFN0YWNrIHZlcmlmaWNhdGlvbiBzdGVwczpcbiAqICogYXdzIHN0ZXBmdW5jdGlvbnMgc3RhcnQtZXhlY3V0aW9uIC0tc3RhdGUtbWFjaGluZS1hcm4gPGRlcGxveWVkIHN0YXRlIG1hY2hpbmUgYXJuPiA6IHNob3VsZCByZXR1cm4gZXhlY3V0aW9uIGFyblxuICogKiBhd3Mgc3RlcGZ1bmN0aW9ucyBkZXNjcmliZS1leGVjdXRpb24gLS1leGVjdXRpb24tYXJuIDxleGVjdGlvbi1hcm4gZ2VuZXJhdGVkIGJlZm9yZT4gOiBzaG91bGQgcmV0dXJuIHN0YXR1cyBhcyBTVUNDRUVERUQgYW5kIGEgcXVlcnktZXhlY3V0aW9uLWlkXG4gKiAqIGF3cyBhdGhlbmEgZ2V0LXF1ZXJ5LWV4ZWN1dGlvbiAtLXF1ZXJ5LWV4ZWN1dGlvbi1pZCA8cXVlcnktZXhlY3V0aW9uLWlkIGdlbmVyYXRlZCBiZWZvcmU+IDogc2hvdWxkIHJldHVybiBRdWVyeUV4ZWN1dGlvblxuICovXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ2F3cy1zdGVwZnVuY3Rpb25zLXRhc2tzLWF0aGVuYS1zdG9wLXF1ZXJ5LWV4ZWN1dGlvbi1pbnRlZycpO1xuXG5jb25zdCBxdWVyeSA9IHNmbi5Kc29uUGF0aC5zdHJpbmdBdCgnJC5xdWVyeVN0cmluZycpO1xuXG5jb25zdCBzdGFydFF1ZXJ5RXhlY3V0aW9uSm9iID0gbmV3IEF0aGVuYVN0YXJ0UXVlcnlFeGVjdXRpb24oc3RhY2ssICdTdGFydCBBdGhlbmEgUXVlcnknLCB7XG4gIHF1ZXJ5U3RyaW5nOiBxdWVyeSxcbiAgcXVlcnlFeGVjdXRpb25Db250ZXh0OiB7XG4gICAgZGF0YWJhc2VOYW1lOiAnbXlkYXRhYmFzZScsXG4gIH0sXG4gIHJlc3VsdENvbmZpZ3VyYXRpb246IHtcbiAgICBlbmNyeXB0aW9uQ29uZmlndXJhdGlvbjoge1xuICAgICAgZW5jcnlwdGlvbk9wdGlvbjogRW5jcnlwdGlvbk9wdGlvbi5TM19NQU5BR0VELFxuICAgIH0sXG4gIH0sXG59KTtcblxuY29uc3Qgc3RvcFF1ZXJ5RXhlY3V0aW9uSm9iID0gbmV3IEF0aGVuYVN0b3BRdWVyeUV4ZWN1dGlvbihzdGFjaywgJ1N0b3AgUXVlcnkgRXhlY3V0aW9uJywge1xuICBxdWVyeUV4ZWN1dGlvbklkOiBzZm4uSnNvblBhdGguc3RyaW5nQXQoJyQuUXVlcnlFeGVjdXRpb25JZCcpLFxufSk7XG5cbmNvbnN0IGNoYWluID0gc2ZuLkNoYWluLnN0YXJ0KHN0YXJ0UXVlcnlFeGVjdXRpb25Kb2IpLm5leHQoc3RvcFF1ZXJ5RXhlY3V0aW9uSm9iKTtcblxuY29uc3Qgc20gPSBuZXcgc2ZuLlN0YXRlTWFjaGluZShzdGFjaywgJ1N0YXRlTWFjaGluZScsIHtcbiAgZGVmaW5pdGlvbjogY2hhaW4sXG4gIHRpbWVvdXQ6IGNkay5EdXJhdGlvbi5zZWNvbmRzKDMwKSxcbn0pO1xuXG5uZXcgY2RrLkNmbk91dHB1dChzdGFjaywgJ3N0YXRlTWFjaGluZUFybicsIHtcbiAgdmFsdWU6IHNtLnN0YXRlTWFjaGluZUFybixcbn0pO1xuXG5cbmFwcC5zeW50aCgpO1xuIl19