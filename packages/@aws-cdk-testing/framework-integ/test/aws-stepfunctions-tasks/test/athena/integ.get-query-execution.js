"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sfn = require("aws-cdk-lib/aws-stepfunctions");
const cdk = require("aws-cdk-lib");
const aws_stepfunctions_tasks_1 = require("aws-cdk-lib/aws-stepfunctions-tasks");
/*
 * Stack verification steps:
 * * aws stepfunctions start-execution --state-machine-arn <deployed state machine arn> : should return execution arn
 * * aws stepfunctions describe-execution --execution-arn <exection-arn generated before> : should return status as SUCCEEDED and a query-execution-id
 * * aws athena get-query-execution --query-execution-id <query-execution-id generated before> : should return QueryExecution
 */
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-stepfunctions-tasks-athena-get-query-execution-integ');
const startQueryExecutionJob = new aws_stepfunctions_tasks_1.AthenaStartQueryExecution(stack, 'Start Athena Query', {
    queryString: sfn.JsonPath.stringAt('$.queryString'),
    queryExecutionContext: {
        databaseName: 'mydatabase',
    },
    resultConfiguration: {
        encryptionConfiguration: {
            encryptionOption: aws_stepfunctions_tasks_1.EncryptionOption.S3_MANAGED,
        },
    },
});
const getQueryExecutionJob = new aws_stepfunctions_tasks_1.AthenaGetQueryExecution(stack, 'Get Query Execution', {
    queryExecutionId: sfn.JsonPath.stringAt('$.QueryExecutionId'),
});
const chain = sfn.Chain.start(startQueryExecutionJob).next(getQueryExecutionJob);
const sm = new sfn.StateMachine(stack, 'StateMachine', {
    definition: chain,
    timeout: cdk.Duration.seconds(30),
});
new cdk.CfnOutput(stack, 'stateMachineArn', {
    value: sm.stateMachineArn,
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuZ2V0LXF1ZXJ5LWV4ZWN1dGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLmdldC1xdWVyeS1leGVjdXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxREFBcUQ7QUFDckQsbUNBQW1DO0FBQ25DLGlGQUEySDtBQUUzSDs7Ozs7R0FLRztBQUNILE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQzFCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsMERBQTBELENBQUMsQ0FBQztBQUU3RixNQUFNLHNCQUFzQixHQUFHLElBQUksbURBQXlCLENBQUMsS0FBSyxFQUFFLG9CQUFvQixFQUFFO0lBQ3hGLFdBQVcsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUM7SUFDbkQscUJBQXFCLEVBQUU7UUFDckIsWUFBWSxFQUFFLFlBQVk7S0FDM0I7SUFDRCxtQkFBbUIsRUFBRTtRQUNuQix1QkFBdUIsRUFBRTtZQUN2QixnQkFBZ0IsRUFBRSwwQ0FBZ0IsQ0FBQyxVQUFVO1NBQzlDO0tBQ0Y7Q0FDRixDQUFDLENBQUM7QUFFSCxNQUFNLG9CQUFvQixHQUFHLElBQUksaURBQXVCLENBQUMsS0FBSyxFQUFFLHFCQUFxQixFQUFFO0lBQ3JGLGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLG9CQUFvQixDQUFDO0NBQzlELENBQUMsQ0FBQztBQUVILE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFFakYsTUFBTSxFQUFFLEdBQUcsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxjQUFjLEVBQUU7SUFDckQsVUFBVSxFQUFFLEtBQUs7SUFDakIsT0FBTyxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztDQUNsQyxDQUFDLENBQUM7QUFFSCxJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLGlCQUFpQixFQUFFO0lBQzFDLEtBQUssRUFBRSxFQUFFLENBQUMsZUFBZTtDQUMxQixDQUFDLENBQUM7QUFHSCxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBzZm4gZnJvbSAnYXdzLWNkay1saWIvYXdzLXN0ZXBmdW5jdGlvbnMnO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IEF0aGVuYVN0YXJ0UXVlcnlFeGVjdXRpb24sIEF0aGVuYUdldFF1ZXJ5RXhlY3V0aW9uLCBFbmNyeXB0aW9uT3B0aW9uIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLXN0ZXBmdW5jdGlvbnMtdGFza3MnO1xuXG4vKlxuICogU3RhY2sgdmVyaWZpY2F0aW9uIHN0ZXBzOlxuICogKiBhd3Mgc3RlcGZ1bmN0aW9ucyBzdGFydC1leGVjdXRpb24gLS1zdGF0ZS1tYWNoaW5lLWFybiA8ZGVwbG95ZWQgc3RhdGUgbWFjaGluZSBhcm4+IDogc2hvdWxkIHJldHVybiBleGVjdXRpb24gYXJuXG4gKiAqIGF3cyBzdGVwZnVuY3Rpb25zIGRlc2NyaWJlLWV4ZWN1dGlvbiAtLWV4ZWN1dGlvbi1hcm4gPGV4ZWN0aW9uLWFybiBnZW5lcmF0ZWQgYmVmb3JlPiA6IHNob3VsZCByZXR1cm4gc3RhdHVzIGFzIFNVQ0NFRURFRCBhbmQgYSBxdWVyeS1leGVjdXRpb24taWRcbiAqICogYXdzIGF0aGVuYSBnZXQtcXVlcnktZXhlY3V0aW9uIC0tcXVlcnktZXhlY3V0aW9uLWlkIDxxdWVyeS1leGVjdXRpb24taWQgZ2VuZXJhdGVkIGJlZm9yZT4gOiBzaG91bGQgcmV0dXJuIFF1ZXJ5RXhlY3V0aW9uXG4gKi9cbmNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG5jb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soYXBwLCAnYXdzLXN0ZXBmdW5jdGlvbnMtdGFza3MtYXRoZW5hLWdldC1xdWVyeS1leGVjdXRpb24taW50ZWcnKTtcblxuY29uc3Qgc3RhcnRRdWVyeUV4ZWN1dGlvbkpvYiA9IG5ldyBBdGhlbmFTdGFydFF1ZXJ5RXhlY3V0aW9uKHN0YWNrLCAnU3RhcnQgQXRoZW5hIFF1ZXJ5Jywge1xuICBxdWVyeVN0cmluZzogc2ZuLkpzb25QYXRoLnN0cmluZ0F0KCckLnF1ZXJ5U3RyaW5nJyksXG4gIHF1ZXJ5RXhlY3V0aW9uQ29udGV4dDoge1xuICAgIGRhdGFiYXNlTmFtZTogJ215ZGF0YWJhc2UnLFxuICB9LFxuICByZXN1bHRDb25maWd1cmF0aW9uOiB7XG4gICAgZW5jcnlwdGlvbkNvbmZpZ3VyYXRpb246IHtcbiAgICAgIGVuY3J5cHRpb25PcHRpb246IEVuY3J5cHRpb25PcHRpb24uUzNfTUFOQUdFRCxcbiAgICB9LFxuICB9LFxufSk7XG5cbmNvbnN0IGdldFF1ZXJ5RXhlY3V0aW9uSm9iID0gbmV3IEF0aGVuYUdldFF1ZXJ5RXhlY3V0aW9uKHN0YWNrLCAnR2V0IFF1ZXJ5IEV4ZWN1dGlvbicsIHtcbiAgcXVlcnlFeGVjdXRpb25JZDogc2ZuLkpzb25QYXRoLnN0cmluZ0F0KCckLlF1ZXJ5RXhlY3V0aW9uSWQnKSxcbn0pO1xuXG5jb25zdCBjaGFpbiA9IHNmbi5DaGFpbi5zdGFydChzdGFydFF1ZXJ5RXhlY3V0aW9uSm9iKS5uZXh0KGdldFF1ZXJ5RXhlY3V0aW9uSm9iKTtcblxuY29uc3Qgc20gPSBuZXcgc2ZuLlN0YXRlTWFjaGluZShzdGFjaywgJ1N0YXRlTWFjaGluZScsIHtcbiAgZGVmaW5pdGlvbjogY2hhaW4sXG4gIHRpbWVvdXQ6IGNkay5EdXJhdGlvbi5zZWNvbmRzKDMwKSxcbn0pO1xuXG5uZXcgY2RrLkNmbk91dHB1dChzdGFjaywgJ3N0YXRlTWFjaGluZUFybicsIHtcbiAgdmFsdWU6IHNtLnN0YXRlTWFjaGluZUFybixcbn0pO1xuXG5cbmFwcC5zeW50aCgpO1xuIl19