"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sfn = require("aws-cdk-lib/aws-stepfunctions");
const cdk = require("aws-cdk-lib");
const integ_tests_alpha_1 = require("@aws-cdk/integ-tests-alpha");
const aws_stepfunctions_tasks_1 = require("aws-cdk-lib/aws-stepfunctions-tasks");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-stepfunctions-tasks-call-aws-service-sfn-integ');
const task = new aws_stepfunctions_tasks_1.CallAwsService(stack, 'SendTaskSuccess', {
    service: 'sfn',
    action: 'sendTaskSuccess',
    iamResources: ['*'],
    parameters: {
        Output: sfn.JsonPath.objectAt('$.output'),
        TaskToken: sfn.JsonPath.stringAt('$.taskToken'),
    },
});
const childStateMachine = new sfn.StateMachine(stack, 'ChildStateMachine', {
    definition: task,
});
const stateMachine = new sfn.StateMachine(stack, 'ParentStateMachine', {
    definition: new aws_stepfunctions_tasks_1.StepFunctionsStartExecution(stack, 'StepFunctionsStartExecution', {
        stateMachine: childStateMachine,
        integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,
        input: sfn.TaskInput.fromObject({
            output: sfn.JsonPath.entirePayload,
            taskToken: sfn.JsonPath.taskToken,
        }),
    }),
});
// THEN
const integ = new integ_tests_alpha_1.IntegTest(app, 'IntegTest', {
    testCases: [stack],
});
const res = integ.assertions.awsApiCall('StepFunctions', 'startExecution', {
    stateMachineArn: stateMachine.stateMachineArn,
});
const executionArn = res.getAttString('executionArn');
integ.assertions.awsApiCall('StepFunctions', 'describeExecution', {
    executionArn,
}).expect(integ_tests_alpha_1.ExpectedResult.objectLike({
    status: 'SUCCEEDED',
})).waitForAssertions({
    totalTimeout: cdk.Duration.seconds(10),
    interval: cdk.Duration.seconds(3),
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuY2FsbC1hd3Mtc2VydmljZS1zZm4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy5jYWxsLWF3cy1zZXJ2aWNlLXNmbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFEQUFxRDtBQUNyRCxtQ0FBbUM7QUFDbkMsa0VBQXVFO0FBQ3ZFLGlGQUFrRztBQUVsRyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUMxQixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLG9EQUFvRCxDQUFDLENBQUM7QUFFdkYsTUFBTSxJQUFJLEdBQUcsSUFBSSx3Q0FBYyxDQUFDLEtBQUssRUFBRSxpQkFBaUIsRUFBRTtJQUN4RCxPQUFPLEVBQUUsS0FBSztJQUNkLE1BQU0sRUFBRSxpQkFBaUI7SUFDekIsWUFBWSxFQUFFLENBQUMsR0FBRyxDQUFDO0lBQ25CLFVBQVUsRUFBRTtRQUNWLE1BQU0sRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUM7UUFDekMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQztLQUNoRDtDQUNGLENBQUMsQ0FBQztBQUVILE1BQU0saUJBQWlCLEdBQUcsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxtQkFBbUIsRUFBRTtJQUN6RSxVQUFVLEVBQUUsSUFBSTtDQUNqQixDQUFDLENBQUM7QUFFSCxNQUFNLFlBQVksR0FBRyxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLG9CQUFvQixFQUFFO0lBQ3JFLFVBQVUsRUFBRSxJQUFJLHFEQUEyQixDQUFDLEtBQUssRUFBRSw2QkFBNkIsRUFBRTtRQUNoRixZQUFZLEVBQUUsaUJBQWlCO1FBQy9CLGtCQUFrQixFQUFFLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxtQkFBbUI7UUFDOUQsS0FBSyxFQUFFLEdBQUcsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO1lBQzlCLE1BQU0sRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLGFBQWE7WUFDbEMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsU0FBUztTQUNsQyxDQUFDO0tBQ0gsQ0FBQztDQUNILENBQUMsQ0FBQztBQUVILE9BQU87QUFDUCxNQUFNLEtBQUssR0FBRyxJQUFJLDZCQUFTLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRTtJQUM1QyxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUM7Q0FDbkIsQ0FBQyxDQUFDO0FBQ0gsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLGdCQUFnQixFQUFFO0lBQ3pFLGVBQWUsRUFBRSxZQUFZLENBQUMsZUFBZTtDQUM5QyxDQUFDLENBQUM7QUFDSCxNQUFNLFlBQVksR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3RELEtBQUssQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxtQkFBbUIsRUFBRTtJQUNoRSxZQUFZO0NBQ2IsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxrQ0FBYyxDQUFDLFVBQVUsQ0FBQztJQUNsQyxNQUFNLEVBQUUsV0FBVztDQUNwQixDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQztJQUNwQixZQUFZLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO0lBQ3RDLFFBQVEsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Q0FDbEMsQ0FBQyxDQUFDO0FBRUgsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgc2ZuIGZyb20gJ2F3cy1jZGstbGliL2F3cy1zdGVwZnVuY3Rpb25zJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBJbnRlZ1Rlc3QsIEV4cGVjdGVkUmVzdWx0IH0gZnJvbSAnQGF3cy1jZGsvaW50ZWctdGVzdHMtYWxwaGEnO1xuaW1wb3J0IHsgQ2FsbEF3c1NlcnZpY2UsIFN0ZXBGdW5jdGlvbnNTdGFydEV4ZWN1dGlvbiB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1zdGVwZnVuY3Rpb25zLXRhc2tzJztcblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcbmNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjayhhcHAsICdhd3Mtc3RlcGZ1bmN0aW9ucy10YXNrcy1jYWxsLWF3cy1zZXJ2aWNlLXNmbi1pbnRlZycpO1xuXG5jb25zdCB0YXNrID0gbmV3IENhbGxBd3NTZXJ2aWNlKHN0YWNrLCAnU2VuZFRhc2tTdWNjZXNzJywge1xuICBzZXJ2aWNlOiAnc2ZuJyxcbiAgYWN0aW9uOiAnc2VuZFRhc2tTdWNjZXNzJyxcbiAgaWFtUmVzb3VyY2VzOiBbJyonXSxcbiAgcGFyYW1ldGVyczoge1xuICAgIE91dHB1dDogc2ZuLkpzb25QYXRoLm9iamVjdEF0KCckLm91dHB1dCcpLFxuICAgIFRhc2tUb2tlbjogc2ZuLkpzb25QYXRoLnN0cmluZ0F0KCckLnRhc2tUb2tlbicpLFxuICB9LFxufSk7XG5cbmNvbnN0IGNoaWxkU3RhdGVNYWNoaW5lID0gbmV3IHNmbi5TdGF0ZU1hY2hpbmUoc3RhY2ssICdDaGlsZFN0YXRlTWFjaGluZScsIHtcbiAgZGVmaW5pdGlvbjogdGFzayxcbn0pO1xuXG5jb25zdCBzdGF0ZU1hY2hpbmUgPSBuZXcgc2ZuLlN0YXRlTWFjaGluZShzdGFjaywgJ1BhcmVudFN0YXRlTWFjaGluZScsIHtcbiAgZGVmaW5pdGlvbjogbmV3IFN0ZXBGdW5jdGlvbnNTdGFydEV4ZWN1dGlvbihzdGFjaywgJ1N0ZXBGdW5jdGlvbnNTdGFydEV4ZWN1dGlvbicsIHtcbiAgICBzdGF0ZU1hY2hpbmU6IGNoaWxkU3RhdGVNYWNoaW5lLFxuICAgIGludGVncmF0aW9uUGF0dGVybjogc2ZuLkludGVncmF0aW9uUGF0dGVybi5XQUlUX0ZPUl9UQVNLX1RPS0VOLFxuICAgIGlucHV0OiBzZm4uVGFza0lucHV0LmZyb21PYmplY3Qoe1xuICAgICAgb3V0cHV0OiBzZm4uSnNvblBhdGguZW50aXJlUGF5bG9hZCxcbiAgICAgIHRhc2tUb2tlbjogc2ZuLkpzb25QYXRoLnRhc2tUb2tlbixcbiAgICB9KSxcbiAgfSksXG59KTtcblxuLy8gVEhFTlxuY29uc3QgaW50ZWcgPSBuZXcgSW50ZWdUZXN0KGFwcCwgJ0ludGVnVGVzdCcsIHtcbiAgdGVzdENhc2VzOiBbc3RhY2tdLFxufSk7XG5jb25zdCByZXMgPSBpbnRlZy5hc3NlcnRpb25zLmF3c0FwaUNhbGwoJ1N0ZXBGdW5jdGlvbnMnLCAnc3RhcnRFeGVjdXRpb24nLCB7XG4gIHN0YXRlTWFjaGluZUFybjogc3RhdGVNYWNoaW5lLnN0YXRlTWFjaGluZUFybixcbn0pO1xuY29uc3QgZXhlY3V0aW9uQXJuID0gcmVzLmdldEF0dFN0cmluZygnZXhlY3V0aW9uQXJuJyk7XG5pbnRlZy5hc3NlcnRpb25zLmF3c0FwaUNhbGwoJ1N0ZXBGdW5jdGlvbnMnLCAnZGVzY3JpYmVFeGVjdXRpb24nLCB7XG4gIGV4ZWN1dGlvbkFybixcbn0pLmV4cGVjdChFeHBlY3RlZFJlc3VsdC5vYmplY3RMaWtlKHtcbiAgc3RhdHVzOiAnU1VDQ0VFREVEJyxcbn0pKS53YWl0Rm9yQXNzZXJ0aW9ucyh7XG4gIHRvdGFsVGltZW91dDogY2RrLkR1cmF0aW9uLnNlY29uZHMoMTApLFxuICBpbnRlcnZhbDogY2RrLkR1cmF0aW9uLnNlY29uZHMoMyksXG59KTtcblxuYXBwLnN5bnRoKCk7XG4iXX0=