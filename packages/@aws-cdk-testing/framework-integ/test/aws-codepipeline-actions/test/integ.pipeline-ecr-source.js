"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const codepipeline = require("aws-cdk-lib/aws-codepipeline");
const ecr = require("aws-cdk-lib/aws-ecr");
const s3 = require("aws-cdk-lib/aws-s3");
const cdk = require("aws-cdk-lib");
const integ_tests_alpha_1 = require("@aws-cdk/integ-tests-alpha");
const cpactions = require("aws-cdk-lib/aws-codepipeline-actions");
/**
 * Manual validation steps
 *
 * Run test with `-vv` so that the outputs are printed and
 * `--no-clean` flag so that the stack is not deleted after the deployment is complete
 *
 * You should see output like:
 *
 * Outputs:
 * aws-cdk-codepipeline-ecr-source.PipelineConsoleLink = https://us-east-1.console.aws.amazon.com/codesuite/codepipeline/pipelines/aws-cdk-codepipeline-ecr-source-MyPipelineAED38ECF-1P0OYRLWF8FHY/view?region=us-east-1
 * aws-cdk-codepipeline-ecr-source.LoginCommand = aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 11111111111.dkr.ecr.us-east-1.amazonaws.com
 * aws-cdk-codepipeline-ecr-source.PushCommand = docker tag public.ecr.aws/lambda/provided 11111111111.dkr.ecr.us-east-1.amazonaws.com/aws-cdk-codepipeline-ecr-source-myecrrepo767466d0-gsrntpvfwc5w:latest \
 * && docker push 11111111111.dkr.ecr.us-east-1.amazonaws.com/aws-cdk-codepipeline-ecr-source-myecrrepo767466d0-gsrntpvfwc5w:latest
 *
 * Run the LoginCommand & PushCommand to tag and push an image to the ECR repository.
 * Then use the PipelineConsoleLink to navigate to the pipeline console page to validate that the pipeline
 * was triggered successfully.
 */
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-cdk-codepipeline-ecr-source');
const bucket = new s3.Bucket(stack, 'MyBucket', {
    removalPolicy: cdk.RemovalPolicy.DESTROY,
});
const pipeline = new codepipeline.Pipeline(stack, 'MyPipeline', {
    artifactBucket: bucket,
});
const repository = new ecr.Repository(stack, 'MyEcrRepo', {
    removalPolicy: cdk.RemovalPolicy.DESTROY,
});
const sourceStage = pipeline.addStage({ stageName: 'Source' });
sourceStage.addAction(new cpactions.EcrSourceAction({
    actionName: 'ECR_Source',
    output: new codepipeline.Artifact(),
    repository,
}));
const approveStage = pipeline.addStage({ stageName: 'Approve' });
approveStage.addAction(new cpactions.ManualApprovalAction({ actionName: 'ManualApproval' }));
new cdk.CfnOutput(stack, 'LoginCommand', {
    value: `aws ecr get-login-password --region ${stack.region} | docker login --username AWS --password-stdin ${stack.account}.dkr.ecr.${stack.region}.amazonaws.com`,
});
new cdk.CfnOutput(stack, 'PushCommand', {
    value: `docker tag public.ecr.aws/lambda/provided ${repository.repositoryUriForTag('latest')} && docker push ${repository.repositoryUriForTag('latest')}`,
});
new cdk.CfnOutput(stack, 'PipelineConsoleLink', {
    value: `https://${stack.region}.console.aws.amazon.com/codesuite/codepipeline/pipelines/${pipeline.pipelineName}/view?region=${stack.region}`,
});
new integ_tests_alpha_1.IntegTest(app, 'ecr-source-action', {
    testCases: [stack],
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcucGlwZWxpbmUtZWNyLXNvdXJjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLnBpcGVsaW5lLWVjci1zb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2REFBNkQ7QUFDN0QsMkNBQTJDO0FBQzNDLHlDQUF5QztBQUN6QyxtQ0FBbUM7QUFDbkMsa0VBQXVEO0FBQ3ZELGtFQUFrRTtBQUVsRTs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7QUFFSCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUUxQixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLGlDQUFpQyxDQUFDLENBQUM7QUFFcEUsTUFBTSxNQUFNLEdBQUcsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUU7SUFDOUMsYUFBYSxFQUFFLEdBQUcsQ0FBQyxhQUFhLENBQUMsT0FBTztDQUN6QyxDQUFDLENBQUM7QUFDSCxNQUFNLFFBQVEsR0FBRyxJQUFJLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRTtJQUM5RCxjQUFjLEVBQUUsTUFBTTtDQUN2QixDQUFDLENBQUM7QUFFSCxNQUFNLFVBQVUsR0FBRyxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRTtJQUN4RCxhQUFhLEVBQUUsR0FBRyxDQUFDLGFBQWEsQ0FBQyxPQUFPO0NBQ3pDLENBQUMsQ0FBQztBQUNILE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvRCxXQUFXLENBQUMsU0FBUyxDQUFDLElBQUksU0FBUyxDQUFDLGVBQWUsQ0FBQztJQUNsRCxVQUFVLEVBQUUsWUFBWTtJQUN4QixNQUFNLEVBQUUsSUFBSSxZQUFZLENBQUMsUUFBUSxFQUFFO0lBQ25DLFVBQVU7Q0FDWCxDQUFDLENBQUMsQ0FBQztBQUVKLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztBQUNqRSxZQUFZLENBQUMsU0FBUyxDQUFDLElBQUksU0FBUyxDQUFDLG9CQUFvQixDQUFDLEVBQUUsVUFBVSxFQUFFLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxDQUFDO0FBRTdGLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsY0FBYyxFQUFFO0lBQ3ZDLEtBQUssRUFBRSx1Q0FBdUMsS0FBSyxDQUFDLE1BQU0sbURBQW1ELEtBQUssQ0FBQyxPQUFPLFlBQVksS0FBSyxDQUFDLE1BQU0sZ0JBQWdCO0NBQ25LLENBQUMsQ0FBQztBQUVILElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsYUFBYSxFQUFFO0lBQ3RDLEtBQUssRUFBRSw2Q0FBNkMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsVUFBVSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxFQUFFO0NBQzFKLENBQUMsQ0FBQztBQUVILElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUscUJBQXFCLEVBQUU7SUFDOUMsS0FBSyxFQUFFLFdBQVcsS0FBSyxDQUFDLE1BQU0sNERBQTRELFFBQVEsQ0FBQyxZQUFZLGdCQUFnQixLQUFLLENBQUMsTUFBTSxFQUFFO0NBQzlJLENBQUMsQ0FBQztBQUVILElBQUksNkJBQVMsQ0FBQyxHQUFHLEVBQUUsbUJBQW1CLEVBQUU7SUFDdEMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDO0NBQ25CLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNvZGVwaXBlbGluZSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtY29kZXBpcGVsaW5lJztcbmltcG9ydCAqIGFzIGVjciBmcm9tICdhd3MtY2RrLWxpYi9hd3MtZWNyJztcbmltcG9ydCAqIGFzIHMzIGZyb20gJ2F3cy1jZGstbGliL2F3cy1zMyc7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgSW50ZWdUZXN0IH0gZnJvbSAnQGF3cy1jZGsvaW50ZWctdGVzdHMtYWxwaGEnO1xuaW1wb3J0ICogYXMgY3BhY3Rpb25zIGZyb20gJ2F3cy1jZGstbGliL2F3cy1jb2RlcGlwZWxpbmUtYWN0aW9ucyc7XG5cbi8qKlxuICogTWFudWFsIHZhbGlkYXRpb24gc3RlcHNcbiAqXG4gKiBSdW4gdGVzdCB3aXRoIGAtdnZgIHNvIHRoYXQgdGhlIG91dHB1dHMgYXJlIHByaW50ZWQgYW5kXG4gKiBgLS1uby1jbGVhbmAgZmxhZyBzbyB0aGF0IHRoZSBzdGFjayBpcyBub3QgZGVsZXRlZCBhZnRlciB0aGUgZGVwbG95bWVudCBpcyBjb21wbGV0ZVxuICpcbiAqIFlvdSBzaG91bGQgc2VlIG91dHB1dCBsaWtlOlxuICpcbiAqIE91dHB1dHM6XG4gKiBhd3MtY2RrLWNvZGVwaXBlbGluZS1lY3Itc291cmNlLlBpcGVsaW5lQ29uc29sZUxpbmsgPSBodHRwczovL3VzLWVhc3QtMS5jb25zb2xlLmF3cy5hbWF6b24uY29tL2NvZGVzdWl0ZS9jb2RlcGlwZWxpbmUvcGlwZWxpbmVzL2F3cy1jZGstY29kZXBpcGVsaW5lLWVjci1zb3VyY2UtTXlQaXBlbGluZUFFRDM4RUNGLTFQME9ZUkxXRjhGSFkvdmlldz9yZWdpb249dXMtZWFzdC0xXG4gKiBhd3MtY2RrLWNvZGVwaXBlbGluZS1lY3Itc291cmNlLkxvZ2luQ29tbWFuZCA9IGF3cyBlY3IgZ2V0LWxvZ2luLXBhc3N3b3JkIC0tcmVnaW9uIHVzLWVhc3QtMSB8IGRvY2tlciBsb2dpbiAtLXVzZXJuYW1lIEFXUyAtLXBhc3N3b3JkLXN0ZGluIDExMTExMTExMTExLmRrci5lY3IudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cbiAqIGF3cy1jZGstY29kZXBpcGVsaW5lLWVjci1zb3VyY2UuUHVzaENvbW1hbmQgPSBkb2NrZXIgdGFnIHB1YmxpYy5lY3IuYXdzL2xhbWJkYS9wcm92aWRlZCAxMTExMTExMTExMS5ka3IuZWNyLnVzLWVhc3QtMS5hbWF6b25hd3MuY29tL2F3cy1jZGstY29kZXBpcGVsaW5lLWVjci1zb3VyY2UtbXllY3JyZXBvNzY3NDY2ZDAtZ3NybnRwdmZ3YzV3OmxhdGVzdCBcXFxuICogJiYgZG9ja2VyIHB1c2ggMTExMTExMTExMTEuZGtyLmVjci51cy1lYXN0LTEuYW1hem9uYXdzLmNvbS9hd3MtY2RrLWNvZGVwaXBlbGluZS1lY3Itc291cmNlLW15ZWNycmVwbzc2NzQ2NmQwLWdzcm50cHZmd2M1dzpsYXRlc3RcbiAqXG4gKiBSdW4gdGhlIExvZ2luQ29tbWFuZCAmIFB1c2hDb21tYW5kIHRvIHRhZyBhbmQgcHVzaCBhbiBpbWFnZSB0byB0aGUgRUNSIHJlcG9zaXRvcnkuXG4gKiBUaGVuIHVzZSB0aGUgUGlwZWxpbmVDb25zb2xlTGluayB0byBuYXZpZ2F0ZSB0byB0aGUgcGlwZWxpbmUgY29uc29sZSBwYWdlIHRvIHZhbGlkYXRlIHRoYXQgdGhlIHBpcGVsaW5lXG4gKiB3YXMgdHJpZ2dlcmVkIHN1Y2Nlc3NmdWxseS5cbiAqL1xuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuXG5jb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soYXBwLCAnYXdzLWNkay1jb2RlcGlwZWxpbmUtZWNyLXNvdXJjZScpO1xuXG5jb25zdCBidWNrZXQgPSBuZXcgczMuQnVja2V0KHN0YWNrLCAnTXlCdWNrZXQnLCB7XG4gIHJlbW92YWxQb2xpY3k6IGNkay5SZW1vdmFsUG9saWN5LkRFU1RST1ksXG59KTtcbmNvbnN0IHBpcGVsaW5lID0gbmV3IGNvZGVwaXBlbGluZS5QaXBlbGluZShzdGFjaywgJ015UGlwZWxpbmUnLCB7XG4gIGFydGlmYWN0QnVja2V0OiBidWNrZXQsXG59KTtcblxuY29uc3QgcmVwb3NpdG9yeSA9IG5ldyBlY3IuUmVwb3NpdG9yeShzdGFjaywgJ015RWNyUmVwbycsIHtcbiAgcmVtb3ZhbFBvbGljeTogY2RrLlJlbW92YWxQb2xpY3kuREVTVFJPWSxcbn0pO1xuY29uc3Qgc291cmNlU3RhZ2UgPSBwaXBlbGluZS5hZGRTdGFnZSh7IHN0YWdlTmFtZTogJ1NvdXJjZScgfSk7XG5zb3VyY2VTdGFnZS5hZGRBY3Rpb24obmV3IGNwYWN0aW9ucy5FY3JTb3VyY2VBY3Rpb24oe1xuICBhY3Rpb25OYW1lOiAnRUNSX1NvdXJjZScsXG4gIG91dHB1dDogbmV3IGNvZGVwaXBlbGluZS5BcnRpZmFjdCgpLFxuICByZXBvc2l0b3J5LFxufSkpO1xuXG5jb25zdCBhcHByb3ZlU3RhZ2UgPSBwaXBlbGluZS5hZGRTdGFnZSh7IHN0YWdlTmFtZTogJ0FwcHJvdmUnIH0pO1xuYXBwcm92ZVN0YWdlLmFkZEFjdGlvbihuZXcgY3BhY3Rpb25zLk1hbnVhbEFwcHJvdmFsQWN0aW9uKHsgYWN0aW9uTmFtZTogJ01hbnVhbEFwcHJvdmFsJyB9KSk7XG5cbm5ldyBjZGsuQ2ZuT3V0cHV0KHN0YWNrLCAnTG9naW5Db21tYW5kJywge1xuICB2YWx1ZTogYGF3cyBlY3IgZ2V0LWxvZ2luLXBhc3N3b3JkIC0tcmVnaW9uICR7c3RhY2sucmVnaW9ufSB8IGRvY2tlciBsb2dpbiAtLXVzZXJuYW1lIEFXUyAtLXBhc3N3b3JkLXN0ZGluICR7c3RhY2suYWNjb3VudH0uZGtyLmVjci4ke3N0YWNrLnJlZ2lvbn0uYW1hem9uYXdzLmNvbWAsXG59KTtcblxubmV3IGNkay5DZm5PdXRwdXQoc3RhY2ssICdQdXNoQ29tbWFuZCcsIHtcbiAgdmFsdWU6IGBkb2NrZXIgdGFnIHB1YmxpYy5lY3IuYXdzL2xhbWJkYS9wcm92aWRlZCAke3JlcG9zaXRvcnkucmVwb3NpdG9yeVVyaUZvclRhZygnbGF0ZXN0Jyl9ICYmIGRvY2tlciBwdXNoICR7cmVwb3NpdG9yeS5yZXBvc2l0b3J5VXJpRm9yVGFnKCdsYXRlc3QnKX1gLFxufSk7XG5cbm5ldyBjZGsuQ2ZuT3V0cHV0KHN0YWNrLCAnUGlwZWxpbmVDb25zb2xlTGluaycsIHtcbiAgdmFsdWU6IGBodHRwczovLyR7c3RhY2sucmVnaW9ufS5jb25zb2xlLmF3cy5hbWF6b24uY29tL2NvZGVzdWl0ZS9jb2RlcGlwZWxpbmUvcGlwZWxpbmVzLyR7cGlwZWxpbmUucGlwZWxpbmVOYW1lfS92aWV3P3JlZ2lvbj0ke3N0YWNrLnJlZ2lvbn1gLFxufSk7XG5cbm5ldyBJbnRlZ1Rlc3QoYXBwLCAnZWNyLXNvdXJjZS1hY3Rpb24nLCB7XG4gIHRlc3RDYXNlczogW3N0YWNrXSxcbn0pO1xuIl19