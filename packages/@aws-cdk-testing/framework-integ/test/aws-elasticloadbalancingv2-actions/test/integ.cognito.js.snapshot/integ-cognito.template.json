{
 "Resources": {
  "Stack8A423254": {
   "Type": "AWS::EC2::VPC",
   "Properties": {
    "CidrBlock": "10.0.0.0/16",
    "EnableDnsHostnames": true,
    "EnableDnsSupport": true,
    "InstanceTenancy": "default",
    "Tags": [
     {
      "Key": "Name",
      "Value": "integ-cognito/Stack"
     }
    ]
   }
  },
  "StackPublicSubnet1Subnet0AD81D22": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.0.0/18",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "integ-cognito/Stack/PublicSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "Stack8A423254"
    }
   }
  },
  "StackPublicSubnet1RouteTable5057189D": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "integ-cognito/Stack/PublicSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "Stack8A423254"
    }
   }
  },
  "StackPublicSubnet1RouteTableAssociation74F1C1B6": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "StackPublicSubnet1RouteTable5057189D"
    },
    "SubnetId": {
     "Ref": "StackPublicSubnet1Subnet0AD81D22"
    }
   }
  },
  "StackPublicSubnet1DefaultRoute16154E3D": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "StackIGW2F0A1126"
    },
    "RouteTableId": {
     "Ref": "StackPublicSubnet1RouteTable5057189D"
    }
   },
   "DependsOn": [
    "StackVPCGWFFCB6290"
   ]
  },
  "StackPublicSubnet1EIPBDAAB2A5": {
   "Type": "AWS::EC2::EIP",
   "Properties": {
    "Domain": "vpc",
    "Tags": [
     {
      "Key": "Name",
      "Value": "integ-cognito/Stack/PublicSubnet1"
     }
    ]
   }
  },
  "StackPublicSubnet1NATGatewayD2E1ABF7": {
   "Type": "AWS::EC2::NatGateway",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "StackPublicSubnet1EIPBDAAB2A5",
      "AllocationId"
     ]
    },
    "SubnetId": {
     "Ref": "StackPublicSubnet1Subnet0AD81D22"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "integ-cognito/Stack/PublicSubnet1"
     }
    ]
   },
   "DependsOn": [
    "StackPublicSubnet1DefaultRoute16154E3D",
    "StackPublicSubnet1RouteTableAssociation74F1C1B6"
   ]
  },
  "StackPublicSubnet2Subnet3C7D2288": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      1,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.64.0/18",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "integ-cognito/Stack/PublicSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "Stack8A423254"
    }
   }
  },
  "StackPublicSubnet2RouteTableCD306445": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "integ-cognito/Stack/PublicSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "Stack8A423254"
    }
   }
  },
  "StackPublicSubnet2RouteTableAssociation5E8F73F1": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "StackPublicSubnet2RouteTableCD306445"
    },
    "SubnetId": {
     "Ref": "StackPublicSubnet2Subnet3C7D2288"
    }
   }
  },
  "StackPublicSubnet2DefaultRoute0319539B": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "StackIGW2F0A1126"
    },
    "RouteTableId": {
     "Ref": "StackPublicSubnet2RouteTableCD306445"
    }
   },
   "DependsOn": [
    "StackVPCGWFFCB6290"
   ]
  },
  "StackPublicSubnet2EIP8CDBC8C2": {
   "Type": "AWS::EC2::EIP",
   "Properties": {
    "Domain": "vpc",
    "Tags": [
     {
      "Key": "Name",
      "Value": "integ-cognito/Stack/PublicSubnet2"
     }
    ]
   }
  },
  "StackPublicSubnet2NATGatewayA8E03AB3": {
   "Type": "AWS::EC2::NatGateway",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "StackPublicSubnet2EIP8CDBC8C2",
      "AllocationId"
     ]
    },
    "SubnetId": {
     "Ref": "StackPublicSubnet2Subnet3C7D2288"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "integ-cognito/Stack/PublicSubnet2"
     }
    ]
   },
   "DependsOn": [
    "StackPublicSubnet2DefaultRoute0319539B",
    "StackPublicSubnet2RouteTableAssociation5E8F73F1"
   ]
  },
  "StackPrivateSubnet1Subnet47AC2BC7": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.128.0/18",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Private"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Private"
     },
     {
      "Key": "Name",
      "Value": "integ-cognito/Stack/PrivateSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "Stack8A423254"
    }
   }
  },
  "StackPrivateSubnet1RouteTable8ADA6A0C": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "integ-cognito/Stack/PrivateSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "Stack8A423254"
    }
   }
  },
  "StackPrivateSubnet1RouteTableAssociationFFE38495": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "StackPrivateSubnet1RouteTable8ADA6A0C"
    },
    "SubnetId": {
     "Ref": "StackPrivateSubnet1Subnet47AC2BC7"
    }
   }
  },
  "StackPrivateSubnet1DefaultRouteFBF81BA5": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId": {
     "Ref": "StackPublicSubnet1NATGatewayD2E1ABF7"
    },
    "RouteTableId": {
     "Ref": "StackPrivateSubnet1RouteTable8ADA6A0C"
    }
   }
  },
  "StackPrivateSubnet2SubnetA2F8EDD8": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      1,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.192.0/18",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Private"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Private"
     },
     {
      "Key": "Name",
      "Value": "integ-cognito/Stack/PrivateSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "Stack8A423254"
    }
   }
  },
  "StackPrivateSubnet2RouteTableA5546697": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "integ-cognito/Stack/PrivateSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "Stack8A423254"
    }
   }
  },
  "StackPrivateSubnet2RouteTableAssociation68ACB8C1": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "StackPrivateSubnet2RouteTableA5546697"
    },
    "SubnetId": {
     "Ref": "StackPrivateSubnet2SubnetA2F8EDD8"
    }
   }
  },
  "StackPrivateSubnet2DefaultRoute22004492": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId": {
     "Ref": "StackPublicSubnet2NATGatewayA8E03AB3"
    },
    "RouteTableId": {
     "Ref": "StackPrivateSubnet2RouteTableA5546697"
    }
   }
  },
  "StackIGW2F0A1126": {
   "Type": "AWS::EC2::InternetGateway",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "integ-cognito/Stack"
     }
    ]
   }
  },
  "StackVPCGWFFCB6290": {
   "Type": "AWS::EC2::VPCGatewayAttachment",
   "Properties": {
    "InternetGatewayId": {
     "Ref": "StackIGW2F0A1126"
    },
    "VpcId": {
     "Ref": "Stack8A423254"
    }
   }
  },
  "Certificate4E7ABB08": {
   "Type": "AWS::CertificateManager::Certificate",
   "Properties": {
    "DomainName": "*.example.com",
    "DomainValidationOptions": [
     {
      "DomainName": "*.example.com",
      "HostedZoneId": "Z23ABC4XYZL05B"
     }
    ],
    "Tags": [
     {
      "Key": "Name",
      "Value": "integ-cognito/Certificate"
     }
    ],
    "ValidationMethod": "DNS"
   }
  },
  "LB8A12904C": {
   "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
   "Properties": {
    "LoadBalancerAttributes": [
     {
      "Key": "deletion_protection.enabled",
      "Value": "false"
     }
    ],
    "Scheme": "internet-facing",
    "SecurityGroups": [
     {
      "Fn::GetAtt": [
       "LBSecurityGroup8A41EA2B",
       "GroupId"
      ]
     }
    ],
    "Subnets": [
     {
      "Ref": "StackPublicSubnet1Subnet0AD81D22"
     },
     {
      "Ref": "StackPublicSubnet2Subnet3C7D2288"
     }
    ],
    "Type": "application"
   },
   "DependsOn": [
    "StackPublicSubnet1DefaultRoute16154E3D",
    "StackPublicSubnet1RouteTableAssociation74F1C1B6",
    "StackPublicSubnet2DefaultRoute0319539B",
    "StackPublicSubnet2RouteTableAssociation5E8F73F1"
   ]
  },
  "LBSecurityGroup8A41EA2B": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "Automatically created Security Group for ELB integcognitoLBFBBBA626",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow to IdP endpoint",
      "FromPort": 443,
      "IpProtocol": "tcp",
      "ToPort": 443
     }
    ],
    "SecurityGroupIngress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow from anyone on port 443",
      "FromPort": 443,
      "IpProtocol": "tcp",
      "ToPort": 443
     }
    ],
    "VpcId": {
     "Ref": "Stack8A423254"
    }
   }
  },
  "LBListener49E825B4": {
   "Type": "AWS::ElasticLoadBalancingV2::Listener",
   "Properties": {
    "Certificates": [
     {
      "CertificateArn": {
       "Ref": "Certificate4E7ABB08"
      }
     }
    ],
    "DefaultActions": [
     {
      "AuthenticateCognitoConfig": {
       "SessionTimeout": "86400",
       "UserPoolArn": {
        "Fn::GetAtt": [
         "UserPool6BA7E5F2",
         "Arn"
        ]
       },
       "UserPoolClientId": {
        "Ref": "Client4A7F64DF"
       },
       "UserPoolDomain": {
        "Ref": "Domain66AC69E0"
       }
      },
      "Order": 1,
      "Type": "authenticate-cognito"
     },
     {
      "FixedResponseConfig": {
       "ContentType": "text/plain",
       "MessageBody": "Authenticated",
       "StatusCode": "200"
      },
      "Order": 2,
      "Type": "fixed-response"
     }
    ],
    "LoadBalancerArn": {
     "Ref": "LB8A12904C"
    },
    "Port": 443,
    "Protocol": "HTTPS"
   }
  },
  "LBListenerAction2RuleDEE172B4": {
   "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
   "Properties": {
    "Actions": [
     {
      "AuthenticateCognitoConfig": {
       "SessionTimeout": 86400,
       "UserPoolArn": {
        "Fn::GetAtt": [
         "UserPool6BA7E5F2",
         "Arn"
        ]
       },
       "UserPoolClientId": {
        "Ref": "Client4A7F64DF"
       },
       "UserPoolDomain": {
        "Ref": "Domain66AC69E0"
       }
      },
      "Order": 1,
      "Type": "authenticate-cognito"
     },
     {
      "FixedResponseConfig": {
       "ContentType": "text/plain",
       "MessageBody": "Authenticated",
       "StatusCode": "200"
      },
      "Order": 2,
      "Type": "fixed-response"
     }
    ],
    "Conditions": [
     {
      "Field": "path-pattern",
      "PathPatternConfig": {
       "Values": [
        "action2*"
       ]
      }
     }
    ],
    "ListenerArn": {
     "Ref": "LBListener49E825B4"
    },
    "Priority": 1
   }
  },
  "UserPool6BA7E5F2": {
   "Type": "AWS::Cognito::UserPool",
   "Properties": {
    "AccountRecoverySetting": {
     "RecoveryMechanisms": [
      {
       "Name": "verified_phone_number",
       "Priority": 1
      },
      {
       "Name": "verified_email",
       "Priority": 2
      }
     ]
    },
    "AdminCreateUserConfig": {
     "AllowAdminCreateUserOnly": true
    },
    "EmailVerificationMessage": "The verification code to your new account is {####}",
    "EmailVerificationSubject": "Verify your new account",
    "SmsVerificationMessage": "The verification code to your new account is {####}",
    "VerificationMessageTemplate": {
     "DefaultEmailOption": "CONFIRM_WITH_CODE",
     "EmailMessage": "The verification code to your new account is {####}",
     "EmailSubject": "Verify your new account",
     "SmsMessage": "The verification code to your new account is {####}"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "Client4A7F64DF": {
   "Type": "AWS::Cognito::UserPoolClient",
   "Properties": {
    "AllowedOAuthFlows": [
     "code"
    ],
    "AllowedOAuthFlowsUserPoolClient": true,
    "AllowedOAuthScopes": [
     "email",
     "openid"
    ],
    "CallbackURLs": [
     "https://*.example.com/oauth2/idpresponse"
    ],
    "ExplicitAuthFlows": [
     "ALLOW_USER_PASSWORD_AUTH",
     "ALLOW_REFRESH_TOKEN_AUTH"
    ],
    "GenerateSecret": true,
    "RefreshTokenValidity": 1,
    "SupportedIdentityProviders": [
     "COGNITO"
    ],
    "UserPoolId": {
     "Ref": "UserPool6BA7E5F2"
    }
   }
  },
  "Domain66AC69E0": {
   "Type": "AWS::Cognito::UserPoolDomain",
   "Properties": {
    "Domain": "z23abc4xyzl05b",
    "UserPoolId": {
     "Ref": "UserPool6BA7E5F2"
    }
   }
  },
  "ARecordE7B57761": {
   "Type": "AWS::Route53::RecordSet",
   "Properties": {
    "AliasTarget": {
     "DNSName": {
      "Fn::Join": [
       "",
       [
        "dualstack.",
        {
         "Fn::GetAtt": [
          "LB8A12904C",
          "DNSName"
         ]
        }
       ]
      ]
     },
     "HostedZoneId": {
      "Fn::GetAtt": [
       "LB8A12904C",
       "CanonicalHostedZoneID"
      ]
     }
    },
    "HostedZoneId": "Z23ABC4XYZL05B",
    "Name": "example.com.",
    "Type": "A"
   }
  },
  "UserFDDCDD17": {
   "Type": "Custom::CognitoUser",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
      "Arn"
     ]
    },
    "Create": {
     "Fn::Join": [
      "",
      [
       "{\"service\":\"CognitoIdentityServiceProvider\",\"action\":\"adminCreateUser\",\"parameters\":{\"UserPoolId\":\"",
       {
        "Ref": "UserPool6BA7E5F2"
       },
       "\",\"Username\":\"test-user@example.com\",\"UserAttributes\":[{\"Name\":\"email\",\"Value\":\"test-user@example.com\"},{\"Name\":\"email_verified\",\"Value\":\"true\"}],\"MessageAction\":\"SUPPRESS\"},\"physicalResourceId\":{\"id\":\"User\"}}"
      ]
     ]
    },
    "InstallLatestAwsSdk": false
   },
   "DependsOn": [
    "UserCustomResourcePolicyC2EB5139"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "UserCustomResourcePolicyC2EB5139": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "cognito-idp:AdminCreateUser",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "UserPool6BA7E5F2",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "UserCustomResourcePolicyC2EB5139",
    "Roles": [
     {
      "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2"
     }
    ]
   }
  },
  "UserSetUserPasswordAD2F2A64": {
   "Type": "Custom::CognitoUserPassword",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
      "Arn"
     ]
    },
    "Create": {
     "Fn::Join": [
      "",
      [
       "{\"service\":\"CognitoIdentityServiceProvider\",\"action\":\"adminSetUserPassword\",\"parameters\":{\"UserPoolId\":\"",
       {
        "Ref": "UserPool6BA7E5F2"
       },
       "\",\"Username\":\"",
       {
        "Fn::GetAtt": [
         "UserFDDCDD17",
         "User.Username"
        ]
       },
       "\",\"Password\":\"TestUser@123\",\"Permanent\":true},\"physicalResourceId\":{\"id\":\"SetUserPassword\"}}"
      ]
     ]
    },
    "InstallLatestAwsSdk": false
   },
   "DependsOn": [
    "UserCustomResourcePolicyC2EB5139",
    "UserFDDCDD17",
    "UserSetUserPasswordCustomResourcePolicy7B250C76"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "UserSetUserPasswordCustomResourcePolicy7B250C76": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "cognito-idp:AdminSetUserPassword",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "UserPool6BA7E5F2",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "UserSetUserPasswordCustomResourcePolicy7B250C76",
    "Roles": [
     {
      "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2"
     }
    ]
   },
   "DependsOn": [
    "UserCustomResourcePolicyC2EB5139",
    "UserFDDCDD17"
   ]
  },
  "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "AWS679f53fac002430cb0da5b7982bd22872D164C4C": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "b0de6372e1c756b7afa1a8a1d0a21ee4cd330150290abffc9bc163f285150514.zip"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x",
    "Timeout": 120
   },
   "DependsOn": [
    "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2"
   ]
  },
  "SigninServiceRole24B8BB32": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "Signin352C80E6": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "1832f4c7bb54fe8f4eb5677dc53ae4204e4b27b12077ddd397a6755206864302.zip"
    },
    "Environment": {
     "Variables": {
      "TEST_USERNAME": "test-user@example.com",
      "TEST_PASSWORD": "TestUser@123",
      "TEST_URL": "https://*.example.com"
     }
    },
    "FunctionName": "cdk-integ-alb-cognito-signin-handler",
    "Handler": "index.handler",
    "MemorySize": 1024,
    "Role": {
     "Fn::GetAtt": [
      "SigninServiceRole24B8BB32",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x",
    "Timeout": 300
   },
   "DependsOn": [
    "SigninServiceRole24B8BB32"
   ]
  }
 },
 "Outputs": {
  "DNS": {
   "Value": "*.example.com"
  },
  "ExportsOutputRefSignin352C80E64BA58F71": {
   "Value": {
    "Ref": "Signin352C80E6"
   },
   "Export": {
    "Name": "integ-cognito:ExportsOutputRefSignin352C80E64BA58F71"
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}