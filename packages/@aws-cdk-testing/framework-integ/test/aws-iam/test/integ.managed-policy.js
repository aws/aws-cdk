"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_cdk_lib_1 = require("aws-cdk-lib");
const integ_tests_alpha_1 = require("@aws-cdk/integ-tests-alpha");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const app = new aws_cdk_lib_1.App();
const stack = new aws_cdk_lib_1.Stack(app, 'aws-cdk-iam-managed-policy');
const user = new aws_iam_1.User(stack, 'MyUser');
const policy = new aws_iam_1.ManagedPolicy(stack, 'OneManagedPolicy', {
    managedPolicyName: 'Default',
    description: 'My Policy',
    path: '/some/path/',
});
policy.addStatements(new aws_iam_1.PolicyStatement({ resources: ['*'], actions: ['sqs:SendMessage'] }));
policy.attachToUser(user);
const policy2 = new aws_iam_1.ManagedPolicy(stack, 'TwoManagedPolicy');
policy2.addStatements(new aws_iam_1.PolicyStatement({ resources: ['*'], actions: ['lambda:InvokeFunction'] }));
user.addManagedPolicy(policy2);
const policy3 = aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName('SecurityAudit');
user.addManagedPolicy(policy3);
const role = new aws_iam_1.Role(stack, 'Role', { assumedBy: new aws_iam_1.AccountRootPrincipal() });
role.grantAssumeRole(policy.grantPrincipal);
aws_iam_1.Grant.addToPrincipal({ actions: ['iam:*'], resourceArns: [role.roleArn], grantee: policy2 });
new integ_tests_alpha_1.IntegTest(app, 'ManagedPolicyInteg', {
    testCases: [stack],
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcubWFuYWdlZC1wb2xpY3kuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy5tYW5hZ2VkLXBvbGljeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZDQUF5QztBQUN6QyxrRUFBdUQ7QUFDdkQsaURBQThHO0FBRTlHLE1BQU0sR0FBRyxHQUFHLElBQUksaUJBQUcsRUFBRSxDQUFDO0FBRXRCLE1BQU0sS0FBSyxHQUFHLElBQUksbUJBQUssQ0FBQyxHQUFHLEVBQUUsNEJBQTRCLENBQUMsQ0FBQztBQUUzRCxNQUFNLElBQUksR0FBRyxJQUFJLGNBQUksQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFFdkMsTUFBTSxNQUFNLEdBQUcsSUFBSSx1QkFBYSxDQUFDLEtBQUssRUFBRSxrQkFBa0IsRUFBRTtJQUMxRCxpQkFBaUIsRUFBRSxTQUFTO0lBQzVCLFdBQVcsRUFBRSxXQUFXO0lBQ3hCLElBQUksRUFBRSxhQUFhO0NBQ3BCLENBQUMsQ0FBQztBQUNILE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBSSx5QkFBZSxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM5RixNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRTFCLE1BQU0sT0FBTyxHQUFHLElBQUksdUJBQWEsQ0FBQyxLQUFLLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztBQUM3RCxPQUFPLENBQUMsYUFBYSxDQUFDLElBQUkseUJBQWUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLHVCQUF1QixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDckcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBRS9CLE1BQU0sT0FBTyxHQUFHLHVCQUFhLENBQUMsd0JBQXdCLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDeEUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBRS9CLE1BQU0sSUFBSSxHQUFHLElBQUksY0FBSSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSw4QkFBb0IsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNoRixJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUM1QyxlQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0FBRTdGLElBQUksNkJBQVMsQ0FBQyxHQUFHLEVBQUUsb0JBQW9CLEVBQUU7SUFDdkMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDO0NBQ25CLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcCwgU3RhY2sgfSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBJbnRlZ1Rlc3QgfSBmcm9tICdAYXdzLWNkay9pbnRlZy10ZXN0cy1hbHBoYSc7XG5pbXBvcnQgeyBBY2NvdW50Um9vdFByaW5jaXBhbCwgR3JhbnQsIE1hbmFnZWRQb2xpY3ksIFBvbGljeVN0YXRlbWVudCwgUm9sZSwgVXNlciB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1pYW0nO1xuXG5jb25zdCBhcHAgPSBuZXcgQXBwKCk7XG5cbmNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKGFwcCwgJ2F3cy1jZGstaWFtLW1hbmFnZWQtcG9saWN5Jyk7XG5cbmNvbnN0IHVzZXIgPSBuZXcgVXNlcihzdGFjaywgJ015VXNlcicpO1xuXG5jb25zdCBwb2xpY3kgPSBuZXcgTWFuYWdlZFBvbGljeShzdGFjaywgJ09uZU1hbmFnZWRQb2xpY3knLCB7XG4gIG1hbmFnZWRQb2xpY3lOYW1lOiAnRGVmYXVsdCcsXG4gIGRlc2NyaXB0aW9uOiAnTXkgUG9saWN5JyxcbiAgcGF0aDogJy9zb21lL3BhdGgvJyxcbn0pO1xucG9saWN5LmFkZFN0YXRlbWVudHMobmV3IFBvbGljeVN0YXRlbWVudCh7IHJlc291cmNlczogWycqJ10sIGFjdGlvbnM6IFsnc3FzOlNlbmRNZXNzYWdlJ10gfSkpO1xucG9saWN5LmF0dGFjaFRvVXNlcih1c2VyKTtcblxuY29uc3QgcG9saWN5MiA9IG5ldyBNYW5hZ2VkUG9saWN5KHN0YWNrLCAnVHdvTWFuYWdlZFBvbGljeScpO1xucG9saWN5Mi5hZGRTdGF0ZW1lbnRzKG5ldyBQb2xpY3lTdGF0ZW1lbnQoeyByZXNvdXJjZXM6IFsnKiddLCBhY3Rpb25zOiBbJ2xhbWJkYTpJbnZva2VGdW5jdGlvbiddIH0pKTtcbnVzZXIuYWRkTWFuYWdlZFBvbGljeShwb2xpY3kyKTtcblxuY29uc3QgcG9saWN5MyA9IE1hbmFnZWRQb2xpY3kuZnJvbUF3c01hbmFnZWRQb2xpY3lOYW1lKCdTZWN1cml0eUF1ZGl0Jyk7XG51c2VyLmFkZE1hbmFnZWRQb2xpY3kocG9saWN5Myk7XG5cbmNvbnN0IHJvbGUgPSBuZXcgUm9sZShzdGFjaywgJ1JvbGUnLCB7IGFzc3VtZWRCeTogbmV3IEFjY291bnRSb290UHJpbmNpcGFsKCkgfSk7XG5yb2xlLmdyYW50QXNzdW1lUm9sZShwb2xpY3kuZ3JhbnRQcmluY2lwYWwpO1xuR3JhbnQuYWRkVG9QcmluY2lwYWwoeyBhY3Rpb25zOiBbJ2lhbToqJ10sIHJlc291cmNlQXJuczogW3JvbGUucm9sZUFybl0sIGdyYW50ZWU6IHBvbGljeTIgfSk7XG5cbm5ldyBJbnRlZ1Rlc3QoYXBwLCAnTWFuYWdlZFBvbGljeUludGVnJywge1xuICB0ZXN0Q2FzZXM6IFtzdGFja10sXG59KTtcbiJdfQ==