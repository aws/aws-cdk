#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ec2 = require("aws-cdk-lib/aws-ec2");
// eslint-disable-next-line import/no-extraneous-dependencies
const iam = require("aws-cdk-lib/aws-iam");
const cdk = require("aws-cdk-lib");
const integ = require("@aws-cdk/integ-tests-alpha");
const elb = require("aws-cdk-lib/aws-elasticloadbalancing");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-cdk-elb-instance-target-integ');
const vpc = new ec2.Vpc(stack, 'VPC', {
    maxAzs: 1,
});
const instance = new ec2.Instance(stack, 'targetInstance', {
    vpc: vpc,
    instanceType: ec2.InstanceType.of(// t2.micro has free tier usage in aws
    ec2.InstanceClass.T3, ec2.InstanceSize.MICRO),
    machineImage: ec2.MachineImage.latestAmazonLinux({
        generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,
    }),
    initOptions: {
        timeout: cdk.Duration.minutes(30),
    },
    init: ec2.CloudFormationInit.fromElements(ec2.InitService.systemdConfigFile('pythonweb', {
        command: '/usr/bin/python3 -m http.server 8080',
        cwd: '/var/www/html',
    }), ec2.InitService.enable('pythonweb', {
        serviceManager: ec2.ServiceManager.SYSTEMD,
    }), ec2.InitFile.fromString('/var/www/html/index.html', 'Hello! You can see me!')),
});
instance.role.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName('AmazonSSMManagedInstanceCore'));
const elbalancer = new elb.LoadBalancer(stack, 'LB', {
    vpc,
    internetFacing: true,
});
elbalancer.addTarget(new elb.InstanceTarget(instance));
elbalancer.addListener({ externalPort: 80, internalPort: 8080 });
new integ.IntegTest(app, 'InstanceTargetTest', {
    testCases: [stack],
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuaW5zdGFuY2VUYXJnZXQuZWxiLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW50ZWcuaW5zdGFuY2VUYXJnZXQuZWxiLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDJDQUEyQztBQUMzQyw2REFBNkQ7QUFDN0QsMkNBQTJDO0FBQzNDLG1DQUFtQztBQUNuQyxvREFBb0Q7QUFDcEQsNERBQTREO0FBRTVELE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQzFCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsbUNBQW1DLENBQUMsQ0FBQztBQUV0RSxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRTtJQUNwQyxNQUFNLEVBQUUsQ0FBQztDQUNWLENBQUMsQ0FBQztBQUVILE1BQU0sUUFBUSxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLEVBQUU7SUFDekQsR0FBRyxFQUFFLEdBQUc7SUFDUixZQUFZLEVBQUUsR0FBRyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUUsc0NBQXNDO0lBQ3ZFLEdBQUcsQ0FBQyxhQUFhLENBQUMsRUFBRSxFQUNwQixHQUFHLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FDdkI7SUFDRCxZQUFZLEVBQUUsR0FBRyxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQztRQUMvQyxVQUFVLEVBQUUsR0FBRyxDQUFDLHFCQUFxQixDQUFDLGNBQWM7S0FDckQsQ0FBQztJQUNGLFdBQVcsRUFBRTtRQUNYLE9BQU8sRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7S0FDbEM7SUFDRCxJQUFJLEVBQUUsR0FBRyxDQUFDLGtCQUFrQixDQUFDLFlBQVksQ0FDdkMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUU7UUFDN0MsT0FBTyxFQUFFLHNDQUFzQztRQUMvQyxHQUFHLEVBQUUsZUFBZTtLQUNyQixDQUFDLEVBQ0YsR0FBRyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFO1FBQ2xDLGNBQWMsRUFBRSxHQUFHLENBQUMsY0FBYyxDQUFDLE9BQU87S0FDM0MsQ0FBQyxFQUNGLEdBQUcsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLDBCQUEwQixFQUFFLHdCQUF3QixDQUFDLENBQzlFO0NBQ0YsQ0FBQyxDQUFDO0FBQ0gsUUFBUSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLHdCQUF3QixDQUFDLDhCQUE4QixDQUFDLENBQUMsQ0FBQztBQUUzRyxNQUFNLFVBQVUsR0FBRyxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRTtJQUNuRCxHQUFHO0lBQ0gsY0FBYyxFQUFFLElBQUk7Q0FDckIsQ0FBQyxDQUFDO0FBRUgsVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUN2RCxVQUFVLENBQUMsV0FBVyxDQUFDLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUVqRSxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLG9CQUFvQixFQUFFO0lBQzdDLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQztDQUNuQixDQUFDLENBQUM7QUFFSCxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5pbXBvcnQgKiBhcyBlYzIgZnJvbSAnYXdzLWNkay1saWIvYXdzLWVjMic7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWV4dHJhbmVvdXMtZGVwZW5kZW5jaWVzXG5pbXBvcnQgKiBhcyBpYW0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWlhbSc7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0ICogYXMgaW50ZWcgZnJvbSAnQGF3cy1jZGsvaW50ZWctdGVzdHMtYWxwaGEnO1xuaW1wb3J0ICogYXMgZWxiIGZyb20gJ2F3cy1jZGstbGliL2F3cy1lbGFzdGljbG9hZGJhbGFuY2luZyc7XG5cbmNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG5jb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soYXBwLCAnYXdzLWNkay1lbGItaW5zdGFuY2UtdGFyZ2V0LWludGVnJyk7XG5cbmNvbnN0IHZwYyA9IG5ldyBlYzIuVnBjKHN0YWNrLCAnVlBDJywge1xuICBtYXhBenM6IDEsXG59KTtcblxuY29uc3QgaW5zdGFuY2UgPSBuZXcgZWMyLkluc3RhbmNlKHN0YWNrLCAndGFyZ2V0SW5zdGFuY2UnLCB7XG4gIHZwYzogdnBjLFxuICBpbnN0YW5jZVR5cGU6IGVjMi5JbnN0YW5jZVR5cGUub2YoIC8vIHQyLm1pY3JvIGhhcyBmcmVlIHRpZXIgdXNhZ2UgaW4gYXdzXG4gICAgZWMyLkluc3RhbmNlQ2xhc3MuVDMsXG4gICAgZWMyLkluc3RhbmNlU2l6ZS5NSUNSTyxcbiAgKSxcbiAgbWFjaGluZUltYWdlOiBlYzIuTWFjaGluZUltYWdlLmxhdGVzdEFtYXpvbkxpbnV4KHtcbiAgICBnZW5lcmF0aW9uOiBlYzIuQW1hem9uTGludXhHZW5lcmF0aW9uLkFNQVpPTl9MSU5VWF8yLFxuICB9KSxcbiAgaW5pdE9wdGlvbnM6IHtcbiAgICB0aW1lb3V0OiBjZGsuRHVyYXRpb24ubWludXRlcygzMCksXG4gIH0sXG4gIGluaXQ6IGVjMi5DbG91ZEZvcm1hdGlvbkluaXQuZnJvbUVsZW1lbnRzKFxuICAgIGVjMi5Jbml0U2VydmljZS5zeXN0ZW1kQ29uZmlnRmlsZSgncHl0aG9ud2ViJywge1xuICAgICAgY29tbWFuZDogJy91c3IvYmluL3B5dGhvbjMgLW0gaHR0cC5zZXJ2ZXIgODA4MCcsXG4gICAgICBjd2Q6ICcvdmFyL3d3dy9odG1sJyxcbiAgICB9KSxcbiAgICBlYzIuSW5pdFNlcnZpY2UuZW5hYmxlKCdweXRob253ZWInLCB7XG4gICAgICBzZXJ2aWNlTWFuYWdlcjogZWMyLlNlcnZpY2VNYW5hZ2VyLlNZU1RFTUQsXG4gICAgfSksXG4gICAgZWMyLkluaXRGaWxlLmZyb21TdHJpbmcoJy92YXIvd3d3L2h0bWwvaW5kZXguaHRtbCcsICdIZWxsbyEgWW91IGNhbiBzZWUgbWUhJyksXG4gICksXG59KTtcbmluc3RhbmNlLnJvbGUuYWRkTWFuYWdlZFBvbGljeShpYW0uTWFuYWdlZFBvbGljeS5mcm9tQXdzTWFuYWdlZFBvbGljeU5hbWUoJ0FtYXpvblNTTU1hbmFnZWRJbnN0YW5jZUNvcmUnKSk7XG5cbmNvbnN0IGVsYmFsYW5jZXIgPSBuZXcgZWxiLkxvYWRCYWxhbmNlcihzdGFjaywgJ0xCJywge1xuICB2cGMsXG4gIGludGVybmV0RmFjaW5nOiB0cnVlLFxufSk7XG5cbmVsYmFsYW5jZXIuYWRkVGFyZ2V0KG5ldyBlbGIuSW5zdGFuY2VUYXJnZXQoaW5zdGFuY2UpKTtcbmVsYmFsYW5jZXIuYWRkTGlzdGVuZXIoeyBleHRlcm5hbFBvcnQ6IDgwLCBpbnRlcm5hbFBvcnQ6IDgwODAgfSk7XG5cbm5ldyBpbnRlZy5JbnRlZ1Rlc3QoYXBwLCAnSW5zdGFuY2VUYXJnZXRUZXN0Jywge1xuICB0ZXN0Q2FzZXM6IFtzdGFja10sXG59KTtcblxuYXBwLnN5bnRoKCk7XG4iXX0=