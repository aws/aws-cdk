"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const s3 = require("aws-cdk-lib/aws-s3");
const sqs = require("aws-cdk-lib/aws-sqs");
const cdk = require("aws-cdk-lib");
const integ = require("@aws-cdk/integ-tests-alpha");
const s3n = require("aws-cdk-lib/aws-s3-notifications");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'sqs-bucket-notifications');
const bucket1 = new s3.Bucket(stack, 'Bucket1', {
    removalPolicy: cdk.RemovalPolicy.DESTROY,
});
const queue = new sqs.Queue(stack, 'MyQueue');
bucket1.addObjectCreatedNotification(new s3n.SqsDestination(queue));
const bucket2 = new s3.Bucket(stack, 'Bucket2', {
    removalPolicy: cdk.RemovalPolicy.DESTROY,
    autoDeleteObjects: true,
});
bucket2.addObjectCreatedNotification(new s3n.SqsDestination(queue), { suffix: '.png' });
const encryptedQueue = new sqs.Queue(stack, 'EncryptedQueue', { encryption: sqs.QueueEncryption.KMS });
bucket1.addObjectRemovedNotification(new s3n.SqsDestination(encryptedQueue));
const integTest = new integ.IntegTest(app, 'SQSBucketNotificationsTest', {
    testCases: [stack],
});
integTest.assertions
    // First remove the test notifications
    .awsApiCall('SQS', 'purgeQueue', {
    QueueUrl: queue.queueUrl,
})
    .next(integTest.assertions
    .awsApiCall('S3', 'putObject', {
    Bucket: bucket2.bucketName,
    Key: 'image.png',
    Body: 'Some content',
}))
    .next(integTest.assertions
    .awsApiCall('SQS', 'receiveMessage', {
    QueueUrl: queue.queueUrl,
    WaitTimeSeconds: 20,
})
    .assertAtPath('Messages.0.Body.Records.0.s3.object.key', integ.ExpectedResult.stringLikeRegexp('image\\.png')));
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuYnVja2V0LW5vdGlmaWNhdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy5idWNrZXQtbm90aWZpY2F0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlDQUF5QztBQUN6QywyQ0FBMkM7QUFDM0MsbUNBQW1DO0FBQ25DLG9EQUFvRDtBQUNwRCx3REFBd0Q7QUFFeEQsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFFMUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSwwQkFBMEIsQ0FBQyxDQUFDO0FBRTdELE1BQU0sT0FBTyxHQUFHLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFO0lBQzlDLGFBQWEsRUFBRSxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU87Q0FDekMsQ0FBQyxDQUFDO0FBQ0gsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztBQUU5QyxPQUFPLENBQUMsNEJBQTRCLENBQUMsSUFBSSxHQUFHLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFFcEUsTUFBTSxPQUFPLEdBQUcsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7SUFDOUMsYUFBYSxFQUFFLEdBQUcsQ0FBQyxhQUFhLENBQUMsT0FBTztJQUN4QyxpQkFBaUIsRUFBRSxJQUFJO0NBQ3hCLENBQUMsQ0FBQztBQUNILE9BQU8sQ0FBQyw0QkFBNEIsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztBQUV4RixNQUFNLGNBQWMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLGdCQUFnQixFQUFFLEVBQUUsVUFBVSxFQUFFLEdBQUcsQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUN2RyxPQUFPLENBQUMsNEJBQTRCLENBQUMsSUFBSSxHQUFHLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7QUFHN0UsTUFBTSxTQUFTLEdBQUcsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSw0QkFBNEIsRUFBRTtJQUN2RSxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUM7Q0FDbkIsQ0FBQyxDQUFDO0FBRUgsU0FBUyxDQUFDLFVBQVU7SUFDbEIsc0NBQXNDO0tBQ3JDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFO0lBQy9CLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtDQUN6QixDQUFDO0tBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVO0tBQ3ZCLFVBQVUsQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFO0lBQzdCLE1BQU0sRUFBRSxPQUFPLENBQUMsVUFBVTtJQUMxQixHQUFHLEVBQUUsV0FBVztJQUNoQixJQUFJLEVBQUUsY0FBYztDQUNyQixDQUFDLENBQUM7S0FDSixJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVU7S0FDdkIsVUFBVSxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsRUFBRTtJQUNuQyxRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7SUFDeEIsZUFBZSxFQUFFLEVBQUU7Q0FDcEIsQ0FBQztLQUNELFlBQVksQ0FBQyx5Q0FBeUMsRUFBRSxLQUFLLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUVwSCxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBzMyBmcm9tICdhd3MtY2RrLWxpYi9hd3MtczMnO1xuaW1wb3J0ICogYXMgc3FzIGZyb20gJ2F3cy1jZGstbGliL2F3cy1zcXMnO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCAqIGFzIGludGVnIGZyb20gJ0Bhd3MtY2RrL2ludGVnLXRlc3RzLWFscGhhJztcbmltcG9ydCAqIGFzIHMzbiBmcm9tICdhd3MtY2RrLWxpYi9hd3MtczMtbm90aWZpY2F0aW9ucyc7XG5cbmNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG5cbmNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjayhhcHAsICdzcXMtYnVja2V0LW5vdGlmaWNhdGlvbnMnKTtcblxuY29uc3QgYnVja2V0MSA9IG5ldyBzMy5CdWNrZXQoc3RhY2ssICdCdWNrZXQxJywge1xuICByZW1vdmFsUG9saWN5OiBjZGsuUmVtb3ZhbFBvbGljeS5ERVNUUk9ZLFxufSk7XG5jb25zdCBxdWV1ZSA9IG5ldyBzcXMuUXVldWUoc3RhY2ssICdNeVF1ZXVlJyk7XG5cbmJ1Y2tldDEuYWRkT2JqZWN0Q3JlYXRlZE5vdGlmaWNhdGlvbihuZXcgczNuLlNxc0Rlc3RpbmF0aW9uKHF1ZXVlKSk7XG5cbmNvbnN0IGJ1Y2tldDIgPSBuZXcgczMuQnVja2V0KHN0YWNrLCAnQnVja2V0MicsIHtcbiAgcmVtb3ZhbFBvbGljeTogY2RrLlJlbW92YWxQb2xpY3kuREVTVFJPWSxcbiAgYXV0b0RlbGV0ZU9iamVjdHM6IHRydWUsXG59KTtcbmJ1Y2tldDIuYWRkT2JqZWN0Q3JlYXRlZE5vdGlmaWNhdGlvbihuZXcgczNuLlNxc0Rlc3RpbmF0aW9uKHF1ZXVlKSwgeyBzdWZmaXg6ICcucG5nJyB9KTtcblxuY29uc3QgZW5jcnlwdGVkUXVldWUgPSBuZXcgc3FzLlF1ZXVlKHN0YWNrLCAnRW5jcnlwdGVkUXVldWUnLCB7IGVuY3J5cHRpb246IHNxcy5RdWV1ZUVuY3J5cHRpb24uS01TIH0pO1xuYnVja2V0MS5hZGRPYmplY3RSZW1vdmVkTm90aWZpY2F0aW9uKG5ldyBzM24uU3FzRGVzdGluYXRpb24oZW5jcnlwdGVkUXVldWUpKTtcblxuXG5jb25zdCBpbnRlZ1Rlc3QgPSBuZXcgaW50ZWcuSW50ZWdUZXN0KGFwcCwgJ1NRU0J1Y2tldE5vdGlmaWNhdGlvbnNUZXN0Jywge1xuICB0ZXN0Q2FzZXM6IFtzdGFja10sXG59KTtcblxuaW50ZWdUZXN0LmFzc2VydGlvbnNcbiAgLy8gRmlyc3QgcmVtb3ZlIHRoZSB0ZXN0IG5vdGlmaWNhdGlvbnNcbiAgLmF3c0FwaUNhbGwoJ1NRUycsICdwdXJnZVF1ZXVlJywge1xuICAgIFF1ZXVlVXJsOiBxdWV1ZS5xdWV1ZVVybCxcbiAgfSlcbiAgLm5leHQoaW50ZWdUZXN0LmFzc2VydGlvbnNcbiAgICAuYXdzQXBpQ2FsbCgnUzMnLCAncHV0T2JqZWN0Jywge1xuICAgICAgQnVja2V0OiBidWNrZXQyLmJ1Y2tldE5hbWUsXG4gICAgICBLZXk6ICdpbWFnZS5wbmcnLFxuICAgICAgQm9keTogJ1NvbWUgY29udGVudCcsXG4gICAgfSkpXG4gIC5uZXh0KGludGVnVGVzdC5hc3NlcnRpb25zXG4gICAgLmF3c0FwaUNhbGwoJ1NRUycsICdyZWNlaXZlTWVzc2FnZScsIHtcbiAgICAgIFF1ZXVlVXJsOiBxdWV1ZS5xdWV1ZVVybCxcbiAgICAgIFdhaXRUaW1lU2Vjb25kczogMjAsXG4gICAgfSlcbiAgICAuYXNzZXJ0QXRQYXRoKCdNZXNzYWdlcy4wLkJvZHkuUmVjb3Jkcy4wLnMzLm9iamVjdC5rZXknLCBpbnRlZy5FeHBlY3RlZFJlc3VsdC5zdHJpbmdMaWtlUmVnZXhwKCdpbWFnZVxcXFwucG5nJykpKTtcblxuYXBwLnN5bnRoKCk7XG4iXX0=