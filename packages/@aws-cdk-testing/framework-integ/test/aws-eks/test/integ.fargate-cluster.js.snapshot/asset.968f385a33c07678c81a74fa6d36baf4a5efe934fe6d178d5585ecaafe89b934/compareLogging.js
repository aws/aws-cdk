"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.compareLoggingProps = void 0;
function compareLoggingProps(oldProps, newProps) {
    const result = { logging: {} };
    let enabledTypes = [];
    let disabledTypes = [];
    if (newProps.logging?.clusterLogging === undefined && oldProps.logging?.clusterLogging === undefined) {
        return newProps;
    }
    // if newProps containes LogSetup
    if (newProps.logging && newProps.logging.clusterLogging && newProps.logging.clusterLogging.length > 0) {
        enabledTypes = newProps.logging.clusterLogging[0].types;
        // if oldProps contains LogSetup with enabled:true
        if (oldProps.logging && oldProps.logging.clusterLogging && oldProps.logging.clusterLogging.length > 0) {
            // LogType in oldProp but not in newProp should be considered disabled(enabled:false)
            disabledTypes = oldProps.logging.clusterLogging[0].types.filter(t => !newProps.logging.clusterLogging[0].types.includes(t));
        }
    }
    else {
        // all enabled:true in oldProps will be enabled:false
        disabledTypes = oldProps.logging.clusterLogging[0].types;
    }
    if (enabledTypes.length > 0 || disabledTypes.length > 0) {
        result.logging = { clusterLogging: [] };
    }
    // append the enabled:false LogSetup to the result
    if (enabledTypes.length > 0) {
        result.logging.clusterLogging.push({ types: enabledTypes, enabled: true });
    }
    // append the enabled:false LogSetup to the result
    if (disabledTypes.length > 0) {
        result.logging.clusterLogging.push({ types: disabledTypes, enabled: false });
    }
    return result;
}
exports.compareLoggingProps = compareLoggingProps;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGFyZUxvZ2dpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb21wYXJlTG9nZ2luZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFXQSxTQUFnQixtQkFBbUIsQ0FBQyxRQUFnRCxFQUNsRixRQUFnRDtJQUNoRCxNQUFNLE1BQU0sR0FBMkMsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUM7SUFDdkUsSUFBSSxZQUFZLEdBQTZCLEVBQUUsQ0FBQztJQUNoRCxJQUFJLGFBQWEsR0FBNkIsRUFBRSxDQUFDO0lBRWpELElBQUksUUFBUSxDQUFDLE9BQU8sRUFBRSxjQUFjLEtBQUssU0FBUyxJQUFJLFFBQVEsQ0FBQyxPQUFPLEVBQUUsY0FBYyxLQUFLLFNBQVMsRUFBRTtRQUNwRyxPQUFPLFFBQVEsQ0FBQztLQUNqQjtJQUNELGlDQUFpQztJQUNqQyxJQUFJLFFBQVEsQ0FBQyxPQUFPLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxjQUFjLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUNyRyxZQUFZLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBTSxDQUFDO1FBQ3pELGtEQUFrRDtRQUNsRCxJQUFJLFFBQVEsQ0FBQyxPQUFPLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxjQUFjLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNyRyxxRkFBcUY7WUFDckYsYUFBYSxHQUFHLFFBQVEsQ0FBQyxPQUFRLENBQUMsY0FBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFRLENBQUMsY0FBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNuSTtLQUNGO1NBQU07UUFDTCxxREFBcUQ7UUFDckQsYUFBYSxHQUFHLFFBQVEsQ0FBQyxPQUFRLENBQUMsY0FBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQU0sQ0FBQztLQUM3RDtJQUVELElBQUksWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksYUFBYSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDdkQsTUFBTSxDQUFDLE9BQU8sR0FBRyxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQztLQUN6QztJQUVELGtEQUFrRDtJQUNsRCxJQUFJLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQzNCLE1BQU0sQ0FBQyxPQUFRLENBQUMsY0FBZSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7S0FDOUU7SUFDRCxrREFBa0Q7SUFDbEQsSUFBSSxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUM1QixNQUFNLENBQUMsT0FBUSxDQUFDLGNBQWUsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0tBQ2hGO0lBQ0QsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQW5DRCxrREFtQ0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgZnVuY3Rpb24gY29tcGFyZXMgdGhlIGxvZ2dpbmcgY29uZmlndXJhdGlvbiBmcm9tIG9sZFByb3BzIGFuZCBuZXdQcm9wcyBhbmQgcmV0dXJuc1xuICogdGhlIHJlc3VsdCB0aGF0IGNvbnRhaW5zIExvZ1NldHVwIHdpdGggZW5hYmxlZDpmYWxzZSBpZiBhbnkuXG4gKlxuICogQHBhcmFtIG9sZFByb3BzIG9sZCBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0gbmV3UHJvcHMgbmV3IHByb3BlcnRpZXNcbiAqIEByZXR1cm5zIHJlc3VsdCB3aXRoIExvZ1NldCB3aXRoIGVuYWJsZWQ6ZmFsc2UgaWYgYW55XG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXNcbmltcG9ydCAqIGFzIEVLUyBmcm9tICdAYXdzLXNkay9jbGllbnQtZWtzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmVMb2dnaW5nUHJvcHMob2xkUHJvcHM6IFBhcnRpYWw8RUtTLkNyZWF0ZUNsdXN0ZXJDb21tYW5kSW5wdXQ+LFxuICBuZXdQcm9wczogUGFydGlhbDxFS1MuQ3JlYXRlQ2x1c3RlckNvbW1hbmRJbnB1dD4pOiBQYXJ0aWFsPEVLUy5DcmVhdGVDbHVzdGVyQ29tbWFuZElucHV0PiB7XG4gIGNvbnN0IHJlc3VsdDogUGFydGlhbDxFS1MuQ3JlYXRlQ2x1c3RlckNvbW1hbmRJbnB1dD4gPSB7IGxvZ2dpbmc6IHt9IH07XG4gIGxldCBlbmFibGVkVHlwZXM6IChFS1MuTG9nVHlwZSB8IHN0cmluZylbXSA9IFtdO1xuICBsZXQgZGlzYWJsZWRUeXBlczogKEVLUy5Mb2dUeXBlIHwgc3RyaW5nKVtdID0gW107XG5cbiAgaWYgKG5ld1Byb3BzLmxvZ2dpbmc/LmNsdXN0ZXJMb2dnaW5nID09PSB1bmRlZmluZWQgJiYgb2xkUHJvcHMubG9nZ2luZz8uY2x1c3RlckxvZ2dpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBuZXdQcm9wcztcbiAgfVxuICAvLyBpZiBuZXdQcm9wcyBjb250YWluZXMgTG9nU2V0dXBcbiAgaWYgKG5ld1Byb3BzLmxvZ2dpbmcgJiYgbmV3UHJvcHMubG9nZ2luZy5jbHVzdGVyTG9nZ2luZyAmJiBuZXdQcm9wcy5sb2dnaW5nLmNsdXN0ZXJMb2dnaW5nLmxlbmd0aCA+IDApIHtcbiAgICBlbmFibGVkVHlwZXMgPSBuZXdQcm9wcy5sb2dnaW5nLmNsdXN0ZXJMb2dnaW5nWzBdLnR5cGVzITtcbiAgICAvLyBpZiBvbGRQcm9wcyBjb250YWlucyBMb2dTZXR1cCB3aXRoIGVuYWJsZWQ6dHJ1ZVxuICAgIGlmIChvbGRQcm9wcy5sb2dnaW5nICYmIG9sZFByb3BzLmxvZ2dpbmcuY2x1c3RlckxvZ2dpbmcgJiYgb2xkUHJvcHMubG9nZ2luZy5jbHVzdGVyTG9nZ2luZy5sZW5ndGggPiAwKSB7XG4gICAgICAvLyBMb2dUeXBlIGluIG9sZFByb3AgYnV0IG5vdCBpbiBuZXdQcm9wIHNob3VsZCBiZSBjb25zaWRlcmVkIGRpc2FibGVkKGVuYWJsZWQ6ZmFsc2UpXG4gICAgICBkaXNhYmxlZFR5cGVzID0gb2xkUHJvcHMubG9nZ2luZyEuY2x1c3RlckxvZ2dpbmchWzBdLnR5cGVzIS5maWx0ZXIodCA9PiAhbmV3UHJvcHMubG9nZ2luZyEuY2x1c3RlckxvZ2dpbmchWzBdLnR5cGVzIS5pbmNsdWRlcyh0KSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGFsbCBlbmFibGVkOnRydWUgaW4gb2xkUHJvcHMgd2lsbCBiZSBlbmFibGVkOmZhbHNlXG4gICAgZGlzYWJsZWRUeXBlcyA9IG9sZFByb3BzLmxvZ2dpbmchLmNsdXN0ZXJMb2dnaW5nIVswXS50eXBlcyE7XG4gIH1cblxuICBpZiAoZW5hYmxlZFR5cGVzLmxlbmd0aCA+IDAgfHwgZGlzYWJsZWRUeXBlcy5sZW5ndGggPiAwKSB7XG4gICAgcmVzdWx0LmxvZ2dpbmcgPSB7IGNsdXN0ZXJMb2dnaW5nOiBbXSB9O1xuICB9XG5cbiAgLy8gYXBwZW5kIHRoZSBlbmFibGVkOmZhbHNlIExvZ1NldHVwIHRvIHRoZSByZXN1bHRcbiAgaWYgKGVuYWJsZWRUeXBlcy5sZW5ndGggPiAwKSB7XG4gICAgcmVzdWx0LmxvZ2dpbmchLmNsdXN0ZXJMb2dnaW5nIS5wdXNoKHsgdHlwZXM6IGVuYWJsZWRUeXBlcywgZW5hYmxlZDogdHJ1ZSB9KTtcbiAgfVxuICAvLyBhcHBlbmQgdGhlIGVuYWJsZWQ6ZmFsc2UgTG9nU2V0dXAgdG8gdGhlIHJlc3VsdFxuICBpZiAoZGlzYWJsZWRUeXBlcy5sZW5ndGggPiAwKSB7XG4gICAgcmVzdWx0LmxvZ2dpbmchLmNsdXN0ZXJMb2dnaW5nIS5wdXNoKHsgdHlwZXM6IGRpc2FibGVkVHlwZXMsIGVuYWJsZWQ6IGZhbHNlIH0pO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG4iXX0=