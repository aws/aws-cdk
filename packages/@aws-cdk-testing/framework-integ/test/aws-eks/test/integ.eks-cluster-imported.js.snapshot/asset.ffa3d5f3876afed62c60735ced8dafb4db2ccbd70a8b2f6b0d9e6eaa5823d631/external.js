"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.external = void 0;
const tls = require("tls");
const url = require("url");
// eslint-disable-next-line import/no-extraneous-dependencies
const aws = require("aws-sdk");
let client;
function iam() {
    if (!client) {
        client = new aws.IAM();
    }
    return client;
}
function defaultLogger(fmt, ...args) {
    // eslint-disable-next-line no-console
    console.log(fmt, ...args);
}
/**
 * Downloads the CA thumbprint from the issuer URL
 */
async function downloadThumbprint(issuerUrl) {
    return new Promise((ok, ko) => {
        const purl = url.parse(issuerUrl);
        const port = purl.port ? parseInt(purl.port, 10) : 443;
        if (!purl.host) {
            return ko(new Error(`unable to determine host from issuer url ${issuerUrl}`));
        }
        exports.external.log(`Fetching x509 certificate chain from issuer ${issuerUrl}`);
        const socket = tls.connect(port, purl.host, { rejectUnauthorized: false, servername: purl.host });
        socket.once('error', ko);
        socket.once('secureConnect', () => {
            let cert = socket.getPeerX509Certificate();
            if (!cert) {
                throw new Error(`Unable to retrieve X509 certificate from host ${purl.host}`);
            }
            while (cert.issuerCertificate) {
                printCertificate(cert);
                cert = cert.issuerCertificate;
            }
            const validTo = new Date(cert.validTo);
            const certificateValidity = getCertificateValidity(validTo);
            if (certificateValidity < 0) {
                return ko(new Error(`The certificate has already expired on: ${validTo.toUTCString()}`));
            }
            // Warning user if certificate validity is expiring within 6 months
            if (certificateValidity < 180) {
                /* eslint-disable-next-line no-console */
                console.warn(`The root certificate obtained would expire in ${certificateValidity} days!`);
            }
            socket.end();
            const thumbprint = extractThumbprint(cert);
            exports.external.log(`Certificate Authority thumbprint for ${issuerUrl} is ${thumbprint}`);
            ok(thumbprint);
        });
    });
}
function extractThumbprint(cert) {
    return cert.fingerprint.split(':').join('');
}
function printCertificate(cert) {
    exports.external.log('-------------BEGIN CERT----------------');
    exports.external.log(`Thumbprint: ${extractThumbprint(cert)}`);
    exports.external.log(`Valid To: ${cert.validTo}`);
    if (cert.issuerCertificate) {
        exports.external.log(`Issuer Thumbprint: ${extractThumbprint(cert.issuerCertificate)}`);
    }
    exports.external.log(`Issuer: ${cert.issuer}`);
    exports.external.log(`Subject: ${cert.subject}`);
    exports.external.log('-------------END CERT------------------');
}
/**
 * To get the validity timeline for the certificate
 * @param certDate The valid to date for the certificate
 * @returns The number of days the certificate is valid wrt current date
 */
function getCertificateValidity(certDate) {
    const millisecondsInDay = 24 * 60 * 60 * 1000;
    const currentDate = new Date();
    const validity = Math.round((certDate.getTime() - currentDate.getTime()) / millisecondsInDay);
    return validity;
}
// allows unit test to replace with mocks
/* eslint-disable max-len */
exports.external = {
    downloadThumbprint,
    log: defaultLogger,
    createOpenIDConnectProvider: (req) => iam().createOpenIDConnectProvider(req).promise(),
    deleteOpenIDConnectProvider: (req) => iam().deleteOpenIDConnectProvider(req).promise(),
    updateOpenIDConnectProviderThumbprint: (req) => iam().updateOpenIDConnectProviderThumbprint(req).promise(),
    addClientIDToOpenIDConnectProvider: (req) => iam().addClientIDToOpenIDConnectProvider(req).promise(),
    removeClientIDFromOpenIDConnectProvider: (req) => iam().removeClientIDFromOpenIDConnectProvider(req).promise(),
};
//# sourceMappingURL=data:application/json;base64,