"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_cdk_lib_1 = require("aws-cdk-lib");
const integ_tests_alpha_1 = require("@aws-cdk/integ-tests-alpha");
const ssm = require("aws-cdk-lib/aws-ssm");
const app = new aws_cdk_lib_1.App();
const stack = new aws_cdk_lib_1.Stack(app, 'integ-parameter-arns');
const input = new aws_cdk_lib_1.CfnParameter(stack, 'ParameterNameParameter', { type: 'String', default: 'myParamName' });
const params = [
    new ssm.StringParameter(stack, 'StringAutogen', { stringValue: 'hello, world' }),
    new ssm.StringParameter(stack, 'StringSimple', { stringValue: 'hello, world', parameterName: 'simple-name' }),
    new ssm.StringParameter(stack, 'StringPath', { stringValue: 'hello, world', parameterName: '/path/name/foo/bar' }),
    new ssm.StringListParameter(stack, 'ListAutogen', { stringListValue: ['hello', 'world'] }),
    new ssm.StringListParameter(stack, 'ListSimple', { stringListValue: ['hello', 'world'], parameterName: 'list-simple-name' }),
    new ssm.StringListParameter(stack, 'ListPath', { stringListValue: ['hello', 'world'], parameterName: '/list/path/name' }),
    new ssm.StringParameter(stack, 'ParameterizedSimple', { stringValue: 'hello, world', parameterName: input.valueAsString, simpleName: true }),
    new ssm.StringParameter(stack, 'ParameterizedNonSimple', { stringValue: 'hello, world', parameterName: `/${input.valueAsString}/non/simple`, simpleName: false }),
];
for (const p of params) {
    new aws_cdk_lib_1.CfnOutput(stack, `${p.node.id}Arn`, { value: p.parameterArn });
}
new integ_tests_alpha_1.IntegTest(app, 'cdk-integ-ssm-parameter-arns', {
    testCases: [stack],
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcucGFyYW1ldGVyLWFybnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy5wYXJhbWV0ZXItYXJucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZDQUFrRTtBQUNsRSxrRUFBdUQ7QUFDdkQsMkNBQTJDO0FBRTNDLE1BQU0sR0FBRyxHQUFHLElBQUksaUJBQUcsRUFBRSxDQUFDO0FBQ3RCLE1BQU0sS0FBSyxHQUFHLElBQUksbUJBQUssQ0FBQyxHQUFHLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztBQUVyRCxNQUFNLEtBQUssR0FBRyxJQUFJLDBCQUFZLENBQUMsS0FBSyxFQUFFLHdCQUF3QixFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQztBQUU1RyxNQUFNLE1BQU0sR0FBRztJQUNiLElBQUksR0FBRyxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsZUFBZSxFQUFFLEVBQUUsV0FBVyxFQUFFLGNBQWMsRUFBRSxDQUFDO0lBQ2hGLElBQUksR0FBRyxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsY0FBYyxFQUFFLEVBQUUsV0FBVyxFQUFFLGNBQWMsRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLENBQUM7SUFDN0csSUFBSSxHQUFHLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUUsRUFBRSxXQUFXLEVBQUUsY0FBYyxFQUFFLGFBQWEsRUFBRSxvQkFBb0IsRUFBRSxDQUFDO0lBQ2xILElBQUksR0FBRyxDQUFDLG1CQUFtQixDQUFDLEtBQUssRUFBRSxhQUFhLEVBQUUsRUFBRSxlQUFlLEVBQUUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQztJQUMxRixJQUFJLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFLEVBQUUsZUFBZSxFQUFFLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxFQUFFLGFBQWEsRUFBRSxrQkFBa0IsRUFBRSxDQUFDO0lBQzVILElBQUksR0FBRyxDQUFDLG1CQUFtQixDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUUsRUFBRSxlQUFlLEVBQUUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLEVBQUUsYUFBYSxFQUFFLGlCQUFpQixFQUFFLENBQUM7SUFDekgsSUFBSSxHQUFHLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxxQkFBcUIsRUFBRSxFQUFFLFdBQVcsRUFBRSxjQUFjLEVBQUUsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDO0lBQzVJLElBQUksR0FBRyxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsd0JBQXdCLEVBQUUsRUFBRSxXQUFXLEVBQUUsY0FBYyxFQUFFLGFBQWEsRUFBRSxJQUFJLEtBQUssQ0FBQyxhQUFhLGFBQWEsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLENBQUM7Q0FDbEssQ0FBQztBQUVGLEtBQUssTUFBTSxDQUFDLElBQUksTUFBTSxFQUFFO0lBQ3RCLElBQUksdUJBQVMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDO0NBQ3BFO0FBRUQsSUFBSSw2QkFBUyxDQUFDLEdBQUcsRUFBRSw4QkFBOEIsRUFBRTtJQUNqRCxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUM7Q0FDbkIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwLCBDZm5PdXRwdXQsIENmblBhcmFtZXRlciwgU3RhY2sgfSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBJbnRlZ1Rlc3QgfSBmcm9tICdAYXdzLWNkay9pbnRlZy10ZXN0cy1hbHBoYSc7XG5pbXBvcnQgKiBhcyBzc20gZnJvbSAnYXdzLWNkay1saWIvYXdzLXNzbSc7XG5cbmNvbnN0IGFwcCA9IG5ldyBBcHAoKTtcbmNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKGFwcCwgJ2ludGVnLXBhcmFtZXRlci1hcm5zJyk7XG5cbmNvbnN0IGlucHV0ID0gbmV3IENmblBhcmFtZXRlcihzdGFjaywgJ1BhcmFtZXRlck5hbWVQYXJhbWV0ZXInLCB7IHR5cGU6ICdTdHJpbmcnLCBkZWZhdWx0OiAnbXlQYXJhbU5hbWUnIH0pO1xuXG5jb25zdCBwYXJhbXMgPSBbXG4gIG5ldyBzc20uU3RyaW5nUGFyYW1ldGVyKHN0YWNrLCAnU3RyaW5nQXV0b2dlbicsIHsgc3RyaW5nVmFsdWU6ICdoZWxsbywgd29ybGQnIH0pLFxuICBuZXcgc3NtLlN0cmluZ1BhcmFtZXRlcihzdGFjaywgJ1N0cmluZ1NpbXBsZScsIHsgc3RyaW5nVmFsdWU6ICdoZWxsbywgd29ybGQnLCBwYXJhbWV0ZXJOYW1lOiAnc2ltcGxlLW5hbWUnIH0pLFxuICBuZXcgc3NtLlN0cmluZ1BhcmFtZXRlcihzdGFjaywgJ1N0cmluZ1BhdGgnLCB7IHN0cmluZ1ZhbHVlOiAnaGVsbG8sIHdvcmxkJywgcGFyYW1ldGVyTmFtZTogJy9wYXRoL25hbWUvZm9vL2JhcicgfSksXG4gIG5ldyBzc20uU3RyaW5nTGlzdFBhcmFtZXRlcihzdGFjaywgJ0xpc3RBdXRvZ2VuJywgeyBzdHJpbmdMaXN0VmFsdWU6IFsnaGVsbG8nLCAnd29ybGQnXSB9KSxcbiAgbmV3IHNzbS5TdHJpbmdMaXN0UGFyYW1ldGVyKHN0YWNrLCAnTGlzdFNpbXBsZScsIHsgc3RyaW5nTGlzdFZhbHVlOiBbJ2hlbGxvJywgJ3dvcmxkJ10sIHBhcmFtZXRlck5hbWU6ICdsaXN0LXNpbXBsZS1uYW1lJyB9KSxcbiAgbmV3IHNzbS5TdHJpbmdMaXN0UGFyYW1ldGVyKHN0YWNrLCAnTGlzdFBhdGgnLCB7IHN0cmluZ0xpc3RWYWx1ZTogWydoZWxsbycsICd3b3JsZCddLCBwYXJhbWV0ZXJOYW1lOiAnL2xpc3QvcGF0aC9uYW1lJyB9KSxcbiAgbmV3IHNzbS5TdHJpbmdQYXJhbWV0ZXIoc3RhY2ssICdQYXJhbWV0ZXJpemVkU2ltcGxlJywgeyBzdHJpbmdWYWx1ZTogJ2hlbGxvLCB3b3JsZCcsIHBhcmFtZXRlck5hbWU6IGlucHV0LnZhbHVlQXNTdHJpbmcsIHNpbXBsZU5hbWU6IHRydWUgfSksXG4gIG5ldyBzc20uU3RyaW5nUGFyYW1ldGVyKHN0YWNrLCAnUGFyYW1ldGVyaXplZE5vblNpbXBsZScsIHsgc3RyaW5nVmFsdWU6ICdoZWxsbywgd29ybGQnLCBwYXJhbWV0ZXJOYW1lOiBgLyR7aW5wdXQudmFsdWVBc1N0cmluZ30vbm9uL3NpbXBsZWAsIHNpbXBsZU5hbWU6IGZhbHNlIH0pLFxuXTtcblxuZm9yIChjb25zdCBwIG9mIHBhcmFtcykge1xuICBuZXcgQ2ZuT3V0cHV0KHN0YWNrLCBgJHtwLm5vZGUuaWR9QXJuYCwgeyB2YWx1ZTogcC5wYXJhbWV0ZXJBcm4gfSk7XG59XG5cbm5ldyBJbnRlZ1Rlc3QoYXBwLCAnY2RrLWludGVnLXNzbS1wYXJhbWV0ZXItYXJucycsIHtcbiAgdGVzdENhc2VzOiBbc3RhY2tdLFxufSk7XG4iXX0=