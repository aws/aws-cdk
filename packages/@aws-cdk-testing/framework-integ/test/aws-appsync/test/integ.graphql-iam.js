"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const aws_cognito_1 = require("aws-cdk-lib/aws-cognito");
const aws_dynamodb_1 = require("aws-cdk-lib/aws-dynamodb");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_appsync_1 = require("aws-cdk-lib/aws-appsync");
/*
 * Creates an Appsync GraphQL API and Lambda with IAM Roles.
 * Testing for IAM Auth and grantFullAccess.
 *
 * Stack verification steps:
 * Install dependencies and deploy integration test. Invoke Lambda
 * function with different permissions to test policies.
 *
 * -- bash verify.integ.graphql-iam.sh --start             -- get dependencies/deploy    --
 * -- aws lambda list-functions                            -- obtain testFail/testQuery  --
 * -- aws lambda invoke /dev/stdout --function-name [FAIL] -- fails beacuse no IAM Role` --
 * -- aws lambda invoke /dev/stdout --function-name [Query]-- succeeds with empty get  ` --
 * -- bash verify.integ.graphql-iam.sh --clean             -- clean dependencies/deploy  --
 */
const app = new aws_cdk_lib_1.App();
const stack = new aws_cdk_lib_1.Stack(app, 'aws-appsync-integ');
const userPool = new aws_cognito_1.UserPool(stack, 'Pool', {
    userPoolName: 'myPool',
});
const api = new aws_appsync_1.GraphqlApi(stack, 'Api', {
    name: 'Integ_Test_IAM',
    schema: aws_appsync_1.SchemaFile.fromAsset((0, path_1.join)(__dirname, 'integ.graphql-iam.graphql')),
    authorizationConfig: {
        defaultAuthorization: {
            authorizationType: aws_appsync_1.AuthorizationType.USER_POOL,
            userPoolConfig: {
                userPool,
                defaultAction: aws_appsync_1.UserPoolDefaultAction.ALLOW,
            },
        },
        additionalAuthorizationModes: [
            {
                authorizationType: aws_appsync_1.AuthorizationType.IAM,
            },
        ],
    },
});
const testTable = new aws_dynamodb_1.Table(stack, 'TestTable', {
    billingMode: aws_dynamodb_1.BillingMode.PAY_PER_REQUEST,
    partitionKey: {
        name: 'id',
        type: aws_dynamodb_1.AttributeType.STRING,
    },
    removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
});
const testDS = api.addDynamoDbDataSource('ds', testTable, { name: 'testDataSource' });
testDS.createResolver('QueryGetTest', {
    typeName: 'Query',
    fieldName: 'getTest',
    requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbGetItem('id', 'id'),
    responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultItem(),
});
testDS.createResolver('QueryGetTests', {
    typeName: 'Query',
    fieldName: 'getTests',
    requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbScanTable(),
    responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultList(),
});
testDS.createResolver('MutationAddTest', {
    typeName: 'Mutation',
    fieldName: 'addTest',
    requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbPutItem(aws_appsync_1.PrimaryKey.partition('id').auto(), aws_appsync_1.Values.projecting('test')),
    responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultItem(),
});
const lambdaIAM = new aws_iam_1.Role(stack, 'LambdaIAM', { assumedBy: new aws_iam_1.ServicePrincipal('lambda') });
api.grant(lambdaIAM, aws_appsync_1.IamResource.custom('types/Query/fields/getTests'), 'appsync:graphql');
api.grant(lambdaIAM, aws_appsync_1.IamResource.ofType('test'), 'appsync:GraphQL');
api.grantMutation(lambdaIAM, 'addTest');
new aws_lambda_1.Function(stack, 'testQuery', {
    code: aws_lambda_1.Code.fromAsset((0, path_1.join)(__dirname, 'verify/iam-query')),
    handler: 'iam-query.handler',
    runtime: aws_lambda_1.Runtime.NODEJS_14_X,
    environment: { APPSYNC_ENDPOINT: api.graphqlUrl },
    role: lambdaIAM,
});
new aws_lambda_1.Function(stack, 'testFail', {
    code: aws_lambda_1.Code.fromAsset((0, path_1.join)(__dirname, 'verify/iam-query')),
    handler: 'iam-query.handler',
    runtime: aws_lambda_1.Runtime.NODEJS_14_X,
    environment: { APPSYNC_ENDPOINT: api.graphqlUrl },
});
app.synth();
//# sourceMappingURL=data:application/json;base64,