"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const dynamodb = require("aws-cdk-lib/aws-dynamodb");
const lambda = require("aws-cdk-lib/aws-lambda");
const logs = require("aws-cdk-lib/aws-logs");
const cdk = require("aws-cdk-lib");
const integ_tests_alpha_1 = require("@aws-cdk/integ-tests-alpha");
const appsync = require("aws-cdk-lib/aws-appsync");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'AppSyncJsResolverTestStack');
const logConfig = {
    retention: logs.RetentionDays.ONE_WEEK,
};
const api = new appsync.GraphqlApi(stack, 'JsResolverApi', {
    name: 'JsResolverApi',
    schema: appsync.SchemaFile.fromAsset(path.join(__dirname, 'appsync.js-resolver.graphql')),
    logConfig,
});
const db = new dynamodb.Table(stack, 'DynamoTable', {
    partitionKey: {
        name: 'id',
        type: dynamodb.AttributeType.STRING,
    },
    removalPolicy: cdk.RemovalPolicy.DESTROY,
});
const dataSource = api.addDynamoDbDataSource('DynamoDataSource', db);
const addTestFunc = dataSource.createFunction('AddTestFunction', {
    name: 'addTestFunc',
    runtime: appsync.FunctionRuntime.JS_1_0_0,
    code: appsync.Code.fromAsset(path.join(__dirname, 'integ-assets', 'appsync-js-resolver.js')),
});
new appsync.Resolver(stack, 'AddTestResolver', {
    api,
    typeName: 'Mutation',
    fieldName: 'addTest',
    code: appsync.Code.fromAsset(path.join(__dirname, 'integ-assets', 'appsync-js-pipeline.js')),
    runtime: appsync.FunctionRuntime.JS_1_0_0,
    pipelineConfig: [addTestFunc],
});
const integ = new integ_tests_alpha_1.IntegTest(app, 'JsResolverIntegTest', { testCases: [stack] });
/**
 * Handler that calls our api with an `addTest` Mutation
 */
const invoke = new lambda.Function(stack, 'InvokeApi', {
    code: lambda.Code.fromAsset(path.join(__dirname, 'integ-assets/js-resolver-assertion')),
    handler: 'index.handler',
    runtime: lambda.Runtime.NODEJS_18_X,
});
const addTestInvoke = integ.assertions.invokeFunction({
    functionName: invoke.functionName,
    payload: JSON.stringify({
        hostname: api.graphqlUrl,
        apiKey: api.apiKey,
    }),
});
/**
 * Assert result returned on API has a generated ID and the passed name.
 */
addTestInvoke.assertAtPath('Payload.data.addTest.name', integ_tests_alpha_1.ExpectedResult.stringLikeRegexp('123'));
addTestInvoke.assertAtPath('Payload.data.addTest.id', integ_tests_alpha_1.ExpectedResult.stringLikeRegexp('.+'));
/**
 * Generated ID of the item added in the previous handler
 */
const addTestResultId = addTestInvoke.getAttString('Payload.data.addTest.id');
/**
 * Try to find the item added in the DynamoDB data source.
 */
const getItemCall = integ.assertions.awsApiCall('DynamoDB', 'getItem', {
    TableName: db.tableName,
    Key: {
        id: {
            S: addTestResultId,
        },
    },
});
getItemCall.expect(integ_tests_alpha_1.ExpectedResult.objectLike({
    Item: {
        name: {
            S: '123',
        },
        id: {
            S: addTestResultId,
        },
    },
}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuanMtcmVzb2x2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy5qcy1yZXNvbHZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUE2QjtBQUM3QixxREFBcUQ7QUFDckQsaURBQWlEO0FBQ2pELDZDQUE2QztBQUM3QyxtQ0FBbUM7QUFDbkMsa0VBQXVFO0FBQ3ZFLG1EQUFtRDtBQUVuRCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUMxQixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLDRCQUE0QixDQUFDLENBQUM7QUFFL0QsTUFBTSxTQUFTLEdBQXNCO0lBQ25DLFNBQVMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVE7Q0FDdkMsQ0FBQztBQUVGLE1BQU0sR0FBRyxHQUFHLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsZUFBZSxFQUFFO0lBQ3pELElBQUksRUFBRSxlQUFlO0lBQ3JCLE1BQU0sRUFBRSxPQUFPLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSw2QkFBNkIsQ0FBQyxDQUFDO0lBQ3pGLFNBQVM7Q0FDVixDQUFDLENBQUM7QUFFSCxNQUFNLEVBQUUsR0FBRyxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLGFBQWEsRUFBRTtJQUNsRCxZQUFZLEVBQUU7UUFDWixJQUFJLEVBQUUsSUFBSTtRQUNWLElBQUksRUFBRSxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU07S0FDcEM7SUFDRCxhQUFhLEVBQUUsR0FBRyxDQUFDLGFBQWEsQ0FBQyxPQUFPO0NBQ3pDLENBQUMsQ0FBQztBQUVILE1BQU0sVUFBVSxHQUFHLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUVyRSxNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUMsY0FBYyxDQUFDLGlCQUFpQixFQUFFO0lBQy9ELElBQUksRUFBRSxhQUFhO0lBQ25CLE9BQU8sRUFBRSxPQUFPLENBQUMsZUFBZSxDQUFDLFFBQVE7SUFDekMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ3BDLFNBQVMsRUFDVCxjQUFjLEVBQ2Qsd0JBQXdCLENBQ3pCLENBQUM7Q0FDSCxDQUFDLENBQUM7QUFFSCxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLGlCQUFpQixFQUFFO0lBQzdDLEdBQUc7SUFDSCxRQUFRLEVBQUUsVUFBVTtJQUNwQixTQUFTLEVBQUUsU0FBUztJQUNwQixJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FDcEMsU0FBUyxFQUNULGNBQWMsRUFDZCx3QkFBd0IsQ0FDekIsQ0FBQztJQUNGLE9BQU8sRUFBRSxPQUFPLENBQUMsZUFBZSxDQUFDLFFBQVE7SUFDekMsY0FBYyxFQUFFLENBQUMsV0FBVyxDQUFDO0NBQzlCLENBQUMsQ0FBQztBQUVILE1BQU0sS0FBSyxHQUFHLElBQUksNkJBQVMsQ0FBQyxHQUFHLEVBQUUscUJBQXFCLEVBQUUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFaEY7O0dBRUc7QUFDSCxNQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRTtJQUNyRCxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsb0NBQW9DLENBQUMsQ0FBQztJQUN2RixPQUFPLEVBQUUsZUFBZTtJQUN4QixPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXO0NBQ3BDLENBQUMsQ0FBQztBQUVILE1BQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDO0lBQ3BELFlBQVksRUFBRSxNQUFNLENBQUMsWUFBWTtJQUNqQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN0QixRQUFRLEVBQUUsR0FBRyxDQUFDLFVBQVU7UUFDeEIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNO0tBQ25CLENBQUM7Q0FDSCxDQUFDLENBQUM7QUFFSDs7R0FFRztBQUNILGFBQWEsQ0FBQyxZQUFZLENBQ3hCLDJCQUEyQixFQUMzQixrQ0FBYyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUN2QyxDQUFDO0FBRUYsYUFBYSxDQUFDLFlBQVksQ0FDeEIseUJBQXlCLEVBQ3pCLGtDQUFjLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQ3RDLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sZUFBZSxHQUFHLGFBQWEsQ0FBQyxZQUFZLENBQUMseUJBQXlCLENBQUMsQ0FBQztBQUU5RTs7R0FFRztBQUNILE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDckUsU0FBUyxFQUFFLEVBQUUsQ0FBQyxTQUFTO0lBQ3ZCLEdBQUcsRUFBRTtRQUNILEVBQUUsRUFBRTtZQUNGLENBQUMsRUFBRSxlQUFlO1NBQ25CO0tBQ0Y7Q0FDRixDQUFDLENBQUM7QUFFSCxXQUFXLENBQUMsTUFBTSxDQUFDLGtDQUFjLENBQUMsVUFBVSxDQUFDO0lBQzNDLElBQUksRUFBRTtRQUNKLElBQUksRUFBRTtZQUNKLENBQUMsRUFBRSxLQUFLO1NBQ1Q7UUFDRCxFQUFFLEVBQUU7WUFDRixDQUFDLEVBQUUsZUFBZTtTQUNuQjtLQUNGO0NBQ0YsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0ICogYXMgZHluYW1vZGIgZnJvbSAnYXdzLWNkay1saWIvYXdzLWR5bmFtb2RiJztcbmltcG9ydCAqIGFzIGxhbWJkYSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtbGFtYmRhJztcbmltcG9ydCAqIGFzIGxvZ3MgZnJvbSAnYXdzLWNkay1saWIvYXdzLWxvZ3MnO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IEludGVnVGVzdCwgRXhwZWN0ZWRSZXN1bHQgfSBmcm9tICdAYXdzLWNkay9pbnRlZy10ZXN0cy1hbHBoYSc7XG5pbXBvcnQgKiBhcyBhcHBzeW5jIGZyb20gJ2F3cy1jZGstbGliL2F3cy1hcHBzeW5jJztcblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcbmNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjayhhcHAsICdBcHBTeW5jSnNSZXNvbHZlclRlc3RTdGFjaycpO1xuXG5jb25zdCBsb2dDb25maWc6IGFwcHN5bmMuTG9nQ29uZmlnID0ge1xuICByZXRlbnRpb246IGxvZ3MuUmV0ZW50aW9uRGF5cy5PTkVfV0VFSyxcbn07XG5cbmNvbnN0IGFwaSA9IG5ldyBhcHBzeW5jLkdyYXBocWxBcGkoc3RhY2ssICdKc1Jlc29sdmVyQXBpJywge1xuICBuYW1lOiAnSnNSZXNvbHZlckFwaScsXG4gIHNjaGVtYTogYXBwc3luYy5TY2hlbWFGaWxlLmZyb21Bc3NldChwYXRoLmpvaW4oX19kaXJuYW1lLCAnYXBwc3luYy5qcy1yZXNvbHZlci5ncmFwaHFsJykpLFxuICBsb2dDb25maWcsXG59KTtcblxuY29uc3QgZGIgPSBuZXcgZHluYW1vZGIuVGFibGUoc3RhY2ssICdEeW5hbW9UYWJsZScsIHtcbiAgcGFydGl0aW9uS2V5OiB7XG4gICAgbmFtZTogJ2lkJyxcbiAgICB0eXBlOiBkeW5hbW9kYi5BdHRyaWJ1dGVUeXBlLlNUUklORyxcbiAgfSxcbiAgcmVtb3ZhbFBvbGljeTogY2RrLlJlbW92YWxQb2xpY3kuREVTVFJPWSxcbn0pO1xuXG5jb25zdCBkYXRhU291cmNlID0gYXBpLmFkZER5bmFtb0RiRGF0YVNvdXJjZSgnRHluYW1vRGF0YVNvdXJjZScsIGRiKTtcblxuY29uc3QgYWRkVGVzdEZ1bmMgPSBkYXRhU291cmNlLmNyZWF0ZUZ1bmN0aW9uKCdBZGRUZXN0RnVuY3Rpb24nLCB7XG4gIG5hbWU6ICdhZGRUZXN0RnVuYycsXG4gIHJ1bnRpbWU6IGFwcHN5bmMuRnVuY3Rpb25SdW50aW1lLkpTXzFfMF8wLFxuICBjb2RlOiBhcHBzeW5jLkNvZGUuZnJvbUFzc2V0KHBhdGguam9pbihcbiAgICBfX2Rpcm5hbWUsXG4gICAgJ2ludGVnLWFzc2V0cycsXG4gICAgJ2FwcHN5bmMtanMtcmVzb2x2ZXIuanMnLFxuICApKSxcbn0pO1xuXG5uZXcgYXBwc3luYy5SZXNvbHZlcihzdGFjaywgJ0FkZFRlc3RSZXNvbHZlcicsIHtcbiAgYXBpLFxuICB0eXBlTmFtZTogJ011dGF0aW9uJyxcbiAgZmllbGROYW1lOiAnYWRkVGVzdCcsXG4gIGNvZGU6IGFwcHN5bmMuQ29kZS5mcm9tQXNzZXQocGF0aC5qb2luKFxuICAgIF9fZGlybmFtZSxcbiAgICAnaW50ZWctYXNzZXRzJyxcbiAgICAnYXBwc3luYy1qcy1waXBlbGluZS5qcycsXG4gICkpLFxuICBydW50aW1lOiBhcHBzeW5jLkZ1bmN0aW9uUnVudGltZS5KU18xXzBfMCxcbiAgcGlwZWxpbmVDb25maWc6IFthZGRUZXN0RnVuY10sXG59KTtcblxuY29uc3QgaW50ZWcgPSBuZXcgSW50ZWdUZXN0KGFwcCwgJ0pzUmVzb2x2ZXJJbnRlZ1Rlc3QnLCB7IHRlc3RDYXNlczogW3N0YWNrXSB9KTtcblxuLyoqXG4gKiBIYW5kbGVyIHRoYXQgY2FsbHMgb3VyIGFwaSB3aXRoIGFuIGBhZGRUZXN0YCBNdXRhdGlvblxuICovXG5jb25zdCBpbnZva2UgPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHN0YWNrLCAnSW52b2tlQXBpJywge1xuICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tQXNzZXQocGF0aC5qb2luKF9fZGlybmFtZSwgJ2ludGVnLWFzc2V0cy9qcy1yZXNvbHZlci1hc3NlcnRpb24nKSksXG4gIGhhbmRsZXI6ICdpbmRleC5oYW5kbGVyJyxcbiAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzE4X1gsXG59KTtcblxuY29uc3QgYWRkVGVzdEludm9rZSA9IGludGVnLmFzc2VydGlvbnMuaW52b2tlRnVuY3Rpb24oe1xuICBmdW5jdGlvbk5hbWU6IGludm9rZS5mdW5jdGlvbk5hbWUsXG4gIHBheWxvYWQ6IEpTT04uc3RyaW5naWZ5KHtcbiAgICBob3N0bmFtZTogYXBpLmdyYXBocWxVcmwsXG4gICAgYXBpS2V5OiBhcGkuYXBpS2V5LFxuICB9KSxcbn0pO1xuXG4vKipcbiAqIEFzc2VydCByZXN1bHQgcmV0dXJuZWQgb24gQVBJIGhhcyBhIGdlbmVyYXRlZCBJRCBhbmQgdGhlIHBhc3NlZCBuYW1lLlxuICovXG5hZGRUZXN0SW52b2tlLmFzc2VydEF0UGF0aChcbiAgJ1BheWxvYWQuZGF0YS5hZGRUZXN0Lm5hbWUnLFxuICBFeHBlY3RlZFJlc3VsdC5zdHJpbmdMaWtlUmVnZXhwKCcxMjMnKSxcbik7XG5cbmFkZFRlc3RJbnZva2UuYXNzZXJ0QXRQYXRoKFxuICAnUGF5bG9hZC5kYXRhLmFkZFRlc3QuaWQnLFxuICBFeHBlY3RlZFJlc3VsdC5zdHJpbmdMaWtlUmVnZXhwKCcuKycpLFxuKTtcblxuLyoqXG4gKiBHZW5lcmF0ZWQgSUQgb2YgdGhlIGl0ZW0gYWRkZWQgaW4gdGhlIHByZXZpb3VzIGhhbmRsZXJcbiAqL1xuY29uc3QgYWRkVGVzdFJlc3VsdElkID0gYWRkVGVzdEludm9rZS5nZXRBdHRTdHJpbmcoJ1BheWxvYWQuZGF0YS5hZGRUZXN0LmlkJyk7XG5cbi8qKlxuICogVHJ5IHRvIGZpbmQgdGhlIGl0ZW0gYWRkZWQgaW4gdGhlIER5bmFtb0RCIGRhdGEgc291cmNlLlxuICovXG5jb25zdCBnZXRJdGVtQ2FsbCA9IGludGVnLmFzc2VydGlvbnMuYXdzQXBpQ2FsbCgnRHluYW1vREInLCAnZ2V0SXRlbScsIHtcbiAgVGFibGVOYW1lOiBkYi50YWJsZU5hbWUsXG4gIEtleToge1xuICAgIGlkOiB7XG4gICAgICBTOiBhZGRUZXN0UmVzdWx0SWQsXG4gICAgfSxcbiAgfSxcbn0pO1xuXG5nZXRJdGVtQ2FsbC5leHBlY3QoRXhwZWN0ZWRSZXN1bHQub2JqZWN0TGlrZSh7XG4gIEl0ZW06IHtcbiAgICBuYW1lOiB7XG4gICAgICBTOiAnMTIzJyxcbiAgICB9LFxuICAgIGlkOiB7XG4gICAgICBTOiBhZGRUZXN0UmVzdWx0SWQsXG4gICAgfSxcbiAgfSxcbn0pKTtcbiJdfQ==