{
 "Resources": {
  "AuthorizerFunctionServiceRole5B2A061B": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "AuthorizerFunctionB4DBAA43": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "\n            exports.handler = async (event) => {\n              console.log(\"Authorization event:\", JSON.stringify(event));\n\n              const isAuthorized = true;\n              if (isAuthorized) {\n                return {\n                  isAuthorized: true,\n                  resolverContext: {\n                    userId: 'user-id-example'\n                  }\n                };\n              } else {\n                return {\n                  isAuthorized: false\n                };\n              }\n            };\n          "
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "AuthorizerFunctionServiceRole5B2A061B",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x"
   },
   "DependsOn": [
    "AuthorizerFunctionServiceRole5B2A061B"
   ]
  },
  "AuthorizerFunctionEventApiLambdaAuthappsync51091519": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "AuthorizerFunctionB4DBAA43",
      "Arn"
     ]
    },
    "Principal": "appsync.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "EventApiLambdaAuth51CBDC5F",
      "ApiArn"
     ]
    }
   }
  },
  "EventApiLambdaAuth51CBDC5F": {
   "Type": "AWS::AppSync::Api",
   "Properties": {
    "EventConfig": {
     "AuthProviders": [
      {
       "AuthType": "AWS_LAMBDA",
       "LambdaAuthorizerConfig": {
        "AuthorizerUri": {
         "Fn::GetAtt": [
          "AuthorizerFunctionB4DBAA43",
          "Arn"
         ]
        }
       }
      }
     ],
     "ConnectionAuthModes": [
      {
       "AuthType": "AWS_LAMBDA"
      }
     ],
     "DefaultPublishAuthModes": [
      {
       "AuthType": "AWS_LAMBDA"
      }
     ],
     "DefaultSubscribeAuthModes": [
      {
       "AuthType": "AWS_LAMBDA"
      }
     ]
    },
    "Name": "api-iam-auth-test",
    "OwnerContact": "test-owner-contact"
   }
  },
  "EventApiLambdaAuthdefaultAC8660FF": {
   "Type": "AWS::AppSync::ChannelNamespace",
   "Properties": {
    "ApiId": {
     "Fn::GetAtt": [
      "EventApiLambdaAuth51CBDC5F",
      "ApiId"
     ]
    },
    "Name": "default"
   }
  },
  "LambdaConfigTestFunctionServiceRoleEE8A36D4": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "LambdaConfigTestFunction61A497A7": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "86c1f810188044ee5131336e9c4bd0c97bf5110181d112dfa5de98163adc8a8d.zip"
    },
    "Environment": {
     "Variables": {
      "EVENT_API_REALTIME_URL": {
       "Fn::Join": [
        "",
        [
         "wss://",
         {
          "Fn::GetAtt": [
           "EventApiLambdaAuth51CBDC5F",
           "Dns.Realtime"
          ]
         },
         "/event/realtime"
        ]
       ]
      },
      "EVENT_API_HTTP_URL": {
       "Fn::Join": [
        "",
        [
         "https://",
         {
          "Fn::GetAtt": [
           "EventApiLambdaAuth51CBDC5F",
           "Dns.Http"
          ]
         },
         "/event"
        ]
       ]
      }
     }
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "LambdaConfigTestFunctionServiceRoleEE8A36D4",
      "Arn"
     ]
    },
    "Runtime": "nodejs22.x",
    "Timeout": 15
   },
   "DependsOn": [
    "LambdaConfigTestFunctionServiceRoleEE8A36D4"
   ]
  }
 },
 "Outputs": {
  "AWSAppSyncEventsHTTPendpoint": {
   "Value": {
    "Fn::GetAtt": [
     "EventApiLambdaAuth51CBDC5F",
     "Dns.Http"
    ]
   }
  },
  "AWSAppSyncEventsRealtimeendpoint": {
   "Value": {
    "Fn::GetAtt": [
     "EventApiLambdaAuth51CBDC5F",
     "Dns.Realtime"
    ]
   }
  },
  "ExportsOutputRefLambdaConfigTestFunction61A497A7D5F221EA": {
   "Value": {
    "Ref": "LambdaConfigTestFunction61A497A7"
   },
   "Export": {
    "Name": "EventApiLambdaAuthStack:ExportsOutputRefLambdaConfigTestFunction61A497A7D5F221EA"
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}