{
 "Resources": {
  "Certificate4E7ABB08": {
   "Type": "AWS::CertificateManager::Certificate",
   "Properties": {
    "DomainName": "*.*.example.com",
    "DomainValidationOptions": [
     {
      "DomainName": "*.*.example.com",
      "HostedZoneId": "Z23ABC4XYZL05B"
     }
    ],
    "Tags": [
     {
      "Key": "Name",
      "Value": "appsync-event-api-stack/Certificate"
     }
    ],
    "ValidationMethod": "DNS"
   }
  },
  "PoolD3F588B8": {
   "Type": "AWS::Cognito::UserPool",
   "Properties": {
    "AccountRecoverySetting": {
     "RecoveryMechanisms": [
      {
       "Name": "verified_phone_number",
       "Priority": 1
      },
      {
       "Name": "verified_email",
       "Priority": 2
      }
     ]
    },
    "AdminCreateUserConfig": {
     "AllowAdminCreateUserOnly": true
    },
    "EmailVerificationMessage": "The verification code to your new account is {####}",
    "EmailVerificationSubject": "Verify your new account",
    "SmsVerificationMessage": "The verification code to your new account is {####}",
    "UserPoolName": "myPool",
    "VerificationMessageTemplate": {
     "DefaultEmailOption": "CONFIRM_WITH_CODE",
     "EmailMessage": "The verification code to your new account is {####}",
     "EmailSubject": "Verify your new account",
     "SmsMessage": "The verification code to your new account is {####}"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "AuthorizerFunctionServiceRole5B2A061B": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "AuthorizerFunctionB4DBAA43": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "\n            exports.handler = async (event) => {\n              console.log(\"Authorization event:\", JSON.stringify(event));\n\n              const isAuthorized = true;\n              if (isAuthorized) {\n                return {\n                  isAuthorized: true,\n                  resolverContext: {\n                    userId: 'user-id-example'\n                  }\n                };\n              } else {\n                return {\n                  isAuthorized: false\n                };\n              }\n            };\n          "
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "AuthorizerFunctionServiceRole5B2A061B",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x"
   },
   "DependsOn": [
    "AuthorizerFunctionServiceRole5B2A061B"
   ]
  },
  "AuthorizerFunctionEventApiappsyncE4B8E11D": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "AuthorizerFunctionB4DBAA43",
      "Arn"
     ]
    },
    "Principal": "appsync.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "EventApiE141E6C0",
      "ApiArn"
     ]
    }
   }
  },
  "EventApiApiLogsRoleED9A8150": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "appsync.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs"
       ]
      ]
     }
    ]
   }
  },
  "EventApiE141E6C0": {
   "Type": "AWS::AppSync::Api",
   "Properties": {
    "EventConfig": {
     "AuthProviders": [
      {
       "AuthType": "AMAZON_COGNITO_USER_POOLS",
       "CognitoConfig": {
        "AwsRegion": {
         "Ref": "AWS::Region"
        },
        "UserPoolId": {
         "Ref": "PoolD3F588B8"
        }
       }
      },
      {
       "AuthType": "AWS_LAMBDA",
       "LambdaAuthorizerConfig": {
        "AuthorizerUri": {
         "Fn::GetAtt": [
          "AuthorizerFunctionB4DBAA43",
          "Arn"
         ]
        }
       }
      },
      {
       "AuthType": "API_KEY"
      },
      {
       "AuthType": "AWS_IAM"
      }
     ],
     "ConnectionAuthModes": [
      {
       "AuthType": "API_KEY"
      }
     ],
     "DefaultPublishAuthModes": [
      {
       "AuthType": "AMAZON_COGNITO_USER_POOLS"
      }
     ],
     "DefaultSubscribeAuthModes": [
      {
       "AuthType": "AWS_IAM"
      }
     ],
     "LogConfig": {
      "CloudWatchLogsRoleArn": {
       "Fn::GetAtt": [
        "EventApiApiLogsRoleED9A8150",
        "Arn"
       ]
      },
      "LogLevel": "ERROR"
     }
    },
    "Name": "api-overall-test",
    "OwnerContact": "test-owner-contact"
   }
  },
  "EventApiDefaultApiKeyB9AB1E44": {
   "Type": "AWS::AppSync::ApiKey",
   "Properties": {
    "ApiId": {
     "Fn::GetAtt": [
      "EventApiE141E6C0",
      "ApiId"
     ]
    }
   }
  },
  "EventApiDomainName1C1CA3FD": {
   "Type": "AWS::AppSync::DomainName",
   "Properties": {
    "CertificateArn": {
     "Ref": "Certificate4E7ABB08"
    },
    "Description": "domain for api-overall-test Event API",
    "DomainName": "api.*.example.com"
   }
  },
  "EventApiDomainAssociationECB84F09": {
   "Type": "AWS::AppSync::DomainNameApiAssociation",
   "Properties": {
    "ApiId": {
     "Fn::GetAtt": [
      "EventApiE141E6C0",
      "ApiId"
     ]
    },
    "DomainName": "api.*.example.com"
   },
   "DependsOn": [
    "EventApiDomainName1C1CA3FD"
   ]
  },
  "EventApiLogRetention68604E65": {
   "Type": "Custom::LogRetention",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
      "Arn"
     ]
    },
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/appsync/apis/",
       {
        "Fn::GetAtt": [
         "EventApiE141E6C0",
         "ApiId"
        ]
       }
      ]
     ]
    }
   }
  },
  "EventApiAnotherChannelNamespace5BC7F3A5": {
   "Type": "AWS::AppSync::ChannelNamespace",
   "Properties": {
    "ApiId": {
     "Fn::GetAtt": [
      "EventApiE141E6C0",
      "ApiId"
     ]
    },
    "CodeHandlers": "\n            export function onPublish(ctx) {\n              return ctx.events.filter((event) => event.payload.odds > 0)\n            }\n          ",
    "Name": "AnotherChannelNamespace"
   }
  },
  "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:DeleteRetentionPolicy",
        "logs:PutRetentionPolicy"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
    "Roles": [
     {
      "Ref": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB"
     }
    ]
   }
  },
  "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Handler": "index.handler",
    "Runtime": {
     "Fn::FindInMap": [
      "LatestNodeRuntimeMap",
      {
       "Ref": "AWS::Region"
      },
      "value"
     ]
    },
    "Timeout": 900,
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "c9e084a249774d97a978bed2e1976874a70517128a904136b8737f0792322c1f.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB"
   ]
  },
  "ChannelNamespace5873C25D": {
   "Type": "AWS::AppSync::ChannelNamespace",
   "Properties": {
    "ApiId": {
     "Fn::GetAtt": [
      "EventApiE141E6C0",
      "ApiId"
     ]
    },
    "CodeS3Location": {
     "Fn::Sub": "s3://cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}/f79e346159c9d109573aa79dac7f882e156f79c4ece518897a558a122e3924fd.js"
    },
    "Name": "ChannelNamespace",
    "PublishAuthModes": [
     {
      "AuthType": "AWS_LAMBDA"
     }
    ],
    "SubscribeAuthModes": [
     {
      "AuthType": "AWS_LAMBDA"
     }
    ]
   }
  },
  "WebAcl": {
   "Type": "AWS::WAFv2::WebACL",
   "Properties": {
    "DefaultAction": {
     "Allow": {}
    },
    "Scope": "REGIONAL",
    "VisibilityConfig": {
     "CloudWatchMetricsEnabled": false,
     "MetricName": "webAclMetric",
     "SampledRequestsEnabled": false
    }
   }
  },
  "WafAssociation": {
   "Type": "AWS::WAFv2::WebACLAssociation",
   "Properties": {
    "ResourceArn": {
     "Fn::GetAtt": [
      "EventApiE141E6C0",
      "ApiArn"
     ]
    },
    "WebACLArn": {
     "Fn::GetAtt": [
      "WebAcl",
      "Arn"
     ]
    }
   }
  }
 },
 "Mappings": {
  "LatestNodeRuntimeMap": {
   "af-south-1": {
    "value": "nodejs20.x"
   },
   "ap-east-1": {
    "value": "nodejs20.x"
   },
   "ap-northeast-1": {
    "value": "nodejs20.x"
   },
   "ap-northeast-2": {
    "value": "nodejs20.x"
   },
   "ap-northeast-3": {
    "value": "nodejs20.x"
   },
   "ap-south-1": {
    "value": "nodejs20.x"
   },
   "ap-south-2": {
    "value": "nodejs20.x"
   },
   "ap-southeast-1": {
    "value": "nodejs20.x"
   },
   "ap-southeast-2": {
    "value": "nodejs20.x"
   },
   "ap-southeast-3": {
    "value": "nodejs20.x"
   },
   "ap-southeast-4": {
    "value": "nodejs20.x"
   },
   "ap-southeast-5": {
    "value": "nodejs20.x"
   },
   "ap-southeast-7": {
    "value": "nodejs20.x"
   },
   "ca-central-1": {
    "value": "nodejs20.x"
   },
   "ca-west-1": {
    "value": "nodejs20.x"
   },
   "cn-north-1": {
    "value": "nodejs20.x"
   },
   "cn-northwest-1": {
    "value": "nodejs20.x"
   },
   "eu-central-1": {
    "value": "nodejs20.x"
   },
   "eu-central-2": {
    "value": "nodejs20.x"
   },
   "eu-isoe-west-1": {
    "value": "nodejs18.x"
   },
   "eu-north-1": {
    "value": "nodejs20.x"
   },
   "eu-south-1": {
    "value": "nodejs20.x"
   },
   "eu-south-2": {
    "value": "nodejs20.x"
   },
   "eu-west-1": {
    "value": "nodejs20.x"
   },
   "eu-west-2": {
    "value": "nodejs20.x"
   },
   "eu-west-3": {
    "value": "nodejs20.x"
   },
   "il-central-1": {
    "value": "nodejs20.x"
   },
   "me-central-1": {
    "value": "nodejs20.x"
   },
   "me-south-1": {
    "value": "nodejs20.x"
   },
   "mx-central-1": {
    "value": "nodejs20.x"
   },
   "sa-east-1": {
    "value": "nodejs20.x"
   },
   "us-east-1": {
    "value": "nodejs20.x"
   },
   "us-east-2": {
    "value": "nodejs20.x"
   },
   "us-gov-east-1": {
    "value": "nodejs20.x"
   },
   "us-gov-west-1": {
    "value": "nodejs20.x"
   },
   "us-iso-east-1": {
    "value": "nodejs18.x"
   },
   "us-iso-west-1": {
    "value": "nodejs18.x"
   },
   "us-isob-east-1": {
    "value": "nodejs18.x"
   },
   "us-west-1": {
    "value": "nodejs20.x"
   },
   "us-west-2": {
    "value": "nodejs20.x"
   }
  }
 },
 "Outputs": {
  "AWSAppSyncEventsHTTPendpoint": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Fn::GetAtt": [
        "EventApiDomainName1C1CA3FD",
        "DomainName"
       ]
      },
      "/event"
     ]
    ]
   }
  },
  "AWSAppSyncEventsRealtimeendpoint": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "wss://",
      {
       "Fn::GetAtt": [
        "EventApiDomainName1C1CA3FD",
        "DomainName"
       ]
      },
      "/event/realtime"
     ]
    ]
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}