"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const cdk = require("aws-cdk-lib");
const integ_tests_alpha_1 = require("@aws-cdk/integ-tests-alpha");
const codebuild = require("aws-cdk-lib/aws-codebuild");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'CodeBuildAssetBuildSpecStack');
// Create a codebuild project using a local asset as the buildspec file
const buildSpec = codebuild.BuildSpec.fromAsset(path.resolve(__dirname, 'build-spec-asset.yml'));
const project = new codebuild.Project(stack, 'MyProject', {
    buildSpec,
});
const integ = new integ_tests_alpha_1.IntegTest(app, 'AssetBuildSpecTest', { testCases: [stack] });
const getBuildProject = integ.assertions.awsApiCall('CodeBuild', 'batchGetProjects', {
    names: [project.projectName],
});
getBuildProject.assertAtPath('projects.0.name.buildspec', integ_tests_alpha_1.ExpectedResult.exact(project.projectName));
getBuildProject.assertAtPath('projects.0.source.buildspec', integ_tests_alpha_1.ExpectedResult.stringLikeRegexp('.+'));
const getBuildProjectBuildSpecArn = getBuildProject.getAttString('projects.0.source.buildspec');
// Assert that the buildspec for the project is in fact an S3 object arn
// by parsing it and calling `getObject`.
const { resource, resourceName } = cdk.Arn.parse(getBuildProjectBuildSpecArn);
integ.assertions.awsApiCall('S3', 'getObject', {
    Bucket: resource,
    Key: resourceName,
});
// Kick off a build
const startBuild = integ.assertions.awsApiCall('CodeBuild', 'startBuild', {
    projectName: project.projectName,
});
// Describe the build and wait for the status to be successful
integ.assertions.awsApiCall('CodeBuild', 'batchGetBuilds', {
    ids: [startBuild.getAttString('build.id')],
}).assertAtPath('builds.0.buildStatus', integ_tests_alpha_1.ExpectedResult.stringLikeRegexp('SUCCEEDED')).waitForAssertions({
    totalTimeout: cdk.Duration.minutes(5),
    interval: cdk.Duration.seconds(30),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuYXNzZXQtYnVpbGQtc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLmFzc2V0LWJ1aWxkLXNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2QkFBNkI7QUFDN0IsbUNBQW1DO0FBQ25DLGtFQUF1RTtBQUN2RSx1REFBdUQ7QUFFdkQsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDMUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSw4QkFBOEIsQ0FBQyxDQUFDO0FBRWpFLHVFQUF1RTtBQUN2RSxNQUFNLFNBQVMsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDLENBQUM7QUFDakcsTUFBTSxPQUFPLEdBQUcsSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxXQUFXLEVBQUU7SUFDeEQsU0FBUztDQUNWLENBQUMsQ0FBQztBQUVILE1BQU0sS0FBSyxHQUFHLElBQUksNkJBQVMsQ0FBQyxHQUFHLEVBQUUsb0JBQW9CLEVBQUUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFL0UsTUFBTSxlQUFlLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLGtCQUFrQixFQUFFO0lBQ25GLEtBQUssRUFBRSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUM7Q0FDN0IsQ0FBQyxDQUFDO0FBRUgsZUFBZSxDQUFDLFlBQVksQ0FDMUIsMkJBQTJCLEVBQzNCLGtDQUFjLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FDMUMsQ0FBQztBQUVGLGVBQWUsQ0FBQyxZQUFZLENBQzFCLDZCQUE2QixFQUM3QixrQ0FBYyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUN0QyxDQUFDO0FBR0YsTUFBTSwyQkFBMkIsR0FBRyxlQUFlLENBQUMsWUFBWSxDQUFDLDZCQUE2QixDQUFDLENBQUM7QUFFaEcsd0VBQXdFO0FBQ3hFLHlDQUF5QztBQUN6QyxNQUFNLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7QUFDOUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRTtJQUM3QyxNQUFNLEVBQUUsUUFBUTtJQUNoQixHQUFHLEVBQUUsWUFBWTtDQUNsQixDQUFDLENBQUM7QUFFSCxtQkFBbUI7QUFDbkIsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLFlBQVksRUFBRTtJQUN4RSxXQUFXLEVBQUUsT0FBTyxDQUFDLFdBQVc7Q0FDakMsQ0FBQyxDQUFDO0FBRUgsOERBQThEO0FBQzlELEtBQUssQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRTtJQUN6RCxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0NBQzNDLENBQUMsQ0FBQyxZQUFZLENBQ2Isc0JBQXNCLEVBQ3RCLGtDQUFjLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLENBQzdDLENBQUMsaUJBQWlCLENBQUM7SUFDbEIsWUFBWSxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUNyQyxRQUFRLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO0NBQ25DLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgSW50ZWdUZXN0LCBFeHBlY3RlZFJlc3VsdCB9IGZyb20gJ0Bhd3MtY2RrL2ludGVnLXRlc3RzLWFscGhhJztcbmltcG9ydCAqIGFzIGNvZGVidWlsZCBmcm9tICdhd3MtY2RrLWxpYi9hd3MtY29kZWJ1aWxkJztcblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcbmNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjayhhcHAsICdDb2RlQnVpbGRBc3NldEJ1aWxkU3BlY1N0YWNrJyk7XG5cbi8vIENyZWF0ZSBhIGNvZGVidWlsZCBwcm9qZWN0IHVzaW5nIGEgbG9jYWwgYXNzZXQgYXMgdGhlIGJ1aWxkc3BlYyBmaWxlXG5jb25zdCBidWlsZFNwZWMgPSBjb2RlYnVpbGQuQnVpbGRTcGVjLmZyb21Bc3NldChwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnYnVpbGQtc3BlYy1hc3NldC55bWwnKSk7XG5jb25zdCBwcm9qZWN0ID0gbmV3IGNvZGVidWlsZC5Qcm9qZWN0KHN0YWNrLCAnTXlQcm9qZWN0Jywge1xuICBidWlsZFNwZWMsXG59KTtcblxuY29uc3QgaW50ZWcgPSBuZXcgSW50ZWdUZXN0KGFwcCwgJ0Fzc2V0QnVpbGRTcGVjVGVzdCcsIHsgdGVzdENhc2VzOiBbc3RhY2tdIH0pO1xuXG5jb25zdCBnZXRCdWlsZFByb2plY3QgPSBpbnRlZy5hc3NlcnRpb25zLmF3c0FwaUNhbGwoJ0NvZGVCdWlsZCcsICdiYXRjaEdldFByb2plY3RzJywge1xuICBuYW1lczogW3Byb2plY3QucHJvamVjdE5hbWVdLFxufSk7XG5cbmdldEJ1aWxkUHJvamVjdC5hc3NlcnRBdFBhdGgoXG4gICdwcm9qZWN0cy4wLm5hbWUuYnVpbGRzcGVjJyxcbiAgRXhwZWN0ZWRSZXN1bHQuZXhhY3QocHJvamVjdC5wcm9qZWN0TmFtZSksXG4pO1xuXG5nZXRCdWlsZFByb2plY3QuYXNzZXJ0QXRQYXRoKFxuICAncHJvamVjdHMuMC5zb3VyY2UuYnVpbGRzcGVjJyxcbiAgRXhwZWN0ZWRSZXN1bHQuc3RyaW5nTGlrZVJlZ2V4cCgnLisnKSxcbik7XG5cblxuY29uc3QgZ2V0QnVpbGRQcm9qZWN0QnVpbGRTcGVjQXJuID0gZ2V0QnVpbGRQcm9qZWN0LmdldEF0dFN0cmluZygncHJvamVjdHMuMC5zb3VyY2UuYnVpbGRzcGVjJyk7XG5cbi8vIEFzc2VydCB0aGF0IHRoZSBidWlsZHNwZWMgZm9yIHRoZSBwcm9qZWN0IGlzIGluIGZhY3QgYW4gUzMgb2JqZWN0IGFyblxuLy8gYnkgcGFyc2luZyBpdCBhbmQgY2FsbGluZyBgZ2V0T2JqZWN0YC5cbmNvbnN0IHsgcmVzb3VyY2UsIHJlc291cmNlTmFtZSB9ID0gY2RrLkFybi5wYXJzZShnZXRCdWlsZFByb2plY3RCdWlsZFNwZWNBcm4pO1xuaW50ZWcuYXNzZXJ0aW9ucy5hd3NBcGlDYWxsKCdTMycsICdnZXRPYmplY3QnLCB7XG4gIEJ1Y2tldDogcmVzb3VyY2UsXG4gIEtleTogcmVzb3VyY2VOYW1lLFxufSk7XG5cbi8vIEtpY2sgb2ZmIGEgYnVpbGRcbmNvbnN0IHN0YXJ0QnVpbGQgPSBpbnRlZy5hc3NlcnRpb25zLmF3c0FwaUNhbGwoJ0NvZGVCdWlsZCcsICdzdGFydEJ1aWxkJywge1xuICBwcm9qZWN0TmFtZTogcHJvamVjdC5wcm9qZWN0TmFtZSxcbn0pO1xuXG4vLyBEZXNjcmliZSB0aGUgYnVpbGQgYW5kIHdhaXQgZm9yIHRoZSBzdGF0dXMgdG8gYmUgc3VjY2Vzc2Z1bFxuaW50ZWcuYXNzZXJ0aW9ucy5hd3NBcGlDYWxsKCdDb2RlQnVpbGQnLCAnYmF0Y2hHZXRCdWlsZHMnLCB7XG4gIGlkczogW3N0YXJ0QnVpbGQuZ2V0QXR0U3RyaW5nKCdidWlsZC5pZCcpXSxcbn0pLmFzc2VydEF0UGF0aChcbiAgJ2J1aWxkcy4wLmJ1aWxkU3RhdHVzJyxcbiAgRXhwZWN0ZWRSZXN1bHQuc3RyaW5nTGlrZVJlZ2V4cCgnU1VDQ0VFREVEJyksXG4pLndhaXRGb3JBc3NlcnRpb25zKHtcbiAgdG90YWxUaW1lb3V0OiBjZGsuRHVyYXRpb24ubWludXRlcyg1KSxcbiAgaW50ZXJ2YWw6IGNkay5EdXJhdGlvbi5zZWNvbmRzKDMwKSxcbn0pO1xuIl19