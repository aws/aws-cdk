"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
// eslint-disable-next-line import/no-extraneous-dependencies
const aws_sdk_1 = require("aws-sdk");
const ec2 = new aws_sdk_1.EC2();
function ingressRuleParams(groupId, account) {
    return {
        GroupId: groupId,
        IpPermissions: [{
                UserIdGroupPairs: [{
                        GroupId: groupId,
                        UserId: account,
                    }],
                IpProtocol: '-1',
            }],
    };
}
function egressRuleParams(groupId) {
    return {
        GroupId: groupId,
        IpPermissions: [{
                IpRanges: [{
                        CidrIp: '0.0.0.0/0',
                    }],
                IpProtocol: '-1',
            }],
    };
}
async function handler(event) {
    const securityGroupId = event.ResourceProperties.DefaultSecurityGroupId;
    const account = event.ResourceProperties.Account;
    switch (event.RequestType) {
        case 'Create':
            return revokeRules(securityGroupId, account);
        case 'Update':
            return onUpdate(event);
        case 'Delete':
            return authorizeRules(securityGroupId, account);
    }
}
exports.handler = handler;
async function onUpdate(event) {
    const oldSg = event.OldResourceProperties.DefaultSecurityGroupId;
    const newSg = event.ResourceProperties.DefaultSecurityGroupId;
    if (oldSg !== newSg) {
        await authorizeRules(oldSg, event.ResourceProperties.Account);
        await revokeRules(newSg, event.ResourceProperties.Account);
    }
    return;
}
async function revokeRules(groupId, account) {
    await ec2.revokeSecurityGroupEgress(egressRuleParams(groupId)).promise();
    await ec2.revokeSecurityGroupIngress(ingressRuleParams(groupId, account)).promise();
    return;
}
async function authorizeRules(groupId, account) {
    await ec2.authorizeSecurityGroupIngress(ingressRuleParams(groupId, account)).promise();
    await ec2.authorizeSecurityGroupEgress(egressRuleParams(groupId)).promise();
    return;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2REFBNkQ7QUFDN0QscUNBQThCO0FBRTlCLE1BQU0sR0FBRyxHQUFHLElBQUksYUFBRyxFQUFFLENBQUM7QUFFdEIsU0FBUyxpQkFBaUIsQ0FBQyxPQUFlLEVBQUUsT0FBZTtJQUN6RCxPQUFPO1FBQ0wsT0FBTyxFQUFFLE9BQU87UUFDaEIsYUFBYSxFQUFFLENBQUM7Z0JBQ2QsZ0JBQWdCLEVBQUUsQ0FBQzt3QkFDakIsT0FBTyxFQUFFLE9BQU87d0JBQ2hCLE1BQU0sRUFBRSxPQUFPO3FCQUNoQixDQUFDO2dCQUNGLFVBQVUsRUFBRSxJQUFJO2FBQ2pCLENBQUM7S0FDSCxDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMsZ0JBQWdCLENBQUMsT0FBZTtJQUN2QyxPQUFPO1FBQ0wsT0FBTyxFQUFFLE9BQU87UUFDaEIsYUFBYSxFQUFFLENBQUM7Z0JBQ2QsUUFBUSxFQUFFLENBQUM7d0JBQ1QsTUFBTSxFQUFFLFdBQVc7cUJBQ3BCLENBQUM7Z0JBQ0YsVUFBVSxFQUFFLElBQUk7YUFDakIsQ0FBQztLQUNILENBQUM7QUFDSixDQUFDO0FBRU0sS0FBSyxVQUFVLE9BQU8sQ0FBQyxLQUFrRDtJQUM5RSxNQUFNLGVBQWUsR0FBRyxLQUFLLENBQUMsa0JBQWtCLENBQUMsc0JBQXNCLENBQUM7SUFDeEUsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQztJQUNqRCxRQUFRLEtBQUssQ0FBQyxXQUFXLEVBQUU7UUFDekIsS0FBSyxRQUFRO1lBQ1gsT0FBTyxXQUFXLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQy9DLEtBQUssUUFBUTtZQUNYLE9BQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pCLEtBQUssUUFBUTtZQUNYLE9BQU8sY0FBYyxDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQztLQUNuRDtBQUNILENBQUM7QUFYRCwwQkFXQztBQUNELEtBQUssVUFBVSxRQUFRLENBQUMsS0FBd0Q7SUFDOUUsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLHFCQUFxQixDQUFDLHNCQUFzQixDQUFDO0lBQ2pFLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxzQkFBc0IsQ0FBQztJQUM5RCxJQUFJLEtBQUssS0FBSyxLQUFLLEVBQUU7UUFDbkIsTUFBTSxjQUFjLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM5RCxNQUFNLFdBQVcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQzVEO0lBQ0QsT0FBTztBQUNULENBQUM7QUFFRCxLQUFLLFVBQVUsV0FBVyxDQUFDLE9BQWUsRUFBRSxPQUFlO0lBQ3pELE1BQU0sR0FBRyxDQUFDLHlCQUF5QixDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDekUsTUFBTSxHQUFHLENBQUMsMEJBQTBCLENBQUMsaUJBQWlCLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDcEYsT0FBTztBQUNULENBQUM7QUFFRCxLQUFLLFVBQVUsY0FBYyxDQUFDLE9BQWUsRUFBRSxPQUFlO0lBQzVELE1BQU0sR0FBRyxDQUFDLDZCQUE2QixDQUFDLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3ZGLE1BQU0sR0FBRyxDQUFDLDRCQUE0QixDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDNUUsT0FBTztBQUNULENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWV4dHJhbmVvdXMtZGVwZW5kZW5jaWVzXG5pbXBvcnQgeyBFQzIgfSBmcm9tICdhd3Mtc2RrJztcblxuY29uc3QgZWMyID0gbmV3IEVDMigpO1xuXG5mdW5jdGlvbiBpbmdyZXNzUnVsZVBhcmFtcyhncm91cElkOiBzdHJpbmcsIGFjY291bnQ6IHN0cmluZyk6IEVDMi5SZXZva2VTZWN1cml0eUdyb3VwSW5ncmVzc1JlcXVlc3QgfCBFQzIuQXV0aG9yaXplU2VjdXJpdHlHcm91cEluZ3Jlc3NSZXF1ZXN0IHtcbiAgcmV0dXJuIHtcbiAgICBHcm91cElkOiBncm91cElkLFxuICAgIElwUGVybWlzc2lvbnM6IFt7XG4gICAgICBVc2VySWRHcm91cFBhaXJzOiBbe1xuICAgICAgICBHcm91cElkOiBncm91cElkLFxuICAgICAgICBVc2VySWQ6IGFjY291bnQsXG4gICAgICB9XSxcbiAgICAgIElwUHJvdG9jb2w6ICctMScsXG4gICAgfV0sXG4gIH07XG59XG5cbmZ1bmN0aW9uIGVncmVzc1J1bGVQYXJhbXMoZ3JvdXBJZDogc3RyaW5nKTogRUMyLlJldm9rZVNlY3VyaXR5R3JvdXBFZ3Jlc3NSZXF1ZXN0IHwgRUMyLkF1dGhvcml6ZVNlY3VyaXR5R3JvdXBFZ3Jlc3NSZXF1ZXN0IHtcbiAgcmV0dXJuIHtcbiAgICBHcm91cElkOiBncm91cElkLFxuICAgIElwUGVybWlzc2lvbnM6IFt7XG4gICAgICBJcFJhbmdlczogW3tcbiAgICAgICAgQ2lkcklwOiAnMC4wLjAuMC8wJyxcbiAgICAgIH1dLFxuICAgICAgSXBQcm90b2NvbDogJy0xJyxcbiAgICB9XSxcbiAgfTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIoZXZlbnQ6IEFXU0xhbWJkYS5DbG91ZEZvcm1hdGlvbkN1c3RvbVJlc291cmNlRXZlbnQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc3Qgc2VjdXJpdHlHcm91cElkID0gZXZlbnQuUmVzb3VyY2VQcm9wZXJ0aWVzLkRlZmF1bHRTZWN1cml0eUdyb3VwSWQ7XG4gIGNvbnN0IGFjY291bnQgPSBldmVudC5SZXNvdXJjZVByb3BlcnRpZXMuQWNjb3VudDtcbiAgc3dpdGNoIChldmVudC5SZXF1ZXN0VHlwZSkge1xuICAgIGNhc2UgJ0NyZWF0ZSc6XG4gICAgICByZXR1cm4gcmV2b2tlUnVsZXMoc2VjdXJpdHlHcm91cElkLCBhY2NvdW50KTtcbiAgICBjYXNlICdVcGRhdGUnOlxuICAgICAgcmV0dXJuIG9uVXBkYXRlKGV2ZW50KTtcbiAgICBjYXNlICdEZWxldGUnOlxuICAgICAgcmV0dXJuIGF1dGhvcml6ZVJ1bGVzKHNlY3VyaXR5R3JvdXBJZCwgYWNjb3VudCk7XG4gIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIG9uVXBkYXRlKGV2ZW50OiBBV1NMYW1iZGEuQ2xvdWRGb3JtYXRpb25DdXN0b21SZXNvdXJjZVVwZGF0ZUV2ZW50KTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IG9sZFNnID0gZXZlbnQuT2xkUmVzb3VyY2VQcm9wZXJ0aWVzLkRlZmF1bHRTZWN1cml0eUdyb3VwSWQ7XG4gIGNvbnN0IG5ld1NnID0gZXZlbnQuUmVzb3VyY2VQcm9wZXJ0aWVzLkRlZmF1bHRTZWN1cml0eUdyb3VwSWQ7XG4gIGlmIChvbGRTZyAhPT0gbmV3U2cpIHtcbiAgICBhd2FpdCBhdXRob3JpemVSdWxlcyhvbGRTZywgZXZlbnQuUmVzb3VyY2VQcm9wZXJ0aWVzLkFjY291bnQpO1xuICAgIGF3YWl0IHJldm9rZVJ1bGVzKG5ld1NnLCBldmVudC5SZXNvdXJjZVByb3BlcnRpZXMuQWNjb3VudCk7XG4gIH1cbiAgcmV0dXJuO1xufVxuXG5hc3luYyBmdW5jdGlvbiByZXZva2VSdWxlcyhncm91cElkOiBzdHJpbmcsIGFjY291bnQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICBhd2FpdCBlYzIucmV2b2tlU2VjdXJpdHlHcm91cEVncmVzcyhlZ3Jlc3NSdWxlUGFyYW1zKGdyb3VwSWQpKS5wcm9taXNlKCk7XG4gIGF3YWl0IGVjMi5yZXZva2VTZWN1cml0eUdyb3VwSW5ncmVzcyhpbmdyZXNzUnVsZVBhcmFtcyhncm91cElkLCBhY2NvdW50KSkucHJvbWlzZSgpO1xuICByZXR1cm47XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGF1dGhvcml6ZVJ1bGVzKGdyb3VwSWQ6IHN0cmluZywgYWNjb3VudDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gIGF3YWl0IGVjMi5hdXRob3JpemVTZWN1cml0eUdyb3VwSW5ncmVzcyhpbmdyZXNzUnVsZVBhcmFtcyhncm91cElkLCBhY2NvdW50KSkucHJvbWlzZSgpO1xuICBhd2FpdCBlYzIuYXV0aG9yaXplU2VjdXJpdHlHcm91cEVncmVzcyhlZ3Jlc3NSdWxlUGFyYW1zKGdyb3VwSWQpKS5wcm9taXNlKCk7XG4gIHJldHVybjtcbn1cbiJdfQ==