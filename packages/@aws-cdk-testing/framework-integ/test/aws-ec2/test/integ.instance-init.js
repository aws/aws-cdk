#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const cdk = require("aws-cdk-lib");
const ec2 = require("aws-cdk-lib/aws-ec2");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'integ-init');
const vpc = new ec2.Vpc(stack, 'IntegInitVpc');
const tmpDir = fs.mkdtempSync('/tmp/cfn-init-test');
fs.writeFileSync(path.resolve(tmpDir, 'testFile'), 'Hello World!\n');
new ec2.Instance(stack, 'Instance2', {
    vpc,
    vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },
    instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.MICRO),
    machineImage: new ec2.AmazonLinuxImage(),
    userDataCausesReplacement: true,
    initOptions: {
        timeout: cdk.Duration.minutes(30),
    },
    init: ec2.CloudFormationInit.fromConfigSets({
        configSets: {
            default: ['yumPreinstall', 'config'],
        },
        configs: {
            yumPreinstall: new ec2.InitConfig([
                ec2.InitPackage.yum('git'),
            ]),
            config: new ec2.InitConfig([
                ec2.InitFile.fromObject('/tmp/file2.json', {
                    stackId: stack.stackId,
                    stackName: stack.stackName,
                    region: stack.region,
                    intProperty: 18,
                    boolProperty: true,
                    numProperty: 58.23,
                }),
                ec2.InitGroup.fromName('group1'),
                ec2.InitGroup.fromName('group2', 42),
                ec2.InitUser.fromName('sysuser1', {
                    groups: ['group1', 'group2'],
                    homeDir: '/home/sysuser1-custom',
                }),
                ec2.InitUser.fromName('sysuser2'),
                ec2.InitSource.fromAsset('/tmp/sourceDir', tmpDir),
            ]),
        },
    }),
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuaW5zdGFuY2UtaW5pdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLmluc3RhbmNlLWluaXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EseUJBQXlCO0FBQ3pCLDZCQUE2QjtBQUM3QixtQ0FBbUM7QUFDbkMsMkNBQTJDO0FBRTNDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQzFCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFFL0MsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxjQUFjLENBQUMsQ0FBQztBQUUvQyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDcEQsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0FBRXJFLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFO0lBQ25DLEdBQUc7SUFDSCxVQUFVLEVBQUUsRUFBRSxVQUFVLEVBQUUsR0FBRyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUU7SUFDakQsWUFBWSxFQUFFLEdBQUcsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDO0lBQ3ZGLFlBQVksRUFBRSxJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRTtJQUN4Qyx5QkFBeUIsRUFBRSxJQUFJO0lBQy9CLFdBQVcsRUFBRTtRQUNYLE9BQU8sRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7S0FDbEM7SUFDRCxJQUFJLEVBQUUsR0FBRyxDQUFDLGtCQUFrQixDQUFDLGNBQWMsQ0FBQztRQUMxQyxVQUFVLEVBQUU7WUFDVixPQUFPLEVBQUUsQ0FBQyxlQUFlLEVBQUUsUUFBUSxDQUFDO1NBQ3JDO1FBQ0QsT0FBTyxFQUFFO1lBQ1AsYUFBYSxFQUFFLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQztnQkFDaEMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO2FBQzNCLENBQUM7WUFDRixNQUFNLEVBQUUsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDO2dCQUN6QixHQUFHLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsRUFBRTtvQkFDekMsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO29CQUN0QixTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7b0JBQzFCLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtvQkFDcEIsV0FBVyxFQUFFLEVBQUU7b0JBQ2YsWUFBWSxFQUFFLElBQUk7b0JBQ2xCLFdBQVcsRUFBRSxLQUFLO2lCQUNuQixDQUFDO2dCQUNGLEdBQUcsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQztnQkFDaEMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQztnQkFDcEMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFO29CQUNoQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDO29CQUM1QixPQUFPLEVBQUUsdUJBQXVCO2lCQUNqQyxDQUFDO2dCQUNGLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQztnQkFDakMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDO2FBQ25ELENBQUM7U0FDSDtLQUNGLENBQUM7Q0FDSCxDQUFDLENBQUM7QUFFSCxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCAqIGFzIGVjMiBmcm9tICdhd3MtY2RrLWxpYi9hd3MtZWMyJztcblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcbmNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjayhhcHAsICdpbnRlZy1pbml0Jyk7XG5cbmNvbnN0IHZwYyA9IG5ldyBlYzIuVnBjKHN0YWNrLCAnSW50ZWdJbml0VnBjJyk7XG5cbmNvbnN0IHRtcERpciA9IGZzLm1rZHRlbXBTeW5jKCcvdG1wL2Nmbi1pbml0LXRlc3QnKTtcbmZzLndyaXRlRmlsZVN5bmMocGF0aC5yZXNvbHZlKHRtcERpciwgJ3Rlc3RGaWxlJyksICdIZWxsbyBXb3JsZCFcXG4nKTtcblxubmV3IGVjMi5JbnN0YW5jZShzdGFjaywgJ0luc3RhbmNlMicsIHtcbiAgdnBjLFxuICB2cGNTdWJuZXRzOiB7IHN1Ym5ldFR5cGU6IGVjMi5TdWJuZXRUeXBlLlBVQkxJQyB9LFxuICBpbnN0YW5jZVR5cGU6IGVjMi5JbnN0YW5jZVR5cGUub2YoZWMyLkluc3RhbmNlQ2xhc3MuQlVSU1RBQkxFMiwgZWMyLkluc3RhbmNlU2l6ZS5NSUNSTyksXG4gIG1hY2hpbmVJbWFnZTogbmV3IGVjMi5BbWF6b25MaW51eEltYWdlKCksXG4gIHVzZXJEYXRhQ2F1c2VzUmVwbGFjZW1lbnQ6IHRydWUsXG4gIGluaXRPcHRpb25zOiB7XG4gICAgdGltZW91dDogY2RrLkR1cmF0aW9uLm1pbnV0ZXMoMzApLFxuICB9LFxuICBpbml0OiBlYzIuQ2xvdWRGb3JtYXRpb25Jbml0LmZyb21Db25maWdTZXRzKHtcbiAgICBjb25maWdTZXRzOiB7XG4gICAgICBkZWZhdWx0OiBbJ3l1bVByZWluc3RhbGwnLCAnY29uZmlnJ10sXG4gICAgfSxcbiAgICBjb25maWdzOiB7XG4gICAgICB5dW1QcmVpbnN0YWxsOiBuZXcgZWMyLkluaXRDb25maWcoW1xuICAgICAgICBlYzIuSW5pdFBhY2thZ2UueXVtKCdnaXQnKSxcbiAgICAgIF0pLFxuICAgICAgY29uZmlnOiBuZXcgZWMyLkluaXRDb25maWcoW1xuICAgICAgICBlYzIuSW5pdEZpbGUuZnJvbU9iamVjdCgnL3RtcC9maWxlMi5qc29uJywge1xuICAgICAgICAgIHN0YWNrSWQ6IHN0YWNrLnN0YWNrSWQsXG4gICAgICAgICAgc3RhY2tOYW1lOiBzdGFjay5zdGFja05hbWUsXG4gICAgICAgICAgcmVnaW9uOiBzdGFjay5yZWdpb24sXG4gICAgICAgICAgaW50UHJvcGVydHk6IDE4LFxuICAgICAgICAgIGJvb2xQcm9wZXJ0eTogdHJ1ZSxcbiAgICAgICAgICBudW1Qcm9wZXJ0eTogNTguMjMsXG4gICAgICAgIH0pLFxuICAgICAgICBlYzIuSW5pdEdyb3VwLmZyb21OYW1lKCdncm91cDEnKSxcbiAgICAgICAgZWMyLkluaXRHcm91cC5mcm9tTmFtZSgnZ3JvdXAyJywgNDIpLFxuICAgICAgICBlYzIuSW5pdFVzZXIuZnJvbU5hbWUoJ3N5c3VzZXIxJywge1xuICAgICAgICAgIGdyb3VwczogWydncm91cDEnLCAnZ3JvdXAyJ10sXG4gICAgICAgICAgaG9tZURpcjogJy9ob21lL3N5c3VzZXIxLWN1c3RvbScsXG4gICAgICAgIH0pLFxuICAgICAgICBlYzIuSW5pdFVzZXIuZnJvbU5hbWUoJ3N5c3VzZXIyJyksXG4gICAgICAgIGVjMi5Jbml0U291cmNlLmZyb21Bc3NldCgnL3RtcC9zb3VyY2VEaXInLCB0bXBEaXIpLFxuICAgICAgXSksXG4gICAgfSxcbiAgfSksXG59KTtcblxuYXBwLnN5bnRoKCk7XG4iXX0=