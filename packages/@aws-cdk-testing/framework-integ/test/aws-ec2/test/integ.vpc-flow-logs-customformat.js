"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_s3_1 = require("aws-cdk-lib/aws-s3");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const integ_tests_alpha_1 = require("@aws-cdk/integ-tests-alpha");
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
const app = new aws_cdk_lib_1.App();
class TestStack extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const vpc = new aws_ec2_1.Vpc(this, 'VPC');
        new aws_ec2_1.FlowLog(this, 'FlowLogsCW', {
            resourceType: aws_ec2_1.FlowLogResourceType.fromVpc(vpc),
            logFormat: [
                aws_ec2_1.LogFormat.SRC_PORT,
            ],
        });
        new aws_ec2_1.FlowLog(this, 'FlowLogsAllFormatCW', {
            resourceType: aws_ec2_1.FlowLogResourceType.fromVpc(vpc),
            logFormat: [
                aws_ec2_1.LogFormat.VERSION,
                aws_ec2_1.LogFormat.ACCOUNT_ID,
                aws_ec2_1.LogFormat.INTERFACE_ID,
                aws_ec2_1.LogFormat.SRC_ADDR,
                aws_ec2_1.LogFormat.DST_ADDR,
                aws_ec2_1.LogFormat.SRC_PORT,
                aws_ec2_1.LogFormat.DST_PORT,
                aws_ec2_1.LogFormat.PROTOCOL,
                aws_ec2_1.LogFormat.PACKETS,
                aws_ec2_1.LogFormat.BYTES,
                aws_ec2_1.LogFormat.START_TIMESTAMP,
                aws_ec2_1.LogFormat.END_TIMESTAMP,
                aws_ec2_1.LogFormat.ACTION,
                aws_ec2_1.LogFormat.LOG_STATUS,
                aws_ec2_1.LogFormat.VPC_ID,
                aws_ec2_1.LogFormat.SUBNET_ID,
                aws_ec2_1.LogFormat.INSTANCE_ID,
                aws_ec2_1.LogFormat.TCP_FLAGS,
                aws_ec2_1.LogFormat.TRAFFIC_TYPE,
                aws_ec2_1.LogFormat.PKT_SRC_ADDR,
                aws_ec2_1.LogFormat.PKT_DST_ADDR,
                aws_ec2_1.LogFormat.REGION,
                aws_ec2_1.LogFormat.AZ_ID,
                aws_ec2_1.LogFormat.SUBLOCATION_TYPE,
                aws_ec2_1.LogFormat.SUBLOCATION_ID,
                aws_ec2_1.LogFormat.PKT_SRC_AWS_SERVICE,
                aws_ec2_1.LogFormat.PKT_DST_AWS_SERVICE,
                aws_ec2_1.LogFormat.FLOW_DIRECTION,
                aws_ec2_1.LogFormat.TRAFFIC_PATH,
            ],
        });
        const bucket = new aws_s3_1.Bucket(this, 'Bucket', {
            removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
            autoDeleteObjects: true,
        });
        vpc.addFlowLog('FlowLogsS3', {
            destination: aws_ec2_1.FlowLogDestination.toS3(bucket, 'prefix/'),
            logFormat: [
                aws_ec2_1.LogFormat.DST_PORT,
                aws_ec2_1.LogFormat.SRC_PORT,
            ],
        });
    }
}
new integ_tests_alpha_1.IntegTest(app, 'FlowLogs', {
    testCases: [
        new TestStack(app, 'FlowLogsTestStack'),
    ],
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcudnBjLWZsb3ctbG9ncy1jdXN0b21mb3JtYXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy52cGMtZmxvdy1sb2dzLWN1c3RvbWZvcm1hdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtDQUE0QztBQUM1Qyw2Q0FBb0U7QUFDcEUsa0VBQXVEO0FBQ3ZELGlEQUF1RztBQUV2RyxNQUFNLEdBQUcsR0FBRyxJQUFJLGlCQUFHLEVBQUUsQ0FBQztBQUd0QixNQUFNLFNBQVUsU0FBUSxtQkFBSztJQUMzQixZQUFZLEtBQVUsRUFBRSxFQUFVLEVBQUUsS0FBa0I7UUFDcEQsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEIsTUFBTSxHQUFHLEdBQUcsSUFBSSxhQUFHLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRWpDLElBQUksaUJBQU8sQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFO1lBQzlCLFlBQVksRUFBRSw2QkFBbUIsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO1lBQzlDLFNBQVMsRUFBRTtnQkFDVCxtQkFBUyxDQUFDLFFBQVE7YUFDbkI7U0FDRixDQUFDLENBQUM7UUFDSCxJQUFJLGlCQUFPLENBQUMsSUFBSSxFQUFFLHFCQUFxQixFQUFFO1lBQ3ZDLFlBQVksRUFBRSw2QkFBbUIsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO1lBQzlDLFNBQVMsRUFBRTtnQkFDVCxtQkFBUyxDQUFDLE9BQU87Z0JBQ2pCLG1CQUFTLENBQUMsVUFBVTtnQkFDcEIsbUJBQVMsQ0FBQyxZQUFZO2dCQUN0QixtQkFBUyxDQUFDLFFBQVE7Z0JBQ2xCLG1CQUFTLENBQUMsUUFBUTtnQkFDbEIsbUJBQVMsQ0FBQyxRQUFRO2dCQUNsQixtQkFBUyxDQUFDLFFBQVE7Z0JBQ2xCLG1CQUFTLENBQUMsUUFBUTtnQkFDbEIsbUJBQVMsQ0FBQyxPQUFPO2dCQUNqQixtQkFBUyxDQUFDLEtBQUs7Z0JBQ2YsbUJBQVMsQ0FBQyxlQUFlO2dCQUN6QixtQkFBUyxDQUFDLGFBQWE7Z0JBQ3ZCLG1CQUFTLENBQUMsTUFBTTtnQkFDaEIsbUJBQVMsQ0FBQyxVQUFVO2dCQUNwQixtQkFBUyxDQUFDLE1BQU07Z0JBQ2hCLG1CQUFTLENBQUMsU0FBUztnQkFDbkIsbUJBQVMsQ0FBQyxXQUFXO2dCQUNyQixtQkFBUyxDQUFDLFNBQVM7Z0JBQ25CLG1CQUFTLENBQUMsWUFBWTtnQkFDdEIsbUJBQVMsQ0FBQyxZQUFZO2dCQUN0QixtQkFBUyxDQUFDLFlBQVk7Z0JBQ3RCLG1CQUFTLENBQUMsTUFBTTtnQkFDaEIsbUJBQVMsQ0FBQyxLQUFLO2dCQUNmLG1CQUFTLENBQUMsZ0JBQWdCO2dCQUMxQixtQkFBUyxDQUFDLGNBQWM7Z0JBQ3hCLG1CQUFTLENBQUMsbUJBQW1CO2dCQUM3QixtQkFBUyxDQUFDLG1CQUFtQjtnQkFDN0IsbUJBQVMsQ0FBQyxjQUFjO2dCQUN4QixtQkFBUyxDQUFDLFlBQVk7YUFDdkI7U0FDRixDQUFDLENBQUM7UUFFSCxNQUFNLE1BQU0sR0FBRyxJQUFJLGVBQU0sQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFO1lBQ3hDLGFBQWEsRUFBRSwyQkFBYSxDQUFDLE9BQU87WUFDcEMsaUJBQWlCLEVBQUUsSUFBSTtTQUN4QixDQUFDLENBQUM7UUFDSCxHQUFHLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRTtZQUMzQixXQUFXLEVBQUUsNEJBQWtCLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUM7WUFDdkQsU0FBUyxFQUFFO2dCQUNULG1CQUFTLENBQUMsUUFBUTtnQkFDbEIsbUJBQVMsQ0FBQyxRQUFRO2FBQ25CO1NBQ0YsQ0FBQyxDQUFDO0lBRUwsQ0FBQztDQUNGO0FBR0QsSUFBSSw2QkFBUyxDQUFDLEdBQUcsRUFBRSxVQUFVLEVBQUU7SUFDN0IsU0FBUyxFQUFFO1FBQ1QsSUFBSSxTQUFTLENBQUMsR0FBRyxFQUFFLG1CQUFtQixDQUFDO0tBQ3hDO0NBQ0YsQ0FBQyxDQUFDO0FBRUgsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnVja2V0IH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLXMzJztcbmltcG9ydCB7IEFwcCwgU3RhY2ssIFN0YWNrUHJvcHMsIFJlbW92YWxQb2xpY3kgfSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBJbnRlZ1Rlc3QgfSBmcm9tICdAYXdzLWNkay9pbnRlZy10ZXN0cy1hbHBoYSc7XG5pbXBvcnQgeyBGbG93TG9nLCBGbG93TG9nRGVzdGluYXRpb24sIEZsb3dMb2dSZXNvdXJjZVR5cGUsIFZwYywgTG9nRm9ybWF0IH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWVjMic7XG5cbmNvbnN0IGFwcCA9IG5ldyBBcHAoKTtcblxuXG5jbGFzcyBUZXN0U3RhY2sgZXh0ZW5kcyBTdGFjayB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBBcHAsIGlkOiBzdHJpbmcsIHByb3BzPzogU3RhY2tQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuXG4gICAgY29uc3QgdnBjID0gbmV3IFZwYyh0aGlzLCAnVlBDJyk7XG5cbiAgICBuZXcgRmxvd0xvZyh0aGlzLCAnRmxvd0xvZ3NDVycsIHtcbiAgICAgIHJlc291cmNlVHlwZTogRmxvd0xvZ1Jlc291cmNlVHlwZS5mcm9tVnBjKHZwYyksXG4gICAgICBsb2dGb3JtYXQ6IFtcbiAgICAgICAgTG9nRm9ybWF0LlNSQ19QT1JULFxuICAgICAgXSxcbiAgICB9KTtcbiAgICBuZXcgRmxvd0xvZyh0aGlzLCAnRmxvd0xvZ3NBbGxGb3JtYXRDVycsIHtcbiAgICAgIHJlc291cmNlVHlwZTogRmxvd0xvZ1Jlc291cmNlVHlwZS5mcm9tVnBjKHZwYyksXG4gICAgICBsb2dGb3JtYXQ6IFtcbiAgICAgICAgTG9nRm9ybWF0LlZFUlNJT04sXG4gICAgICAgIExvZ0Zvcm1hdC5BQ0NPVU5UX0lELFxuICAgICAgICBMb2dGb3JtYXQuSU5URVJGQUNFX0lELFxuICAgICAgICBMb2dGb3JtYXQuU1JDX0FERFIsXG4gICAgICAgIExvZ0Zvcm1hdC5EU1RfQUREUixcbiAgICAgICAgTG9nRm9ybWF0LlNSQ19QT1JULFxuICAgICAgICBMb2dGb3JtYXQuRFNUX1BPUlQsXG4gICAgICAgIExvZ0Zvcm1hdC5QUk9UT0NPTCxcbiAgICAgICAgTG9nRm9ybWF0LlBBQ0tFVFMsXG4gICAgICAgIExvZ0Zvcm1hdC5CWVRFUyxcbiAgICAgICAgTG9nRm9ybWF0LlNUQVJUX1RJTUVTVEFNUCxcbiAgICAgICAgTG9nRm9ybWF0LkVORF9USU1FU1RBTVAsXG4gICAgICAgIExvZ0Zvcm1hdC5BQ1RJT04sXG4gICAgICAgIExvZ0Zvcm1hdC5MT0dfU1RBVFVTLFxuICAgICAgICBMb2dGb3JtYXQuVlBDX0lELFxuICAgICAgICBMb2dGb3JtYXQuU1VCTkVUX0lELFxuICAgICAgICBMb2dGb3JtYXQuSU5TVEFOQ0VfSUQsXG4gICAgICAgIExvZ0Zvcm1hdC5UQ1BfRkxBR1MsXG4gICAgICAgIExvZ0Zvcm1hdC5UUkFGRklDX1RZUEUsXG4gICAgICAgIExvZ0Zvcm1hdC5QS1RfU1JDX0FERFIsXG4gICAgICAgIExvZ0Zvcm1hdC5QS1RfRFNUX0FERFIsXG4gICAgICAgIExvZ0Zvcm1hdC5SRUdJT04sXG4gICAgICAgIExvZ0Zvcm1hdC5BWl9JRCxcbiAgICAgICAgTG9nRm9ybWF0LlNVQkxPQ0FUSU9OX1RZUEUsXG4gICAgICAgIExvZ0Zvcm1hdC5TVUJMT0NBVElPTl9JRCxcbiAgICAgICAgTG9nRm9ybWF0LlBLVF9TUkNfQVdTX1NFUlZJQ0UsXG4gICAgICAgIExvZ0Zvcm1hdC5QS1RfRFNUX0FXU19TRVJWSUNFLFxuICAgICAgICBMb2dGb3JtYXQuRkxPV19ESVJFQ1RJT04sXG4gICAgICAgIExvZ0Zvcm1hdC5UUkFGRklDX1BBVEgsXG4gICAgICBdLFxuICAgIH0pO1xuXG4gICAgY29uc3QgYnVja2V0ID0gbmV3IEJ1Y2tldCh0aGlzLCAnQnVja2V0Jywge1xuICAgICAgcmVtb3ZhbFBvbGljeTogUmVtb3ZhbFBvbGljeS5ERVNUUk9ZLFxuICAgICAgYXV0b0RlbGV0ZU9iamVjdHM6IHRydWUsXG4gICAgfSk7XG4gICAgdnBjLmFkZEZsb3dMb2coJ0Zsb3dMb2dzUzMnLCB7XG4gICAgICBkZXN0aW5hdGlvbjogRmxvd0xvZ0Rlc3RpbmF0aW9uLnRvUzMoYnVja2V0LCAncHJlZml4LycpLFxuICAgICAgbG9nRm9ybWF0OiBbXG4gICAgICAgIExvZ0Zvcm1hdC5EU1RfUE9SVCxcbiAgICAgICAgTG9nRm9ybWF0LlNSQ19QT1JULFxuICAgICAgXSxcbiAgICB9KTtcblxuICB9XG59XG5cblxubmV3IEludGVnVGVzdChhcHAsICdGbG93TG9ncycsIHtcbiAgdGVzdENhc2VzOiBbXG4gICAgbmV3IFRlc3RTdGFjayhhcHAsICdGbG93TG9nc1Rlc3RTdGFjaycpLFxuICBdLFxufSk7XG5cbmFwcC5zeW50aCgpO1xuIl19