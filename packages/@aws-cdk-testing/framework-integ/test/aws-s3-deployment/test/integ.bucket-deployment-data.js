"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_s3_1 = require("aws-cdk-lib/aws-s3");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const integ_tests_alpha_1 = require("@aws-cdk/integ-tests-alpha");
const aws_s3_deployment_1 = require("aws-cdk-lib/aws-s3-deployment");
const app = new aws_cdk_lib_1.App();
const stack = new aws_cdk_lib_1.Stack(app, 'TestBucketDeploymentContent');
const bucket = new aws_s3_1.Bucket(stack, 'Bucket');
const file1 = aws_s3_deployment_1.Source.data('file1.txt', 'boom');
const file2 = aws_s3_deployment_1.Source.data('path/to/file2.txt', `bam! ${bucket.bucketName}`);
const file3 = aws_s3_deployment_1.Source.jsonData('my-json/config.json', { website_url: bucket.bucketWebsiteUrl });
const file4 = aws_s3_deployment_1.Source.yamlData('my-yaml/config.yaml', { website_url: bucket.bucketWebsiteUrl });
const deployment = new aws_s3_deployment_1.BucketDeployment(stack, 'DeployMeHere', {
    destinationBucket: bucket,
    sources: [file1, file2],
    destinationKeyPrefix: 'deploy/here/',
    retainOnDelete: false, // default is true, which will block the integration test cleanup
});
deployment.addSource(file3);
deployment.addSource(file4);
new aws_cdk_lib_1.CfnOutput(stack, 'BucketName', { value: bucket.bucketName });
new integ_tests_alpha_1.IntegTest(app, 'integ-test-bucket-deployment-data', {
    testCases: [stack],
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuYnVja2V0LWRlcGxveW1lbnQtZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLmJ1Y2tldC1kZXBsb3ltZW50LWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQ0FBNEM7QUFDNUMsNkNBQW9EO0FBQ3BELGtFQUF1RDtBQUN2RCxxRUFBeUU7QUFFekUsTUFBTSxHQUFHLEdBQUcsSUFBSSxpQkFBRyxFQUFFLENBQUM7QUFDdEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxtQkFBSyxDQUFDLEdBQUcsRUFBRSw2QkFBNkIsQ0FBQyxDQUFDO0FBQzVELE1BQU0sTUFBTSxHQUFHLElBQUksZUFBTSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztBQUUzQyxNQUFNLEtBQUssR0FBRywwQkFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDL0MsTUFBTSxLQUFLLEdBQUcsMEJBQU0sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsUUFBUSxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztBQUM1RSxNQUFNLEtBQUssR0FBRywwQkFBTSxDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsRUFBRSxFQUFFLFdBQVcsRUFBRSxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO0FBQy9GLE1BQU0sS0FBSyxHQUFHLDBCQUFNLENBQUMsUUFBUSxDQUFDLHFCQUFxQixFQUFFLEVBQUUsV0FBVyxFQUFFLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7QUFFL0YsTUFBTSxVQUFVLEdBQUcsSUFBSSxvQ0FBZ0IsQ0FBQyxLQUFLLEVBQUUsY0FBYyxFQUFFO0lBQzdELGlCQUFpQixFQUFFLE1BQU07SUFDekIsT0FBTyxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQztJQUN2QixvQkFBb0IsRUFBRSxjQUFjO0lBQ3BDLGNBQWMsRUFBRSxLQUFLLEVBQUUsaUVBQWlFO0NBQ3pGLENBQUMsQ0FBQztBQUNILFVBQVUsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDNUIsVUFBVSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUU1QixJQUFJLHVCQUFTLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztBQUVqRSxJQUFJLDZCQUFTLENBQUMsR0FBRyxFQUFFLG1DQUFtQyxFQUFFO0lBQ3RELFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQztDQUNuQixDQUFDLENBQUM7QUFFSCxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCdWNrZXQgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtczMnO1xuaW1wb3J0IHsgQXBwLCBDZm5PdXRwdXQsIFN0YWNrIH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgSW50ZWdUZXN0IH0gZnJvbSAnQGF3cy1jZGsvaW50ZWctdGVzdHMtYWxwaGEnO1xuaW1wb3J0IHsgQnVja2V0RGVwbG95bWVudCwgU291cmNlIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLXMzLWRlcGxveW1lbnQnO1xuXG5jb25zdCBhcHAgPSBuZXcgQXBwKCk7XG5jb25zdCBzdGFjayA9IG5ldyBTdGFjayhhcHAsICdUZXN0QnVja2V0RGVwbG95bWVudENvbnRlbnQnKTtcbmNvbnN0IGJ1Y2tldCA9IG5ldyBCdWNrZXQoc3RhY2ssICdCdWNrZXQnKTtcblxuY29uc3QgZmlsZTEgPSBTb3VyY2UuZGF0YSgnZmlsZTEudHh0JywgJ2Jvb20nKTtcbmNvbnN0IGZpbGUyID0gU291cmNlLmRhdGEoJ3BhdGgvdG8vZmlsZTIudHh0JywgYGJhbSEgJHtidWNrZXQuYnVja2V0TmFtZX1gKTtcbmNvbnN0IGZpbGUzID0gU291cmNlLmpzb25EYXRhKCdteS1qc29uL2NvbmZpZy5qc29uJywgeyB3ZWJzaXRlX3VybDogYnVja2V0LmJ1Y2tldFdlYnNpdGVVcmwgfSk7XG5jb25zdCBmaWxlNCA9IFNvdXJjZS55YW1sRGF0YSgnbXkteWFtbC9jb25maWcueWFtbCcsIHsgd2Vic2l0ZV91cmw6IGJ1Y2tldC5idWNrZXRXZWJzaXRlVXJsIH0pO1xuXG5jb25zdCBkZXBsb3ltZW50ID0gbmV3IEJ1Y2tldERlcGxveW1lbnQoc3RhY2ssICdEZXBsb3lNZUhlcmUnLCB7XG4gIGRlc3RpbmF0aW9uQnVja2V0OiBidWNrZXQsXG4gIHNvdXJjZXM6IFtmaWxlMSwgZmlsZTJdLFxuICBkZXN0aW5hdGlvbktleVByZWZpeDogJ2RlcGxveS9oZXJlLycsXG4gIHJldGFpbk9uRGVsZXRlOiBmYWxzZSwgLy8gZGVmYXVsdCBpcyB0cnVlLCB3aGljaCB3aWxsIGJsb2NrIHRoZSBpbnRlZ3JhdGlvbiB0ZXN0IGNsZWFudXBcbn0pO1xuZGVwbG95bWVudC5hZGRTb3VyY2UoZmlsZTMpO1xuZGVwbG95bWVudC5hZGRTb3VyY2UoZmlsZTQpO1xuXG5uZXcgQ2ZuT3V0cHV0KHN0YWNrLCAnQnVja2V0TmFtZScsIHsgdmFsdWU6IGJ1Y2tldC5idWNrZXROYW1lIH0pO1xuXG5uZXcgSW50ZWdUZXN0KGFwcCwgJ2ludGVnLXRlc3QtYnVja2V0LWRlcGxveW1lbnQtZGF0YScsIHtcbiAgdGVzdENhc2VzOiBbc3RhY2tdLFxufSk7XG5cbmFwcC5zeW50aCgpO1xuIl19