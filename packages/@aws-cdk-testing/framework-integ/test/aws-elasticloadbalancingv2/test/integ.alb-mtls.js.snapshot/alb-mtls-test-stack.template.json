{
 "Resources": {
  "Bucket83908E77": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     },
     {
      "Key": "aws-cdk:cr-owned:987d6a23",
      "Value": "true"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "BucketPolicyE9A3008A": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "Bucket83908E77"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:PutBucketPolicy"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "Bucket83908E77",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "Bucket83908E77",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "BucketAutoDeleteObjectsCustomResourceBAFD23C2": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "Bucket83908E77"
    }
   },
   "DependsOn": [
    "BucketPolicyE9A3008A"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ]
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "44e9c4d7a5d3fd2d677e1a7e416b2b56f6b0104bd5eff9cac5557b4c65a9dc61.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      "Arn"
     ]
    },
    "Runtime": {
     "Fn::FindInMap": [
      "LatestNodeRuntimeMap",
      {
       "Ref": "AWS::Region"
      },
      "value"
     ]
    },
    "Description": {
     "Fn::Join": [
      "",
      [
       "Lambda function for auto-deleting objects in ",
       {
        "Ref": "Bucket83908E77"
       },
       " S3 bucket."
      ]
     ]
    }
   },
   "DependsOn": [
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092"
   ]
  },
  "DeployCaCertAwsCliLayer0CCD78B3": {
   "Type": "AWS::Lambda::LayerVersion",
   "Properties": {
    "Content": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "3322b7049fb0ed2b7cbb644a2ada8d1116ff80c32dca89e6ada846b5de26f961.zip"
    },
    "Description": "/opt/awscli/aws"
   }
  },
  "DeployCaCertCustomResourceCDD68C79": {
   "Type": "Custom::CDKBucketDeployment",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536",
      "Arn"
     ]
    },
    "SourceBucketNames": [
     {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     }
    ],
    "SourceObjectKeys": [
     "9249e6ca38e4bef8f254ff6bd15067180e1d3efae918968740de5a3d24d6417d.zip"
    ],
    "DestinationBucketName": {
     "Ref": "Bucket83908E77"
    },
    "Prune": true,
    "OutputObjectKeys": true
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
           },
           "/*"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
           }
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:Abort*",
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "Bucket83908E77",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "Bucket83908E77",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
    "Roles": [
     {
      "Ref": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265"
     }
    ]
   }
  },
  "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "c6358465bf49dfae556bb430bf9c81fa578c221b82c308e3707901b1dd654762.zip"
    },
    "Environment": {
     "Variables": {
      "AWS_CA_BUNDLE": "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"
     }
    },
    "Handler": "index.handler",
    "Layers": [
     {
      "Ref": "DeployCaCertAwsCliLayer0CCD78B3"
     }
    ],
    "Role": {
     "Fn::GetAtt": [
      "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 900
   },
   "DependsOn": [
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265"
   ]
  },
  "Stack8A423254": {
   "Type": "AWS::EC2::VPC",
   "Properties": {
    "CidrBlock": "10.0.0.0/16",
    "EnableDnsHostnames": true,
    "EnableDnsSupport": true,
    "InstanceTenancy": "default",
    "Tags": [
     {
      "Key": "Name",
      "Value": "alb-mtls-test-stack/Stack"
     }
    ]
   }
  },
  "StackPublicSubnet1Subnet0AD81D22": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": "test-region-1a",
    "CidrBlock": "10.0.0.0/19",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "alb-mtls-test-stack/Stack/PublicSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "Stack8A423254"
    }
   }
  },
  "StackPublicSubnet1RouteTable5057189D": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "alb-mtls-test-stack/Stack/PublicSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "Stack8A423254"
    }
   }
  },
  "StackPublicSubnet1RouteTableAssociation74F1C1B6": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "StackPublicSubnet1RouteTable5057189D"
    },
    "SubnetId": {
     "Ref": "StackPublicSubnet1Subnet0AD81D22"
    }
   }
  },
  "StackPublicSubnet1DefaultRoute16154E3D": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "StackIGW2F0A1126"
    },
    "RouteTableId": {
     "Ref": "StackPublicSubnet1RouteTable5057189D"
    }
   },
   "DependsOn": [
    "StackVPCGWFFCB6290"
   ]
  },
  "StackPublicSubnet1EIPBDAAB2A5": {
   "Type": "AWS::EC2::EIP",
   "Properties": {
    "Domain": "vpc",
    "Tags": [
     {
      "Key": "Name",
      "Value": "alb-mtls-test-stack/Stack/PublicSubnet1"
     }
    ]
   }
  },
  "StackPublicSubnet1NATGatewayD2E1ABF7": {
   "Type": "AWS::EC2::NatGateway",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "StackPublicSubnet1EIPBDAAB2A5",
      "AllocationId"
     ]
    },
    "SubnetId": {
     "Ref": "StackPublicSubnet1Subnet0AD81D22"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "alb-mtls-test-stack/Stack/PublicSubnet1"
     }
    ]
   },
   "DependsOn": [
    "StackPublicSubnet1DefaultRoute16154E3D",
    "StackPublicSubnet1RouteTableAssociation74F1C1B6"
   ]
  },
  "StackPublicSubnet2Subnet3C7D2288": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": "test-region-1b",
    "CidrBlock": "10.0.32.0/19",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "alb-mtls-test-stack/Stack/PublicSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "Stack8A423254"
    }
   }
  },
  "StackPublicSubnet2RouteTableCD306445": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "alb-mtls-test-stack/Stack/PublicSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "Stack8A423254"
    }
   }
  },
  "StackPublicSubnet2RouteTableAssociation5E8F73F1": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "StackPublicSubnet2RouteTableCD306445"
    },
    "SubnetId": {
     "Ref": "StackPublicSubnet2Subnet3C7D2288"
    }
   }
  },
  "StackPublicSubnet2DefaultRoute0319539B": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "StackIGW2F0A1126"
    },
    "RouteTableId": {
     "Ref": "StackPublicSubnet2RouteTableCD306445"
    }
   },
   "DependsOn": [
    "StackVPCGWFFCB6290"
   ]
  },
  "StackPublicSubnet2EIP8CDBC8C2": {
   "Type": "AWS::EC2::EIP",
   "Properties": {
    "Domain": "vpc",
    "Tags": [
     {
      "Key": "Name",
      "Value": "alb-mtls-test-stack/Stack/PublicSubnet2"
     }
    ]
   }
  },
  "StackPublicSubnet2NATGatewayA8E03AB3": {
   "Type": "AWS::EC2::NatGateway",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "StackPublicSubnet2EIP8CDBC8C2",
      "AllocationId"
     ]
    },
    "SubnetId": {
     "Ref": "StackPublicSubnet2Subnet3C7D2288"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "alb-mtls-test-stack/Stack/PublicSubnet2"
     }
    ]
   },
   "DependsOn": [
    "StackPublicSubnet2DefaultRoute0319539B",
    "StackPublicSubnet2RouteTableAssociation5E8F73F1"
   ]
  },
  "StackPublicSubnet3SubnetCC1055D9": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": "test-region-1c",
    "CidrBlock": "10.0.64.0/19",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "alb-mtls-test-stack/Stack/PublicSubnet3"
     }
    ],
    "VpcId": {
     "Ref": "Stack8A423254"
    }
   }
  },
  "StackPublicSubnet3RouteTable44D8F838": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "alb-mtls-test-stack/Stack/PublicSubnet3"
     }
    ],
    "VpcId": {
     "Ref": "Stack8A423254"
    }
   }
  },
  "StackPublicSubnet3RouteTableAssociationD026A62D": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "StackPublicSubnet3RouteTable44D8F838"
    },
    "SubnetId": {
     "Ref": "StackPublicSubnet3SubnetCC1055D9"
    }
   }
  },
  "StackPublicSubnet3DefaultRouteBC0DA152": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "StackIGW2F0A1126"
    },
    "RouteTableId": {
     "Ref": "StackPublicSubnet3RouteTable44D8F838"
    }
   },
   "DependsOn": [
    "StackVPCGWFFCB6290"
   ]
  },
  "StackPublicSubnet3EIP3201E7C8": {
   "Type": "AWS::EC2::EIP",
   "Properties": {
    "Domain": "vpc",
    "Tags": [
     {
      "Key": "Name",
      "Value": "alb-mtls-test-stack/Stack/PublicSubnet3"
     }
    ]
   }
  },
  "StackPublicSubnet3NATGatewayAB6A10EF": {
   "Type": "AWS::EC2::NatGateway",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "StackPublicSubnet3EIP3201E7C8",
      "AllocationId"
     ]
    },
    "SubnetId": {
     "Ref": "StackPublicSubnet3SubnetCC1055D9"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "alb-mtls-test-stack/Stack/PublicSubnet3"
     }
    ]
   },
   "DependsOn": [
    "StackPublicSubnet3DefaultRouteBC0DA152",
    "StackPublicSubnet3RouteTableAssociationD026A62D"
   ]
  },
  "StackPrivateSubnet1Subnet47AC2BC7": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": "test-region-1a",
    "CidrBlock": "10.0.96.0/19",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Private"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Private"
     },
     {
      "Key": "Name",
      "Value": "alb-mtls-test-stack/Stack/PrivateSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "Stack8A423254"
    }
   }
  },
  "StackPrivateSubnet1RouteTable8ADA6A0C": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "alb-mtls-test-stack/Stack/PrivateSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "Stack8A423254"
    }
   }
  },
  "StackPrivateSubnet1RouteTableAssociationFFE38495": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "StackPrivateSubnet1RouteTable8ADA6A0C"
    },
    "SubnetId": {
     "Ref": "StackPrivateSubnet1Subnet47AC2BC7"
    }
   }
  },
  "StackPrivateSubnet1DefaultRouteFBF81BA5": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId": {
     "Ref": "StackPublicSubnet1NATGatewayD2E1ABF7"
    },
    "RouteTableId": {
     "Ref": "StackPrivateSubnet1RouteTable8ADA6A0C"
    }
   }
  },
  "StackPrivateSubnet2SubnetA2F8EDD8": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": "test-region-1b",
    "CidrBlock": "10.0.128.0/19",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Private"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Private"
     },
     {
      "Key": "Name",
      "Value": "alb-mtls-test-stack/Stack/PrivateSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "Stack8A423254"
    }
   }
  },
  "StackPrivateSubnet2RouteTableA5546697": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "alb-mtls-test-stack/Stack/PrivateSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "Stack8A423254"
    }
   }
  },
  "StackPrivateSubnet2RouteTableAssociation68ACB8C1": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "StackPrivateSubnet2RouteTableA5546697"
    },
    "SubnetId": {
     "Ref": "StackPrivateSubnet2SubnetA2F8EDD8"
    }
   }
  },
  "StackPrivateSubnet2DefaultRoute22004492": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId": {
     "Ref": "StackPublicSubnet2NATGatewayA8E03AB3"
    },
    "RouteTableId": {
     "Ref": "StackPrivateSubnet2RouteTableA5546697"
    }
   }
  },
  "StackPrivateSubnet3Subnet28548F2E": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": "test-region-1c",
    "CidrBlock": "10.0.160.0/19",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Private"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Private"
     },
     {
      "Key": "Name",
      "Value": "alb-mtls-test-stack/Stack/PrivateSubnet3"
     }
    ],
    "VpcId": {
     "Ref": "Stack8A423254"
    }
   }
  },
  "StackPrivateSubnet3RouteTable9B1F2842": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "alb-mtls-test-stack/Stack/PrivateSubnet3"
     }
    ],
    "VpcId": {
     "Ref": "Stack8A423254"
    }
   }
  },
  "StackPrivateSubnet3RouteTableAssociationC9C6644E": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "StackPrivateSubnet3RouteTable9B1F2842"
    },
    "SubnetId": {
     "Ref": "StackPrivateSubnet3Subnet28548F2E"
    }
   }
  },
  "StackPrivateSubnet3DefaultRoute361AE708": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId": {
     "Ref": "StackPublicSubnet3NATGatewayAB6A10EF"
    },
    "RouteTableId": {
     "Ref": "StackPrivateSubnet3RouteTable9B1F2842"
    }
   }
  },
  "StackIGW2F0A1126": {
   "Type": "AWS::EC2::InternetGateway",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "alb-mtls-test-stack/Stack"
     }
    ]
   }
  },
  "StackVPCGWFFCB6290": {
   "Type": "AWS::EC2::VPCGatewayAttachment",
   "Properties": {
    "InternetGatewayId": {
     "Ref": "StackIGW2F0A1126"
    },
    "VpcId": {
     "Ref": "Stack8A423254"
    }
   }
  },
  "StackRestrictDefaultSecurityGroupCustomResource804DC9E2": {
   "Type": "Custom::VpcRestrictDefaultSG",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E",
      "Arn"
     ]
    },
    "DefaultSecurityGroupId": {
     "Fn::GetAtt": [
      "Stack8A423254",
      "DefaultSecurityGroup"
     ]
    },
    "Account": {
     "Ref": "AWS::AccountId"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ],
    "Policies": [
     {
      "PolicyName": "Inline",
      "PolicyDocument": {
       "Version": "2012-10-17",
       "Statement": [
        {
         "Effect": "Allow",
         "Action": [
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:RevokeSecurityGroupEgress"
         ],
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             "arn:",
             {
              "Ref": "AWS::Partition"
             },
             ":ec2:",
             {
              "Ref": "AWS::Region"
             },
             ":",
             {
              "Ref": "AWS::AccountId"
             },
             ":security-group/",
             {
              "Fn::GetAtt": [
               "Stack8A423254",
               "DefaultSecurityGroup"
              ]
             }
            ]
           ]
          }
         ]
        }
       ]
      }
     }
    ]
   }
  },
  "CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "bde7b5c89cb43285f884c94f0b9e17cdb0f5eb5345005114dd60342e0b8a85a1.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "__entrypoint__.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0",
      "Arn"
     ]
    },
    "Runtime": {
     "Fn::FindInMap": [
      "LatestNodeRuntimeMap",
      {
       "Ref": "AWS::Region"
      },
      "value"
     ]
    },
    "Description": "Lambda function for removing all inbound/outbound rules from the VPC default security group"
   },
   "DependsOn": [
    "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0"
   ]
  },
  "Certificate4E7ABB08": {
   "Type": "AWS::CertificateManager::Certificate",
   "Properties": {
    "DomainName": "*.example.com",
    "DomainValidationOptions": [
     {
      "DomainName": "*.example.com",
      "HostedZoneId": "Z23ABC4XYZL05B"
     }
    ],
    "Tags": [
     {
      "Key": "Name",
      "Value": "alb-mtls-test-stack/Certificate"
     }
    ],
    "ValidationMethod": "DNS"
   }
  },
  "LB8A12904C": {
   "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
   "Properties": {
    "LoadBalancerAttributes": [
     {
      "Key": "deletion_protection.enabled",
      "Value": "false"
     }
    ],
    "Scheme": "internet-facing",
    "SecurityGroups": [
     {
      "Fn::GetAtt": [
       "LBSecurityGroup8A41EA2B",
       "GroupId"
      ]
     }
    ],
    "Subnets": [
     {
      "Ref": "StackPublicSubnet1Subnet0AD81D22"
     },
     {
      "Ref": "StackPublicSubnet2Subnet3C7D2288"
     },
     {
      "Ref": "StackPublicSubnet3SubnetCC1055D9"
     }
    ],
    "Type": "application"
   },
   "DependsOn": [
    "StackPublicSubnet1DefaultRoute16154E3D",
    "StackPublicSubnet1RouteTableAssociation74F1C1B6",
    "StackPublicSubnet2DefaultRoute0319539B",
    "StackPublicSubnet2RouteTableAssociation5E8F73F1",
    "StackPublicSubnet3DefaultRouteBC0DA152",
    "StackPublicSubnet3RouteTableAssociationD026A62D"
   ]
  },
  "LBSecurityGroup8A41EA2B": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "Automatically created Security Group for ELB albmtlsteststackLBDC4031A8",
    "SecurityGroupEgress": [
     {
      "CidrIp": "255.255.255.255/32",
      "Description": "Disallow all traffic",
      "FromPort": 252,
      "IpProtocol": "icmp",
      "ToPort": 86
     }
    ],
    "SecurityGroupIngress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow from anyone on port 443",
      "FromPort": 443,
      "IpProtocol": "tcp",
      "ToPort": 443
     }
    ],
    "VpcId": {
     "Ref": "Stack8A423254"
    }
   }
  },
  "LBListener49E825B4": {
   "Type": "AWS::ElasticLoadBalancingV2::Listener",
   "Properties": {
    "Certificates": [
     {
      "CertificateArn": {
       "Ref": "Certificate4E7ABB08"
      }
     }
    ],
    "DefaultActions": [
     {
      "FixedResponseConfig": {
       "ContentType": "text/plain",
       "MessageBody": "Success mTLS",
       "StatusCode": "200"
      },
      "Type": "fixed-response"
     }
    ],
    "LoadBalancerArn": {
     "Ref": "LB8A12904C"
    },
    "MutualAuthentication": {
     "IgnoreClientCertificateExpiry": false,
     "Mode": "verify",
     "TrustStoreArn": {
      "Fn::GetAtt": [
       "Store1D2A845B",
       "TrustStoreArn"
      ]
     }
    },
    "Port": 443,
    "Protocol": "HTTPS"
   }
  },
  "Store1D2A845B": {
   "Type": "AWS::ElasticLoadBalancingV2::TrustStore",
   "Properties": {
    "CaCertificatesBundleS3Bucket": {
     "Ref": "Bucket83908E77"
    },
    "CaCertificatesBundleS3Key": "rootCA_cert.pem",
    "Name": "albmtlsteststackStore63864577"
   },
   "DependsOn": [
    "DeployCaCertAwsCliLayer0CCD78B3",
    "DeployCaCertCustomResourceCDD68C79"
   ]
  },
  "Revocation2857AF0C": {
   "Type": "AWS::ElasticLoadBalancingV2::TrustStoreRevocation",
   "Properties": {
    "RevocationContents": [
     {
      "S3Bucket": {
       "Ref": "Bucket83908E77"
      },
      "S3Key": "crl.pem"
     }
    ],
    "TrustStoreArn": {
     "Fn::GetAtt": [
      "Store1D2A845B",
      "TrustStoreArn"
     ]
    }
   },
   "DependsOn": [
    "DeployCaCertAwsCliLayer0CCD78B3",
    "DeployCaCertCustomResourceCDD68C79"
   ]
  },
  "ARecordE7B57761": {
   "Type": "AWS::Route53::RecordSet",
   "Properties": {
    "AliasTarget": {
     "DNSName": {
      "Fn::Join": [
       "",
       [
        "dualstack.",
        {
         "Fn::GetAtt": [
          "LB8A12904C",
          "DNSName"
         ]
        }
       ]
      ]
     },
     "HostedZoneId": {
      "Fn::GetAtt": [
       "LB8A12904C",
       "CanonicalHostedZoneID"
      ]
     }
    },
    "HostedZoneId": "Z23ABC4XYZL05B",
    "Name": "example.com.",
    "Type": "A"
   }
  }
 },
 "Mappings": {
  "LatestNodeRuntimeMap": {
   "af-south-1": {
    "value": "nodejs20.x"
   },
   "ap-east-1": {
    "value": "nodejs20.x"
   },
   "ap-northeast-1": {
    "value": "nodejs20.x"
   },
   "ap-northeast-2": {
    "value": "nodejs20.x"
   },
   "ap-northeast-3": {
    "value": "nodejs20.x"
   },
   "ap-south-1": {
    "value": "nodejs20.x"
   },
   "ap-south-2": {
    "value": "nodejs20.x"
   },
   "ap-southeast-1": {
    "value": "nodejs20.x"
   },
   "ap-southeast-2": {
    "value": "nodejs20.x"
   },
   "ap-southeast-3": {
    "value": "nodejs20.x"
   },
   "ap-southeast-4": {
    "value": "nodejs20.x"
   },
   "ap-southeast-5": {
    "value": "nodejs20.x"
   },
   "ap-southeast-7": {
    "value": "nodejs20.x"
   },
   "ca-central-1": {
    "value": "nodejs20.x"
   },
   "ca-west-1": {
    "value": "nodejs20.x"
   },
   "cn-north-1": {
    "value": "nodejs18.x"
   },
   "cn-northwest-1": {
    "value": "nodejs18.x"
   },
   "eu-central-1": {
    "value": "nodejs20.x"
   },
   "eu-central-2": {
    "value": "nodejs20.x"
   },
   "eu-isoe-west-1": {
    "value": "nodejs18.x"
   },
   "eu-north-1": {
    "value": "nodejs20.x"
   },
   "eu-south-1": {
    "value": "nodejs20.x"
   },
   "eu-south-2": {
    "value": "nodejs20.x"
   },
   "eu-west-1": {
    "value": "nodejs20.x"
   },
   "eu-west-2": {
    "value": "nodejs20.x"
   },
   "eu-west-3": {
    "value": "nodejs20.x"
   },
   "il-central-1": {
    "value": "nodejs20.x"
   },
   "me-central-1": {
    "value": "nodejs20.x"
   },
   "me-south-1": {
    "value": "nodejs20.x"
   },
   "mx-central-1": {
    "value": "nodejs20.x"
   },
   "sa-east-1": {
    "value": "nodejs20.x"
   },
   "us-east-1": {
    "value": "nodejs20.x"
   },
   "us-east-2": {
    "value": "nodejs20.x"
   },
   "us-gov-east-1": {
    "value": "nodejs18.x"
   },
   "us-gov-west-1": {
    "value": "nodejs18.x"
   },
   "us-iso-east-1": {
    "value": "nodejs18.x"
   },
   "us-iso-west-1": {
    "value": "nodejs18.x"
   },
   "us-isob-east-1": {
    "value": "nodejs18.x"
   },
   "us-west-1": {
    "value": "nodejs20.x"
   },
   "us-west-2": {
    "value": "nodejs20.x"
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}