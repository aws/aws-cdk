"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const batch = require("@aws-cdk/aws-batch-alpha");
const aws_ecs_1 = require("aws-cdk-lib/aws-ecs");
const events = require("aws-cdk-lib/aws-events");
const sqs = require("aws-cdk-lib/aws-sqs");
const cdk = require("aws-cdk-lib");
const targets = require("aws-cdk-lib/aws-events-targets");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'batch-events');
const queue = new batch.JobQueue(stack, 'MyQueue', {
    computeEnvironments: [
        {
            computeEnvironment: new batch.UnmanagedComputeEnvironment(stack, 'ComputeEnvironment'),
            order: 1,
        },
    ],
});
const job = new batch.EcsJobDefinition(stack, 'MyJob', {
    container: new batch.EcsEc2ContainerDefinition(stack, 'container', {
        image: aws_ecs_1.ContainerImage.fromRegistry('test-repo'),
        cpu: 256,
        memory: cdk.Size.mebibytes(2048),
    }),
});
const timer = new events.Rule(stack, 'Timer', {
    schedule: events.Schedule.rate(cdk.Duration.minutes(1)),
});
timer.addTarget(new targets.BatchJob(queue.jobQueueArn, queue, job.jobDefinitionArn, job));
const timer2 = new events.Rule(stack, 'Timer2', {
    schedule: events.Schedule.rate(cdk.Duration.minutes(2)),
});
const dlq = new sqs.Queue(stack, 'Queue');
timer2.addTarget(new targets.BatchJob(queue.jobQueueArn, queue, job.jobDefinitionArn, job, {
    deadLetterQueue: dlq,
    retryAttempts: 2,
    maxEventAge: cdk.Duration.hours(2),
}));
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuam9iLWRlZmluaXRpb24tZXZlbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW50ZWcuam9iLWRlZmluaXRpb24tZXZlbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsa0RBQWtEO0FBQ2xELGlEQUFxRDtBQUNyRCxpREFBaUQ7QUFDakQsMkNBQTJDO0FBQzNDLG1DQUFtQztBQUNuQywwREFBMEQ7QUFFMUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFFMUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxjQUFjLENBQUMsQ0FBQztBQUVqRCxNQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRTtJQUNqRCxtQkFBbUIsRUFBRTtRQUNuQjtZQUNFLGtCQUFrQixFQUFFLElBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLEtBQUssRUFBRSxvQkFBb0IsQ0FBQztZQUN0RixLQUFLLEVBQUUsQ0FBQztTQUNUO0tBQ0Y7Q0FDRixDQUFDLENBQUM7QUFDSCxNQUFNLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFO0lBQ3JELFNBQVMsRUFBRSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFO1FBQ2pFLEtBQUssRUFBRSx3QkFBYyxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUM7UUFDL0MsR0FBRyxFQUFFLEdBQUc7UUFDUixNQUFNLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO0tBQ2pDLENBQUM7Q0FDSCxDQUFDLENBQUM7QUFFSCxNQUFNLEtBQUssR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRTtJQUM1QyxRQUFRLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDeEQsQ0FBQyxDQUFDO0FBQ0gsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFFM0YsTUFBTSxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUU7SUFDOUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3hELENBQUMsQ0FBQztBQUVILE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFFMUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtJQUN6RixlQUFlLEVBQUUsR0FBRztJQUNwQixhQUFhLEVBQUUsQ0FBQztJQUNoQixXQUFXLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0NBQ25DLENBQUMsQ0FBQyxDQUFDO0FBRUosR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYmF0Y2ggZnJvbSAnQGF3cy1jZGsvYXdzLWJhdGNoLWFscGhhJztcbmltcG9ydCB7IENvbnRhaW5lckltYWdlIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWVjcyc7XG5pbXBvcnQgKiBhcyBldmVudHMgZnJvbSAnYXdzLWNkay1saWIvYXdzLWV2ZW50cyc7XG5pbXBvcnQgKiBhcyBzcXMgZnJvbSAnYXdzLWNkay1saWIvYXdzLXNxcyc7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0ICogYXMgdGFyZ2V0cyBmcm9tICdhd3MtY2RrLWxpYi9hd3MtZXZlbnRzLXRhcmdldHMnO1xuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuXG5jb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soYXBwLCAnYmF0Y2gtZXZlbnRzJyk7XG5cbmNvbnN0IHF1ZXVlID0gbmV3IGJhdGNoLkpvYlF1ZXVlKHN0YWNrLCAnTXlRdWV1ZScsIHtcbiAgY29tcHV0ZUVudmlyb25tZW50czogW1xuICAgIHtcbiAgICAgIGNvbXB1dGVFbnZpcm9ubWVudDogbmV3IGJhdGNoLlVubWFuYWdlZENvbXB1dGVFbnZpcm9ubWVudChzdGFjaywgJ0NvbXB1dGVFbnZpcm9ubWVudCcpLFxuICAgICAgb3JkZXI6IDEsXG4gICAgfSxcbiAgXSxcbn0pO1xuY29uc3Qgam9iID0gbmV3IGJhdGNoLkVjc0pvYkRlZmluaXRpb24oc3RhY2ssICdNeUpvYicsIHtcbiAgY29udGFpbmVyOiBuZXcgYmF0Y2guRWNzRWMyQ29udGFpbmVyRGVmaW5pdGlvbihzdGFjaywgJ2NvbnRhaW5lcicsIHtcbiAgICBpbWFnZTogQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCd0ZXN0LXJlcG8nKSxcbiAgICBjcHU6IDI1NixcbiAgICBtZW1vcnk6IGNkay5TaXplLm1lYmlieXRlcygyMDQ4KSxcbiAgfSksXG59KTtcblxuY29uc3QgdGltZXIgPSBuZXcgZXZlbnRzLlJ1bGUoc3RhY2ssICdUaW1lcicsIHtcbiAgc2NoZWR1bGU6IGV2ZW50cy5TY2hlZHVsZS5yYXRlKGNkay5EdXJhdGlvbi5taW51dGVzKDEpKSxcbn0pO1xudGltZXIuYWRkVGFyZ2V0KG5ldyB0YXJnZXRzLkJhdGNoSm9iKHF1ZXVlLmpvYlF1ZXVlQXJuLCBxdWV1ZSwgam9iLmpvYkRlZmluaXRpb25Bcm4sIGpvYikpO1xuXG5jb25zdCB0aW1lcjIgPSBuZXcgZXZlbnRzLlJ1bGUoc3RhY2ssICdUaW1lcjInLCB7XG4gIHNjaGVkdWxlOiBldmVudHMuU2NoZWR1bGUucmF0ZShjZGsuRHVyYXRpb24ubWludXRlcygyKSksXG59KTtcblxuY29uc3QgZGxxID0gbmV3IHNxcy5RdWV1ZShzdGFjaywgJ1F1ZXVlJyk7XG5cbnRpbWVyMi5hZGRUYXJnZXQobmV3IHRhcmdldHMuQmF0Y2hKb2IocXVldWUuam9iUXVldWVBcm4sIHF1ZXVlLCBqb2Iuam9iRGVmaW5pdGlvbkFybiwgam9iLCB7XG4gIGRlYWRMZXR0ZXJRdWV1ZTogZGxxLFxuICByZXRyeUF0dGVtcHRzOiAyLFxuICBtYXhFdmVudEFnZTogY2RrLkR1cmF0aW9uLmhvdXJzKDIpLFxufSkpO1xuXG5hcHAuc3ludGgoKTtcbiJdfQ==