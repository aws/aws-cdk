"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events = require("aws-cdk-lib/aws-events");
const logs = require("aws-cdk-lib/aws-logs");
const sqs = require("aws-cdk-lib/aws-sqs");
const cdk = require("aws-cdk-lib");
const integ_tests_alpha_1 = require("@aws-cdk/integ-tests-alpha");
const targets = require("aws-cdk-lib/aws-events-targets");
const aws_events_targets_1 = require("aws-cdk-lib/aws-events-targets");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'log-group-events');
const logGroup = new logs.LogGroup(stack, 'log-group', {
    removalPolicy: cdk.RemovalPolicy.DESTROY,
});
const logGroup2 = new logs.LogGroup(stack, 'log-group2', {
    removalPolicy: cdk.RemovalPolicy.DESTROY,
});
new logs.LogGroup(stack, 'log-group-imported', {
    logGroupName: 'MyLogGroupNameToBeImported',
    removalPolicy: cdk.RemovalPolicy.DESTROY,
});
const importedLogGroup = logs.LogGroup.fromLogGroupName(stack, 'imported-log-group', 'MyLogGroupNameToBeImported');
const timer = new events.Rule(stack, 'Timer', {
    schedule: events.Schedule.rate(cdk.Duration.minutes(1)),
});
timer.addTarget(new targets.CloudWatchLogGroup(logGroup));
const customRule = new events.Rule(stack, 'CustomRule', {
    eventPattern: {
        source: ['cdk-integ'],
        detailType: ['cdk-integ-custom-rule'],
    },
});
customRule.addTarget(new targets.CloudWatchLogGroup(logGroup2, {
    logEvent: aws_events_targets_1.LogGroupTargetInput.fromObject({
        message: events.EventField.fromPath('$.detail.date'),
    }),
}));
const queue = new sqs.Queue(stack, 'dlq');
const timer3 = new events.Rule(stack, 'Timer3', {
    schedule: events.Schedule.rate(cdk.Duration.minutes(1)),
});
timer3.addTarget(new targets.CloudWatchLogGroup(importedLogGroup, {
    deadLetterQueue: queue,
    maxEventAge: cdk.Duration.hours(2),
    retryAttempts: 2,
}));
const integ = new integ_tests_alpha_1.IntegTest(app, 'LogGroup', {
    testCases: [stack],
});
const putEventsDate = Date.now().toString();
const expectedValue = `abc${putEventsDate}`;
const putEvent = integ.assertions.awsApiCall('EventBridge', 'putEvents', {
    Entries: [
        {
            Detail: JSON.stringify({
                date: expectedValue,
            }),
            DetailType: 'cdk-integ-custom-rule',
            Source: 'cdk-integ',
        },
    ],
});
putEvent.provider.addPolicyStatementFromSdkCall('events', 'PutEvents');
const logEvents = integ.assertions.awsApiCall('CloudWatchLogs', 'filterLogEvents', {
    logGroupName: logGroup2.logGroupName,
    startTime: putEventsDate,
    limit: 1,
});
putEvent.next(logEvents);
logEvents.assertAtPath('events.0.message', integ_tests_alpha_1.ExpectedResult.stringLikeRegexp(expectedValue));
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcubG9nLWdyb3VwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW50ZWcubG9nLWdyb3VwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaURBQWlEO0FBQ2pELDZDQUE2QztBQUM3QywyQ0FBMkM7QUFDM0MsbUNBQW1DO0FBQ25DLGtFQUF1RTtBQUN2RSwwREFBMEQ7QUFDMUQsdUVBQXFFO0FBRXJFLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBRTFCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztBQUVyRCxNQUFNLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRTtJQUNyRCxhQUFhLEVBQUUsR0FBRyxDQUFDLGFBQWEsQ0FBQyxPQUFPO0NBQ3pDLENBQUMsQ0FBQztBQUVILE1BQU0sU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFO0lBQ3ZELGFBQWEsRUFBRSxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU87Q0FDekMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxvQkFBb0IsRUFBRTtJQUM3QyxZQUFZLEVBQUUsNEJBQTRCO0lBQzFDLGFBQWEsRUFBRSxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU87Q0FDekMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxvQkFBb0IsRUFBRSw0QkFBNEIsQ0FBQyxDQUFDO0FBRW5ILE1BQU0sS0FBSyxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFO0lBQzVDLFFBQVEsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFD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JztcbmltcG9ydCAqIGFzIGxvZ3MgZnJvbSAnYXdzLWNkay1saWIvYXdzLWxvZ3MnO1xuaW1wb3J0ICogYXMgc3FzIGZyb20gJ2F3cy1jZGstbGliL2F3cy1zcXMnO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IEludGVnVGVzdCwgRXhwZWN0ZWRSZXN1bHQgfSBmcm9tICdAYXdzLWNkay9pbnRlZy10ZXN0cy1hbHBoYSc7XG5pbXBvcnQgKiBhcyB0YXJnZXRzIGZyb20gJ2F3cy1jZGstbGliL2F3cy1ldmVudHMtdGFyZ2V0cyc7XG5pbXBvcnQgeyBMb2dHcm91cFRhcmdldElucHV0IH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWV2ZW50cy10YXJnZXRzJztcblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcblxuY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ2xvZy1ncm91cC1ldmVudHMnKTtcblxuY29uc3QgbG9nR3JvdXAgPSBuZXcgbG9ncy5Mb2dHcm91cChzdGFjaywgJ2xvZy1ncm91cCcsIHtcbiAgcmVtb3ZhbFBvbGljeTogY2RrLlJlbW92YWxQb2xpY3kuREVTVFJPWSxcbn0pO1xuXG5jb25zdCBsb2dHcm91cDIgPSBuZXcgbG9ncy5Mb2dHcm91cChzdGFjaywgJ2xvZy1ncm91cDInLCB7XG4gIHJlbW92YWxQb2xpY3k6IGNkay5SZW1vdmFsUG9saWN5LkRFU1RST1ksXG59KTtcblxubmV3IGxvZ3MuTG9nR3JvdXAoc3RhY2ssICdsb2ctZ3JvdXAtaW1wb3J0ZWQnLCB7XG4gIGxvZ0dyb3VwTmFtZTogJ015TG9nR3JvdXBOYW1lVG9CZUltcG9ydGVkJyxcbiAgcmVtb3ZhbFBvbGljeTogY2RrLlJlbW92YWxQb2xpY3kuREVTVFJPWSxcbn0pO1xuXG5jb25zdCBpbXBvcnRlZExvZ0dyb3VwID0gbG9ncy5Mb2dHcm91cC5mcm9tTG9nR3JvdXBOYW1lKHN0YWNrLCAnaW1wb3J0ZWQtbG9nLWdyb3VwJywgJ015TG9nR3JvdXBOYW1lVG9CZUltcG9ydGVkJyk7XG5cbmNvbnN0IHRpbWVyID0gbmV3IGV2ZW50cy5SdWxlKHN0YWNrLCAnVGltZXInLCB7XG4gIHNjaGVkdWxlOiBldmVudHMuU2NoZWR1bGUucmF0ZShjZGsuRHVyYXRpb24ubWludXRlcygxKSksXG59KTtcbnRpbWVyLmFkZFRhcmdldChuZXcgdGFyZ2V0cy5DbG91ZFdhdGNoTG9nR3JvdXAobG9nR3JvdXApKTtcblxuY29uc3QgY3VzdG9tUnVsZSA9IG5ldyBldmVudHMuUnVsZShzdGFjaywgJ0N1c3RvbVJ1bGUnLCB7XG4gIGV2ZW50UGF0dGVybjoge1xuICAgIHNvdXJjZTogWydjZGstaW50ZWcnXSxcbiAgICBkZXRhaWxUeXBlOiBbJ2Nkay1pbnRlZy1jdXN0b20tcnVsZSddLFxuICB9LFxufSk7XG5jdXN0b21SdWxlLmFkZFRhcmdldChuZXcgdGFyZ2V0cy5DbG91ZFdhdGNoTG9nR3JvdXAobG9nR3JvdXAyLCB7XG4gIGxvZ0V2ZW50OiBMb2dHcm91cFRhcmdldElucHV0LmZyb21PYmplY3Qoe1xuICAgIG1lc3NhZ2U6IGV2ZW50cy5FdmVudEZpZWxkLmZyb21QYXRoKCckLmRldGFpbC5kYXRlJyksXG4gIH0pLFxufSkpO1xuXG5jb25zdCBxdWV1ZSA9IG5ldyBzcXMuUXVldWUoc3RhY2ssICdkbHEnKTtcblxuY29uc3QgdGltZXIzID0gbmV3IGV2ZW50cy5SdWxlKHN0YWNrLCAnVGltZXIzJywge1xuICBzY2hlZHVsZTogZXZlbnRzLlNjaGVkdWxlLnJhdGUoY2RrLkR1cmF0aW9uLm1pbnV0ZXMoMSkpLFxufSk7XG50aW1lcjMuYWRkVGFyZ2V0KG5ldyB0YXJnZXRzLkNsb3VkV2F0Y2hMb2dHcm91cChpbXBvcnRlZExvZ0dyb3VwLCB7XG4gIGRlYWRMZXR0ZXJRdWV1ZTogcXVldWUsXG4gIG1heEV2ZW50QWdlOiBjZGsuRHVyYXRpb24uaG91cnMoMiksXG4gIHJldHJ5QXR0ZW1wdHM6IDIsXG59KSk7XG5cbmNvbnN0IGludGVnID0gbmV3IEludGVnVGVzdChhcHAsICdMb2dHcm91cCcsIHtcbiAgdGVzdENhc2VzOiBbc3RhY2tdLFxufSk7XG5cbmNvbnN0IHB1dEV2ZW50c0RhdGUgPSBEYXRlLm5vdygpLnRvU3RyaW5nKCk7XG5jb25zdCBleHBlY3RlZFZhbHVlID0gYGFiYyR7cHV0RXZlbnRzRGF0ZX1gO1xuXG5jb25zdCBwdXRFdmVudCA9IGludGVnLmFzc2VydGlvbnMuYXdzQXBpQ2FsbCgnRXZlbnRCcmlkZ2UnLCAncHV0RXZlbnRzJywge1xuICBFbnRyaWVzOiBbXG4gICAge1xuICAgICAgRGV0YWlsOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGRhdGU6IGV4cGVjdGVkVmFsdWUsXG4gICAgICB9KSxcbiAgICAgIERldGFpbFR5cGU6ICdjZGstaW50ZWctY3VzdG9tLXJ1bGUnLFxuICAgICAgU291cmNlOiAnY2RrLWludGVnJyxcbiAgICB9LFxuICBdLFxufSk7XG5wdXRFdmVudC5wcm92aWRlci5hZGRQb2xpY3lTdGF0ZW1lbnRGcm9tU2RrQ2FsbCgnZXZlbnRzJywgJ1B1dEV2ZW50cycpO1xuXG5jb25zdCBsb2dFdmVudHMgPSBpbnRlZy5hc3NlcnRpb25zLmF3c0FwaUNhbGwoJ0Nsb3VkV2F0Y2hMb2dzJywgJ2ZpbHRlckxvZ0V2ZW50cycsIHtcbiAgbG9nR3JvdXBOYW1lOiBsb2dHcm91cDIubG9nR3JvdXBOYW1lLFxuICBzdGFydFRpbWU6IHB1dEV2ZW50c0RhdGUsXG4gIGxpbWl0OiAxLFxufSk7XG5cbnB1dEV2ZW50Lm5leHQobG9nRXZlbnRzKTtcblxubG9nRXZlbnRzLmFzc2VydEF0UGF0aCgnZXZlbnRzLjAubWVzc2FnZScsIEV4cGVjdGVkUmVzdWx0LnN0cmluZ0xpa2VSZWdleHAoZXhwZWN0ZWRWYWx1ZSkpO1xuXG5hcHAuc3ludGgoKTtcbiJdfQ==