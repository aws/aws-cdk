#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const codebuild = require("aws-cdk-lib/aws-codebuild");
const codecommit = require("aws-cdk-lib/aws-codecommit");
const events = require("aws-cdk-lib/aws-events");
const sns = require("aws-cdk-lib/aws-sns");
const subs = require("aws-cdk-lib/aws-sns-subscriptions");
const sqs = require("aws-cdk-lib/aws-sqs");
const cdk = require("aws-cdk-lib");
const targets = require("aws-cdk-lib/aws-events-targets");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-cdk-codebuild-events');
const repo = new codecommit.Repository(stack, 'MyRepo', {
    repositoryName: 'aws-cdk-codebuild-events',
});
const project = new codebuild.Project(stack, 'MyProject', {
    source: codebuild.Source.codeCommit({ repository: repo }),
});
const queue = new sqs.Queue(stack, 'MyQueue');
const deadLetterQueue = new sqs.Queue(stack, 'DeadLetterQueue');
const topic = new sns.Topic(stack, 'MyTopic');
topic.addSubscription(new subs.SqsSubscription(queue));
// this will send an email with the JSON event for every state change of this
// build project.
project.onStateChange('StateChange', { target: new targets.SnsTopic(topic) });
// this will send an email with the message "Build phase changed to <phase>".
// The phase will be extracted from the "completed-phase" field of the event
// details.
project.onPhaseChange('PhaseChange', {
    target: new targets.SnsTopic(topic, {
        message: events.RuleTargetInput.fromText(`Build phase changed to ${codebuild.PhaseChangeEvent.completedPhase}`),
    }),
});
// trigger a build when a commit is pushed to the repo
const onCommitRule = repo.onCommit('OnCommit', {
    target: new targets.CodeBuildProject(project, {
        deadLetterQueue: deadLetterQueue,
        maxEventAge: cdk.Duration.hours(2),
        retryAttempts: 2,
    }),
    branches: ['master'],
});
onCommitRule.addTarget(new targets.SnsTopic(topic, {
    message: events.RuleTargetInput.fromText(`A commit was pushed to the repository ${codecommit.ReferenceEvent.repositoryName} on branch ${codecommit.ReferenceEvent.referenceName}`),
}));
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcucHJvamVjdC1ldmVudHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy5wcm9qZWN0LWV2ZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSx1REFBdUQ7QUFDdkQseURBQXlEO0FBQ3pELGlEQUFpRDtBQUNqRCwyQ0FBMkM7QUFDM0MsMERBQTBEO0FBQzFELDJDQUEyQztBQUMzQyxtQ0FBbUM7QUFDbkMsMERBQTBEO0FBRTFELE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBRTFCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsMEJBQTBCLENBQUMsQ0FBQztBQUU3RCxNQUFNLElBQUksR0FBRyxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRTtJQUN0RCxjQUFjLEVBQUUsMEJBQTBCO0NBQzNDLENBQUMsQ0FBQztBQUNILE1BQU0sT0FBTyxHQUFHLElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFO0lBQ3hELE1BQU0sRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsQ0FBQztDQUMxRCxDQUFDLENBQUM7QUFFSCxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQzlDLE1BQU0sZUFBZSxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztBQUVoRSxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQzlDLEtBQUssQ0FBQyxlQUFlLENBQUMsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFFdkQsNkVBQTZFO0FBQzdFLGlCQUFpQjtBQUNqQixPQUFPLENBQUMsYUFBYSxDQUFDLGFBQWEsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRTlFLDZFQUE2RTtBQUM3RSw0RUFBNEU7QUFDNUUsV0FBVztBQUNYLE9BQU8sQ0FBQyxhQUFhLENBQUMsYUFBYSxFQUFFO0lBQ25DLE1BQU0sRUFBRSxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFO1FBQ2xDLE9BQU8sRUFBRSxNQUFNLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQywwQkFBMEIsU0FBUyxDQUFDLGdCQUFnQixDQUFDLGNBQWMsRUFBRSxDQUFDO0tBQ2hILENBQUM7Q0FDSCxDQUFDLENBQUM7QUFFSCxzREFBc0Q7QUFDdEQsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUU7SUFDN0MsTUFBTSxFQUFFLElBQUksT0FBTyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRTtRQUM1QyxlQUFlLEVBQUUsZUFBZTtRQUNoQyxXQUFXLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLGFBQWEsRUFBRSxDQUFDO0tBQ2pCLENBQUM7SUFDRixRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUM7Q0FDckIsQ0FBQyxDQUFDO0FBRUgsWUFBWSxDQUFDLFNBQVMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFO0lBQ2pELE9BQU8sRUFBRSxNQUFNLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FDdEMseUNBQXlDLFVBQVUsQ0FBQyxjQUFjLENBQUMsY0FBYyxjQUFjLFVBQVUsQ0FBQyxjQUFjLENBQUMsYUFBYSxFQUFFLENBQ3pJO0NBQ0YsQ0FBQyxDQUFDLENBQUM7QUFFSixHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5pbXBvcnQgKiBhcyBjb2RlYnVpbGQgZnJvbSAnYXdzLWNkay1saWIvYXdzLWNvZGVidWlsZCc7XG5pbXBvcnQgKiBhcyBjb2RlY29tbWl0IGZyb20gJ2F3cy1jZGstbGliL2F3cy1jb2RlY29tbWl0JztcbmltcG9ydCAqIGFzIGV2ZW50cyBmcm9tICdhd3MtY2RrLWxpYi9hd3MtZXZlbnRzJztcbmltcG9ydCAqIGFzIHNucyBmcm9tICdhd3MtY2RrLWxpYi9hd3Mtc25zJztcbmltcG9ydCAqIGFzIHN1YnMgZnJvbSAnYXdzLWNkay1saWIvYXdzLXNucy1zdWJzY3JpcHRpb25zJztcbmltcG9ydCAqIGFzIHNxcyBmcm9tICdhd3MtY2RrLWxpYi9hd3Mtc3FzJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgKiBhcyB0YXJnZXRzIGZyb20gJ2F3cy1jZGstbGliL2F3cy1ldmVudHMtdGFyZ2V0cyc7XG5cbmNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG5cbmNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjayhhcHAsICdhd3MtY2RrLWNvZGVidWlsZC1ldmVudHMnKTtcblxuY29uc3QgcmVwbyA9IG5ldyBjb2RlY29tbWl0LlJlcG9zaXRvcnkoc3RhY2ssICdNeVJlcG8nLCB7XG4gIHJlcG9zaXRvcnlOYW1lOiAnYXdzLWNkay1jb2RlYnVpbGQtZXZlbnRzJyxcbn0pO1xuY29uc3QgcHJvamVjdCA9IG5ldyBjb2RlYnVpbGQuUHJvamVjdChzdGFjaywgJ015UHJvamVjdCcsIHtcbiAgc291cmNlOiBjb2RlYnVpbGQuU291cmNlLmNvZGVDb21taXQoeyByZXBvc2l0b3J5OiByZXBvIH0pLFxufSk7XG5cbmNvbnN0IHF1ZXVlID0gbmV3IHNxcy5RdWV1ZShzdGFjaywgJ015UXVldWUnKTtcbmNvbnN0IGRlYWRMZXR0ZXJRdWV1ZSA9IG5ldyBzcXMuUXVldWUoc3RhY2ssICdEZWFkTGV0dGVyUXVldWUnKTtcblxuY29uc3QgdG9waWMgPSBuZXcgc25zLlRvcGljKHN0YWNrLCAnTXlUb3BpYycpO1xudG9waWMuYWRkU3Vic2NyaXB0aW9uKG5ldyBzdWJzLlNxc1N1YnNjcmlwdGlvbihxdWV1ZSkpO1xuXG4vLyB0aGlzIHdpbGwgc2VuZCBhbiBlbWFpbCB3aXRoIHRoZSBKU09OIGV2ZW50IGZvciBldmVyeSBzdGF0ZSBjaGFuZ2Ugb2YgdGhpc1xuLy8gYnVpbGQgcHJvamVjdC5cbnByb2plY3Qub25TdGF0ZUNoYW5nZSgnU3RhdGVDaGFuZ2UnLCB7IHRhcmdldDogbmV3IHRhcmdldHMuU25zVG9waWModG9waWMpIH0pO1xuXG4vLyB0aGlzIHdpbGwgc2VuZCBhbiBlbWFpbCB3aXRoIHRoZSBtZXNzYWdlIFwiQnVpbGQgcGhhc2UgY2hhbmdlZCB0byA8cGhhc2U+XCIuXG4vLyBUaGUgcGhhc2Ugd2lsbCBiZSBleHRyYWN0ZWQgZnJvbSB0aGUgXCJjb21wbGV0ZWQtcGhhc2VcIiBmaWVsZCBvZiB0aGUgZXZlbnRcbi8vIGRldGFpbHMuXG5wcm9qZWN0Lm9uUGhhc2VDaGFuZ2UoJ1BoYXNlQ2hhbmdlJywge1xuICB0YXJnZXQ6IG5ldyB0YXJnZXRzLlNuc1RvcGljKHRvcGljLCB7XG4gICAgbWVzc2FnZTogZXZlbnRzLlJ1bGVUYXJnZXRJbnB1dC5mcm9tVGV4dChgQnVpbGQgcGhhc2UgY2hhbmdlZCB0byAke2NvZGVidWlsZC5QaGFzZUNoYW5nZUV2ZW50LmNvbXBsZXRlZFBoYXNlfWApLFxuICB9KSxcbn0pO1xuXG4vLyB0cmlnZ2VyIGEgYnVpbGQgd2hlbiBhIGNvbW1pdCBpcyBwdXNoZWQgdG8gdGhlIHJlcG9cbmNvbnN0IG9uQ29tbWl0UnVsZSA9IHJlcG8ub25Db21taXQoJ09uQ29tbWl0Jywge1xuICB0YXJnZXQ6IG5ldyB0YXJnZXRzLkNvZGVCdWlsZFByb2plY3QocHJvamVjdCwge1xuICAgIGRlYWRMZXR0ZXJRdWV1ZTogZGVhZExldHRlclF1ZXVlLFxuICAgIG1heEV2ZW50QWdlOiBjZGsuRHVyYXRpb24uaG91cnMoMiksXG4gICAgcmV0cnlBdHRlbXB0czogMixcbiAgfSksXG4gIGJyYW5jaGVzOiBbJ21hc3RlciddLFxufSk7XG5cbm9uQ29tbWl0UnVsZS5hZGRUYXJnZXQobmV3IHRhcmdldHMuU25zVG9waWModG9waWMsIHtcbiAgbWVzc2FnZTogZXZlbnRzLlJ1bGVUYXJnZXRJbnB1dC5mcm9tVGV4dChcbiAgICBgQSBjb21taXQgd2FzIHB1c2hlZCB0byB0aGUgcmVwb3NpdG9yeSAke2NvZGVjb21taXQuUmVmZXJlbmNlRXZlbnQucmVwb3NpdG9yeU5hbWV9IG9uIGJyYW5jaCAke2NvZGVjb21taXQuUmVmZXJlbmNlRXZlbnQucmVmZXJlbmNlTmFtZX1gLFxuICApLFxufSkpO1xuXG5hcHAuc3ludGgoKTtcbiJdfQ==