import * as fs from 'fs';
import { Construct } from 'constructs';
import { CfnSAMLProvider } from './iam.generated';
import { IResource, Resource, Token } from '../../core';
import { addConstructMetadata } from '../../core/lib/metadata-resource';

/**
 * A SAML provider
 */
export interface ISamlProvider extends IResource {
  /**
   * The Amazon Resource Name (ARN) of the provider
   *
   * @attribute
   */
  readonly samlProviderArn: string;
}

/**
 * Properties for a SAML provider
 */
export interface SamlProviderProps {
  /**
   * The name of the provider to create.
   *
   * This parameter allows a string of characters consisting of upper and
   * lowercase alphanumeric characters with no spaces. You can also include
   * any of the following characters: _+=,.@-
   *
   * Length must be between 1 and 128 characters.
   *
   * @default - a CloudFormation generated name
   */
  readonly name?: string;

  /**
   * An XML document generated by an identity provider (IdP) that supports
   * SAML 2.0. The document includes the issuer's name, expiration information,
   * and keys that can be used to validate the SAML authentication response
   * (assertions) that are received from the IdP. You must generate the metadata
   * document using the identity management software that is used as your
   * organization's IdP.
   */
  readonly metadataDocument: SamlMetadataDocument;

  /**
   * The private key from your external identity provider
   *
   * @default - No private key added
   */
  readonly privateKey?: string;

  /**
   * The encryption setting for the SAML provider
   *
   * @default - No encryption mode specified
   */
  readonly encryptionMode?: SamlAssertionEncryptionMode;

  /**
   * List of existing private keys for the SAML provider
   *
   * @default - No private keys
   */
  readonly existingPrivateKeys?: SamlPrivateKey[];

  /**
   * The Key ID of the private key to remove
   *
   * @default - No private key removed
   */
  readonly removePrivateKeyId?: string;
}

/**
 * A SAML metadata document
 */
export abstract class SamlMetadataDocument {
  /**
   * Create a SAML metadata document from a XML string
   */
  public static fromXml(xml: string): SamlMetadataDocument {
    return { xml };
  }

  /**
   * Create a SAML metadata document from a XML file
   */
  public static fromFile(path: string): SamlMetadataDocument {
    return { xml: fs.readFileSync(path, 'utf-8') };
  }

  /**
   * The XML content of the metadata document
   */
  public abstract readonly xml: string;
}

/**
 * Encryption mode for SAML assertions
 */
export enum SamlAssertionEncryptionMode {
  /**
   * Encryption is allowed but not required
   */
  ALLOWED = 'Allowed',

  /**
   * Encryption is required
   */
  REQUIRED = 'Required',
}

/**
 * Properties for a SAML private key
 */
export interface SamlPrivateKey {
  /**
   * The unique identifier for the SAML private key.
   */
  readonly keyId: string;

  /**
   * The date and time, in ISO 8601 date-time format, when the private key was uploaded.
   */
  readonly timestamp: string;
}

/**
 * A SAML provider
 */
export class SamlProvider extends Resource implements ISamlProvider {
  /**
   * Import an existing provider
   */
  public static fromSamlProviderArn(scope: Construct, id: string, samlProviderArn: string): ISamlProvider {
    class Import extends Resource implements ISamlProvider {
      public readonly samlProviderArn = samlProviderArn;
    }
    return new Import(scope, id);
  }

  public readonly samlProviderArn: string;

  constructor(scope: Construct, id: string, props: SamlProviderProps) {
    super(scope, id);
    // Enhanced CDK Analytics Telemetry
    addConstructMetadata(this, props);

    if (props.name && !Token.isUnresolved(props.name) && !/^[\w+=,.@-]{1,128}$/.test(props.name)) {
      throw new Error('Invalid SAML provider name. The name must be a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-. Length must be between 1 and 128 characters.');
    }

    const samlProvider = new CfnSAMLProvider(this, 'Resource', {
      name: props.name,
      samlMetadataDocument: props.metadataDocument.xml,
      addPrivateKey: props.privateKey,
      assertionEncryptionMode: props.encryptionMode,
      privateKeyList: props.existingPrivateKeys?.map(key => ({
        keyId: key.keyId,
        timestamp: key.timestamp,
      })),
      removePrivateKey: props.removePrivateKeyId,
    });

    this.samlProviderArn = samlProvider.ref;
  }
}
