/* eslint-disable quote-props */
/* eslint-disable @stylistic/comma-dangle */
/*
 * Do not edit this file manually. To prevent misconfiguration, this file
 * should only be modified by an automated GitHub workflow, that ensures
 * that the regions present in this list correspond to all the regions
 * where we have the AWS::CDK::Metadata handler deployed.
 *
 * See: https://github.com/aws/aws-cdk/issues/27189
 */

export const AWS_CDK_CONSTRUCTOR_PROPS: { [key: string]: any } = {
  '@aws-cdk.aws-amplify-alpha': {
    'App': {
      'appName': '*',
      'sourceCodeProvider': '*',
      'autoBranchCreation': {
        'patterns': '*',
        'basicAuth': '*',
        'buildSpec': '*',
        'autoBuild': 'boolean',
        'pullRequestPreview': 'boolean',
        'environmentVariables': '*',
        'pullRequestEnvironmentName': '*',
        'stage': '*'
      },
      'autoBranchDeletion': 'boolean',
      'basicAuth': '*',
      'buildSpec': '*',
      'customResponseHeaders': {
        'pattern': '*',
        'headers': '*'
      },
      'customRules': '*',
      'description': '*',
      'environmentVariables': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'platform': 'Platform',
      'cacheConfigType': 'CacheConfigType',
      'addCustomRule': [
        '*'
      ],
      'addEnvironment': [
        '*',
        '*'
      ],
      'addAutoBranchEnvironment': [
        '*',
        '*'
      ],
      'addBranch': [
        '*',
        {
          'basicAuth': '*',
          'branchName': '*',
          'buildSpec': '*',
          'description': '*',
          'autoBuild': 'boolean',
          'pullRequestPreview': 'boolean',
          'environmentVariables': '*',
          'pullRequestEnvironmentName': '*',
          'stage': '*',
          'asset': '*',
          'performanceMode': 'boolean'
        }
      ],
      'addDomain': [
        '*',
        {
          'domainName': '*',
          'subDomains': {
            'branch': {
              'branchName': '*',
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'prefix': '*'
          },
          'enableAutoSubdomain': 'boolean',
          'autoSubdomainCreationPatterns': '*',
          'customCertificate': {
            'certificateArn': '*'
          }
        }
      ]
    },
    'Branch': {
      'app': {
        'appId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'basicAuth': '*',
      'branchName': '*',
      'buildSpec': '*',
      'description': '*',
      'autoBuild': 'boolean',
      'pullRequestPreview': 'boolean',
      'environmentVariables': '*',
      'pullRequestEnvironmentName': '*',
      'stage': '*',
      'asset': '*',
      'performanceMode': 'boolean',
      'addEnvironment': [
        '*',
        '*'
      ]
    },
    'Domain': {
      'app': {
        'appId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'autoSubDomainIamRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'domainName': '*',
      'subDomains': {
        'branch': {
          'branchName': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'prefix': '*'
      },
      'enableAutoSubdomain': 'boolean',
      'autoSubdomainCreationPatterns': '*',
      'customCertificate': {
        'certificateArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'mapSubDomain': [
        {
          'branchName': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        '*'
      ],
      'mapRoot': [
        {
          'branchName': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      ]
    }
  },
  '@aws-cdk.aws-apprunner-alpha': {
    'AutoScalingConfiguration': {
      'autoScalingConfigurationName': '*',
      'maxConcurrency': '*',
      'maxSize': '*',
      'minSize': '*'
    },
    'ObservabilityConfiguration': {
      'observabilityConfigurationName': '*',
      'traceConfigurationVendor': 'TraceConfigurationVendor'
    },
    'Service': {
      'source': '*',
      'autoDeploymentsEnabled': 'boolean',
      'autoScalingConfiguration': {
        'autoScalingConfigurationArn': '*',
        'autoScalingConfigurationName': '*',
        'autoScalingConfigurationRevision': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'cpu': '*',
      'memory': '*',
      'accessRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'instanceRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'serviceName': '*',
      'vpcConnector': {
        'vpcConnectorName': '*',
        'vpcConnectorArn': '*',
        'vpcConnectorRevision': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'connections': '*'
      },
      'isPubliclyAccessible': 'boolean',
      'healthCheck': '*',
      'kmsKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'ipAddressType': 'IpAddressType',
      'observabilityConfiguration': {
        'observabilityConfigurationName': '*',
        'observabilityConfigurationArn': '*',
        'observabilityConfigurationRevision': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'addToRolePolicy': [
        '*'
      ],
      'addEnvironmentVariable': [
        '*',
        '*'
      ],
      'addSecret': [
        '*',
        '*'
      ]
    },
    'VpcConnector': {
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'vpcConnectorName': '*'
    },
    'VpcIngressConnection': {
      'vpcIngressConnectionName': '*',
      'service': {
        'serviceName': '*',
        'serviceArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'interfaceVpcEndpoint': {
        'vpcEndpointId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'connections': '*'
      }
    }
  },
  '@aws-cdk.aws-cloud9-alpha': {
    'Ec2Environment': {
      'owner': '*',
      'instanceType': '*',
      'subnetSelection': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'ec2EnvironmentName': '*',
      'description': '*',
      'clonedRepositories': '*',
      'connectionType': 'ConnectionType',
      'imageId': 'ImageId',
      'automaticStop': '*'
    }
  },
  '@aws-cdk.aws-codestar-alpha': {
    'GitHubRepository': {
      'owner': '*',
      'repositoryName': '*',
      'accessToken': '*',
      'contentsBucket': {
        'bucketArn': '*',
        'bucketName': '*',
        'bucketWebsiteUrl': '*',
        'bucketWebsiteDomainName': '*',
        'bucketDomainName': '*',
        'bucketDualStackDomainName': '*',
        'bucketRegionalDomainName': '*',
        'isWebsite': 'boolean',
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'policy': '*',
        'replicationRoleArn': '*'
      },
      'contentsKey': '*',
      'contentsS3Version': '*',
      'enableIssues': 'boolean',
      'visibility': 'RepositoryVisibility',
      'description': '*'
    }
  },
  '@aws-cdk.aws-cognito-identitypool-alpha': {
    'IdentityPoolRoleAttachment': {
      'identityPool': {
        'identityPoolId': '*',
        'identityPoolArn': '*',
        'identityPoolName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'authenticatedRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'unauthenticatedRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'roleMappings': {
        'providerUrl': '*',
        'mappingKey': '*',
        'useToken': 'boolean',
        'resolveAmbiguousRoles': 'boolean',
        'rules': {
          'claim': '*',
          'mappedRole': {
            'roleArn': '*',
            'roleName': '*',
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*',
            'grantPrincipal': {
              'assumeRoleAction': '*',
              'principalAccount': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'claimValue': '*',
          'matchType': 'RoleMappingMatchType'
        }
      }
    },
    'IdentityPool': {
      'identityPoolName': '*',
      'authenticatedRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'unauthenticatedRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'allowUnauthenticatedIdentities': 'boolean',
      'roleMappings': {
        'providerUrl': '*',
        'mappingKey': '*',
        'useToken': 'boolean',
        'resolveAmbiguousRoles': 'boolean',
        'rules': {
          'claim': '*',
          'mappedRole': {
            'roleArn': '*',
            'roleName': '*',
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*',
            'grantPrincipal': {
              'assumeRoleAction': '*',
              'principalAccount': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'claimValue': '*',
          'matchType': 'RoleMappingMatchType'
        }
      },
      'allowClassicFlow': 'boolean',
      'authenticationProviders': {
        'facebook': {
          'appId': '*'
        },
        'google': {
          'clientId': '*'
        },
        'amazon': {
          'appId': '*'
        },
        'apple': {
          'servicesId': '*'
        },
        'twitter': {
          'consumerKey': '*',
          'consumerSecret': '*'
        },
        'userPools': '*',
        'openIdConnectProviders': {
          'openIdConnectProviderArn': '*',
          'openIdConnectProviderIssuer': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'samlProviders': {
          'samlProviderArn': '*'
        },
        'customProvider': '*'
      },
      'addUserPoolAuthentication': [
        '*'
      ],
      'addRoleMappings': [
        {
          'providerUrl': '*',
          'mappingKey': '*',
          'useToken': 'boolean',
          'resolveAmbiguousRoles': 'boolean',
          'rules': {
            'claim': '*',
            'mappedRole': {
              'roleArn': '*',
              'roleName': '*',
              'assumeRoleAction': '*',
              'policyFragment': '*',
              'principalAccount': '*',
              'grantPrincipal': {
                'assumeRoleAction': '*',
                'principalAccount': '*'
              },
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'claimValue': '*',
            'matchType': 'RoleMappingMatchType'
          }
        }
      ]
    }
  },
  '@aws-cdk.aws-ec2-alpha': {
    'IpamPool': {
      'ipamScopeId': '*',
      'addressFamily': 'AddressFamily',
      'ipv4ProvisionedCidrs': '*',
      'locale': '*',
      'publicIpSource': 'IpamPoolPublicIpSource',
      'awsService': 'AwsServiceName',
      'ipamPoolName': '*',
      'provisionCidr': [
        '*',
        {
          'netmaskLength': '*',
          'cidr': '*'
        }
      ]
    },
    'IpamScope': {
      'ipamId': '*',
      'ipamOperatingRegions': '*',
      'ipamScopeId': '*',
      'ipamScopeName': '*'
    },
    'Ipam': {
      'addScope': [
        '*',
        '*',
        {
          'ipamScopeName': '*'
        }
      ]
    },
    'EgressOnlyInternetGateway': {
      'vpc': {
        'secondaryCidrBlock': {
          'amazonProvidedIpv6CidrBlock': 'boolean',
          'cidrBlock': '*',
          'ipv6IpamPoolId': '*',
          'ipv4IpamPoolId': '*',
          'ipv6CidrBlock': '*',
          'ipv6Pool': '*'
        },
        'ipv4CidrBlock': '*',
        'region': '*',
        'ownerAccountId': '*',
        'ipv4IpamProvisionedCidrs': '*',
        'vpcName': '*',
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'egressOnlyInternetGatewayName': '*'
    },
    'InternetGateway': {
      'vpc': {
        'secondaryCidrBlock': {
          'amazonProvidedIpv6CidrBlock': 'boolean',
          'cidrBlock': '*',
          'ipv6IpamPoolId': '*',
          'ipv4IpamPoolId': '*',
          'ipv6CidrBlock': '*',
          'ipv6Pool': '*'
        },
        'ipv4CidrBlock': '*',
        'region': '*',
        'ownerAccountId': '*',
        'ipv4IpamProvisionedCidrs': '*',
        'vpcName': '*',
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'internetGatewayName': '*'
    },
    'VPNGatewayV2': {
      'vpc': {
        'secondaryCidrBlock': {
          'amazonProvidedIpv6CidrBlock': 'boolean',
          'cidrBlock': '*',
          'ipv6IpamPoolId': '*',
          'ipv4IpamPoolId': '*',
          'ipv6CidrBlock': '*',
          'ipv6Pool': '*'
        },
        'ipv4CidrBlock': '*',
        'region': '*',
        'ownerAccountId': '*',
        'ipv4IpamProvisionedCidrs': '*',
        'vpcName': '*',
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'type': 'VpnConnectionType',
      'amazonSideAsn': '*',
      'vpnGatewayName': '*',
      'vpnRoutePropagation': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      }
    },
    'NatGateway': {
      'vpc': {
        'secondaryCidrBlock': {
          'amazonProvidedIpv6CidrBlock': 'boolean',
          'cidrBlock': '*',
          'ipv6IpamPoolId': '*',
          'ipv4IpamPoolId': '*',
          'ipv6CidrBlock': '*',
          'ipv6Pool': '*'
        },
        'ipv4CidrBlock': '*',
        'region': '*',
        'ownerAccountId': '*',
        'ipv4IpamProvisionedCidrs': '*',
        'vpcName': '*',
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'subnet': {
        'ipv6CidrBlock': '*',
        'subnetType': 'SubnetType',
        'availabilityZone': '*',
        'subnetId': '*',
        'internetConnectivityEstablished': '*',
        'ipv4CidrBlock': '*',
        'routeTable': {
          'routeTableId': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'allocationId': '*',
      'connectivityType': 'NatConnectivityType',
      'maxDrainDuration': '*',
      'privateIpAddress': '*',
      'secondaryAllocationIds': '*',
      'secondaryPrivateIpAddressCount': '*',
      'secondaryPrivateIpAddresses': '*',
      'natGatewayName': '*'
    },
    'VPCPeeringConnection': {
      'requestorVpc': {
        'secondaryCidrBlock': {
          'amazonProvidedIpv6CidrBlock': 'boolean',
          'cidrBlock': '*',
          'ipv6IpamPoolId': '*',
          'ipv4IpamPoolId': '*',
          'ipv6CidrBlock': '*',
          'ipv6Pool': '*'
        },
        'ipv4CidrBlock': '*',
        'region': '*',
        'ownerAccountId': '*',
        'ipv4IpamProvisionedCidrs': '*',
        'vpcName': '*',
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'acceptorVpc': {
        'secondaryCidrBlock': {
          'amazonProvidedIpv6CidrBlock': 'boolean',
          'cidrBlock': '*',
          'ipv6IpamPoolId': '*',
          'ipv4IpamPoolId': '*',
          'ipv6CidrBlock': '*',
          'ipv6Pool': '*'
        },
        'ipv4CidrBlock': '*',
        'region': '*',
        'ownerAccountId': '*',
        'ipv4IpamProvisionedCidrs': '*',
        'vpcName': '*',
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'peerRoleArn': '*',
      'vpcPeeringConnectionName': '*'
    },
    'Route': {
      'routeTable': {
        'routeTableId': '*'
      },
      'destination': '*',
      'target': '*',
      'routeName': '*'
    },
    'RouteTable': {
      'vpc': {
        'secondaryCidrBlock': {
          'amazonProvidedIpv6CidrBlock': 'boolean',
          'cidrBlock': '*',
          'ipv6IpamPoolId': '*',
          'ipv4IpamPoolId': '*',
          'ipv6CidrBlock': '*',
          'ipv6Pool': '*'
        },
        'ipv4CidrBlock': '*',
        'region': '*',
        'ownerAccountId': '*',
        'ipv4IpamProvisionedCidrs': '*',
        'vpcName': '*',
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'routeTableName': '*',
      'addRoute': [
        '*',
        '*',
        '*',
        '*'
      ]
    },
    'SubnetV2': {
      'vpc': {
        'secondaryCidrBlock': {
          'amazonProvidedIpv6CidrBlock': 'boolean',
          'cidrBlock': '*',
          'ipv6IpamPoolId': '*',
          'ipv4IpamPoolId': '*',
          'ipv6CidrBlock': '*',
          'ipv6Pool': '*'
        },
        'ipv4CidrBlock': '*',
        'region': '*',
        'ownerAccountId': '*',
        'ipv4IpamProvisionedCidrs': '*',
        'vpcName': '*',
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'ipv4CidrBlock': '*',
      'ipv6CidrBlock': '*',
      'availabilityZone': '*',
      'routeTable': {
        'routeTableId': '*'
      },
      'subnetType': 'SubnetType',
      'subnetName': '*',
      'assignIpv6AddressOnCreation': 'boolean',
      'associateNetworkAcl': [
        '*',
        {
          'networkAclId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      ]
    },
    'TransitGatewayRouteTableAssociation': {
      'transitGatewayVpcAttachment': {
        'transitGatewayAttachmentId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'transitGatewayRouteTable': {
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'routeTableId': '*'
      },
      'transitGatewayRouteTableAssociationName': '*'
    },
    'TransitGatewayRouteTablePropagation': {
      'transitGatewayVpcAttachment': {
        'transitGatewayAttachmentId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'transitGatewayRouteTable': {
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'routeTableId': '*'
      },
      'transitGatewayRouteTablePropagationName': '*'
    },
    'TransitGatewayRouteTable': {
      'transitGateway': {
        'transitGatewayId': '*',
        'transitGatewayArn': '*',
        'defaultRouteTable': {
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*',
          'routeTableId': '*'
        },
        'defaultRouteTableAssociation': 'boolean',
        'defaultRouteTablePropagation': 'boolean',
        'dnsSupport': 'boolean',
        'securityGroupReferencingSupport': 'boolean',
        'routerType': 'RouterType',
        'routerTargetId': '*'
      },
      'transitGatewayRouteTableName': '*'
    },
    'TransitGatewayRoute': {
      'transitGatewayAttachment': {
        'transitGatewayAttachmentId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'destinationCidrBlock': '*',
      'transitGatewayRouteTable': {
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'routeTableId': '*'
      },
      'transitGatewayRouteName': '*'
    },
    'TransitGatewayBlackholeRoute': {
      'destinationCidrBlock': '*',
      'transitGatewayRouteTable': {
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'routeTableId': '*'
      },
      'transitGatewayRouteName': '*'
    },
    'TransitGatewayVpcAttachment': {
      'transitGateway': {
        'transitGatewayId': '*',
        'transitGatewayArn': '*',
        'defaultRouteTable': {
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*',
          'routeTableId': '*'
        },
        'defaultRouteTableAssociation': 'boolean',
        'defaultRouteTablePropagation': 'boolean',
        'dnsSupport': 'boolean',
        'securityGroupReferencingSupport': 'boolean',
        'routerType': 'RouterType',
        'routerTargetId': '*'
      },
      'subnets': {
        'availabilityZone': '*',
        'subnetId': '*',
        'internetConnectivityEstablished': '*',
        'ipv4CidrBlock': '*',
        'routeTable': {
          'routeTableId': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'vpcAttachmentOptions': {
        'applianceModeSupport': 'boolean',
        'dnsSupport': 'boolean',
        'ipv6Support': 'boolean',
        'securityGroupReferencingSupport': 'boolean'
      },
      'transitGatewayAttachmentName': '*'
    },
    'TransitGateway': {
      'transitGatewayName': '*',
      'amazonSideAsn': '*',
      'autoAcceptSharedAttachments': 'boolean',
      'defaultRouteTableAssociation': 'boolean',
      'defaultRouteTablePropagation': 'boolean',
      'description': '*',
      'dnsSupport': 'boolean',
      'securityGroupReferencingSupport': 'boolean',
      'transitGatewayCidrBlocks': '*'
    },
    'VpcV2': {
      'primaryAddressBlock': '*',
      'secondaryAddressBlocks': '*',
      'enableDnsHostnames': 'boolean',
      'enableDnsSupport': 'boolean',
      'defaultInstanceTenancy': 'DefaultInstanceTenancy',
      'vpcName': '*'
    },
    'VPCCidrBlock': {
      'vpcId': '*',
      'amazonProvidedIpv6CidrBlock': 'boolean',
      'cidrBlock': '*',
      'cidrBlockName': '*',
      'ipv6NetmaskLength': '*',
      'ipv4NetmaskLength': '*',
      'ipv6IpamPoolId': '*',
      'ipv4IpamPoolId': '*',
      'ipv4IpamProvisionedCidrs': '*',
      'ipv6CidrBlock': '*',
      'ipv6Pool': '*'
    }
  },
  '@aws-cdk.aws-gamelift-alpha': {
    'Alias': {
      'aliasName': '*',
      'description': '*',
      'fleet': {
        'fleetId': '*',
        'fleetArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*'
        },
        'resourceArnForDestination': '*'
      },
      'terminalMessage': '*'
    },
    'BuildFleet': {
      'content': {
        'buildId': '*',
        'buildArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*'
        }
      },
      'ingressRules': {
        'port': '*',
        'source': {
          'uniqueId': '*'
        }
      },
      'fleetName': '*',
      'description': '*',
      'useSpot': 'boolean',
      'useCertificate': 'boolean',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'peerVpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'metricGroup': '*',
      'instanceType': '*',
      'desiredCapacity': '*',
      'minSize': '*',
      'maxSize': '*',
      'protectNewGameSession': 'boolean',
      'runtimeConfiguration': {
        'gameSessionActivationTimeout': '*',
        'maxConcurrentGameSessionActivations': '*',
        'serverProcesses': {
          'concurrentExecutions': '*',
          'launchPath': '*',
          'parameters': '*'
        }
      },
      'locations': {
        'region': '*',
        'capacity': {
          'desiredCapacity': '*',
          'maxSize': '*',
          'minSize': '*'
        }
      },
      'resourceCreationLimitPolicy': {
        'newGameSessionsPerCreator': '*',
        'policyPeriod': '*'
      },
      'addIngressRule': [
        {
          'uniqueId': '*'
        },
        '*'
      ]
    },
    'Build': {
      'buildName': '*',
      'buildVersion': '*',
      'operatingSystem': 'OperatingSystem',
      'content': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'serverSdkVersion': '*'
    },
    'GameServerGroup': {
      'gameServerGroupName': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'minSize': '*',
      'maxSize': '*',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'instanceDefinitions': {
        'instanceType': '*',
        'weight': '*'
      },
      'launchTemplate': {
        'versionNumber': '*',
        'launchTemplateId': '*',
        'launchTemplateName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'protectGameServer': 'boolean',
      'autoScalingPolicy': {
        'estimatedInstanceWarmup': '*',
        'targetTrackingConfiguration': '*'
      },
      'deleteOption': 'DeleteOption',
      'balancingStrategy': 'BalancingStrategy'
    },
    'GameSessionQueue': {
      'gameSessionQueueName': '*',
      'customEventData': '*',
      'allowedLocations': '*',
      'notificationTarget': {
        'topicArn': '*',
        'topicName': '*',
        'contentBasedDeduplication': 'boolean',
        'fifo': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'playerLatencyPolicies': {
        'maximumIndividualPlayerLatency': '*'
      },
      'priorityConfiguration': {
        'locationOrder': '*',
        'priorityOrder': 'PriorityType'
      },
      'timeout': '*',
      'destinations': {
        'resourceArnForDestination': '*'
      },
      'addDestination': [
        {
          'resourceArnForDestination': '*'
        }
      ]
    },
    'MatchmakingRuleSet': {
      'matchmakingRuleSetName': '*',
      'content': '*'
    },
    'QueuedMatchmakingConfiguration': {
      'additionalPlayerCount': '*',
      'manualBackfillMode': 'boolean',
      'gameProperties': {
        'key': '*',
        'value': '*'
      },
      'gameSessionData': '*',
      'gameSessionQueues': {
        'gameSessionQueueName': '*',
        'gameSessionQueueArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'matchmakingConfigurationName': '*',
      'description': '*',
      'requireAcceptance': 'boolean',
      'acceptanceTimeout': '*',
      'customEventData': '*',
      'notificationTarget': {
        'topicArn': '*',
        'topicName': '*',
        'contentBasedDeduplication': 'boolean',
        'fifo': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'requestTimeout': '*',
      'ruleSet': {
        'matchmakingRuleSetName': '*',
        'matchmakingRuleSetArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'addGameSessionQueue': [
        {
          'gameSessionQueueName': '*',
          'gameSessionQueueArn': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      ]
    },
    'Script': {
      'scriptName': '*',
      'scriptVersion': '*',
      'content': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      }
    },
    'StandaloneMatchmakingConfiguration': {
      'matchmakingConfigurationName': '*',
      'description': '*',
      'requireAcceptance': 'boolean',
      'acceptanceTimeout': '*',
      'customEventData': '*',
      'notificationTarget': {
        'topicArn': '*',
        'topicName': '*',
        'contentBasedDeduplication': 'boolean',
        'fifo': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'requestTimeout': '*',
      'ruleSet': {
        'matchmakingRuleSetName': '*',
        'matchmakingRuleSetArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      }
    }
  },
  '@aws-cdk.aws-glue-alpha': {
    'Connection': {
      'type': '*',
      'connectionName': '*',
      'description': '*',
      'properties': '*',
      'matchCriteria': '*',
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'subnet': {
        'availabilityZone': '*',
        'subnetId': '*',
        'internetConnectivityEstablished': '*',
        'ipv4CidrBlock': '*',
        'routeTable': {
          'routeTableId': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'addProperty': [
        '*',
        '*'
      ]
    },
    'DataQualityRuleset': {
      'rulesetName': '*',
      'clientToken': '*',
      'description': '*',
      'rulesetDqdl': '*',
      'tags': '*',
      'targetTable': '*'
    },
    'Database': {
      'databaseName': '*',
      'locationUri': '*',
      'description': '*'
    },
    'ExternalTable': {
      'connection': {
        'connectionName': '*',
        'connectionArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'externalDataLocation': '*',
      'tableName': '*',
      'description': '*',
      'database': {
        'catalogArn': '*',
        'catalogId': '*',
        'databaseArn': '*',
        'databaseName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'columns': {
        'name': '*',
        'type': {
          'isPrimitive': 'boolean',
          'inputString': '*'
        },
        'comment': '*'
      },
      'partitionKeys': {
        'name': '*',
        'type': {
          'isPrimitive': 'boolean',
          'inputString': '*'
        },
        'comment': '*'
      },
      'partitionIndexes': {
        'indexName': '*',
        'keyNames': '*'
      },
      'dataFormat': '*',
      'compressed': 'boolean',
      'storedAsSubDirectories': 'boolean',
      'enablePartitionFiltering': 'boolean',
      'storageParameters': '*',
      'parameters': '*',
      'grantRead': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        }
      ],
      'grantWrite': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        }
      ],
      'grantReadWrite': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        }
      ]
    },
    'S3Table': {
      'bucket': {
        'bucketArn': '*',
        'bucketName': '*',
        'bucketWebsiteUrl': '*',
        'bucketWebsiteDomainName': '*',
        'bucketDomainName': '*',
        'bucketDualStackDomainName': '*',
        'bucketRegionalDomainName': '*',
        'isWebsite': 'boolean',
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'policy': '*',
        'replicationRoleArn': '*'
      },
      's3Prefix': '*',
      'encryption': 'TableEncryption',
      'encryptionKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'tableName': '*',
      'description': '*',
      'database': {
        'catalogArn': '*',
        'catalogId': '*',
        'databaseArn': '*',
        'databaseName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'columns': {
        'name': '*',
        'type': {
          'isPrimitive': 'boolean',
          'inputString': '*'
        },
        'comment': '*'
      },
      'partitionKeys': {
        'name': '*',
        'type': {
          'isPrimitive': 'boolean',
          'inputString': '*'
        },
        'comment': '*'
      },
      'partitionIndexes': {
        'indexName': '*',
        'keyNames': '*'
      },
      'dataFormat': '*',
      'compressed': 'boolean',
      'storedAsSubDirectories': 'boolean',
      'enablePartitionFiltering': 'boolean',
      'storageParameters': '*',
      'parameters': '*',
      'grantRead': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        }
      ],
      'grantWrite': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        }
      ],
      'grantReadWrite': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        }
      ]
    },
    'SecurityConfiguration': {
      'securityConfigurationName': '*',
      'cloudWatchEncryption': {
        'mode': 'CloudWatchEncryptionMode',
        'kmsKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'jobBookmarksEncryption': {
        'mode': 'JobBookmarksEncryptionMode',
        'kmsKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      's3Encryption': {
        'mode': 'S3EncryptionMode',
        'kmsKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      }
    },
    'Table': {}
  },
  '@aws-cdk.aws-iot-alpha': {
    'AccountAuditConfiguration': {},
    'Logging': {},
    'ScheduledAudit': {
      'auditChecks': 'AuditCheck',
      'accountAuditConfiguration': {
        'accountId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'dayOfWeek': 'DayOfWeek',
      'dayOfMonth': '*',
      'frequency': 'Frequency',
      'scheduledAuditName': '*'
    },
    'TopicRule': {
      'topicRuleName': '*',
      'actions': '*',
      'description': '*',
      'errorAction': '*',
      'enabled': 'boolean',
      'sql': '*',
      'addAction': [
        '*'
      ]
    }
  },
  '@aws-cdk.aws-iotevents-alpha': {
    'DetectorModel': {
      'detectorModelName': '*',
      'description': '*',
      'evaluationMethod': 'EventEvaluation',
      'detectorKey': '*',
      'initialState': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      }
    },
    'Input': {
      'inputName': '*',
      'attributeJsonPaths': '*'
    }
  },
  '@aws-cdk.aws-ivs-alpha': {
    'Channel': {
      'authorized': 'boolean',
      'insecureIngest': 'boolean',
      'latencyMode': 'LatencyMode',
      'channelName': '*',
      'type': 'ChannelType',
      'preset': 'Preset',
      'recordingConfiguration': {
        'recordingConfigurationId': '*',
        'recordingConfigurationArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      }
    },
    'PlaybackKeyPair': {
      'publicKeyMaterial': '*',
      'playbackKeyPairName': '*'
    },
    'RecordingConfiguration': {
      'bucket': {
        'bucketArn': '*',
        'bucketName': '*',
        'bucketWebsiteUrl': '*',
        'bucketWebsiteDomainName': '*',
        'bucketDomainName': '*',
        'bucketDualStackDomainName': '*',
        'bucketRegionalDomainName': '*',
        'isWebsite': 'boolean',
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'policy': '*',
        'replicationRoleArn': '*'
      },
      'recordingConfigurationName': '*',
      'recordingReconnectWindow': '*',
      'renditionConfiguration': '*',
      'thumbnailConfiguration': '*'
    },
    'StreamKey': {
      'channel': {
        'channelArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      }
    }
  },
  '@aws-cdk.aws-kinesisanalytics-flink-alpha': {
    'Import': {
      'applicationArn': '*',
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      }
    },
    'Application': {
      'applicationName': '*',
      'runtime': '*',
      'code': '*',
      'checkpointingEnabled': 'boolean',
      'checkpointInterval': '*',
      'minPauseBetweenCheckpoints': '*',
      'logLevel': 'LogLevel',
      'metricsLevel': 'MetricsLevel',
      'autoScalingEnabled': 'boolean',
      'parallelism': '*',
      'parallelismPerKpu': '*',
      'snapshotsEnabled': 'boolean',
      'propertyGroups': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'removalPolicy': 'RemovalPolicy',
      'logGroup': {
        'logGroupArn': '*',
        'logGroupName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      }
    }
  },
  '@aws-cdk.aws-kinesisfirehose-alpha': {
    'DeliveryStream': {
      'destination': '*',
      'deliveryStreamName': '*',
      'source': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'encryption': '*'
    }
  },
  '@aws-cdk.aws-lambda-go-alpha': {
    'GoFunction': {
      'entry': '*',
      'runtime': '*',
      'moduleDir': '*',
      'bundling': {
        'forcedDockerBundling': 'boolean',
        'dockerImage': '*',
        'goBuildFlags': '*',
        'buildArgs': '*',
        'assetHashType': 'AssetHashType',
        'assetHash': '*',
        'commandHooks': '*',
        'cgoEnabled': 'boolean',
        'goProxies': '*',
        'bundlingFileAccess': 'BundlingFileAccess',
        'entrypoint': '*',
        'command': '*',
        'volumes': {
          'hostPath': '*',
          'containerPath': '*',
          'consistency': 'DockerVolumeConsistency'
        },
        'volumesFrom': '*',
        'environment': '*',
        'workingDirectory': '*',
        'user': '*',
        'securityOpt': '*',
        'network': '*',
        'platform': '*'
      },
      'description': '*',
      'timeout': '*',
      'environment': '*',
      'functionName': '*',
      'memorySize': '*',
      'ephemeralStorageSize': '*',
      'initialPolicy': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'ipv6AllowedForDualStack': 'boolean',
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'securityGroup': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'allowAllOutbound': 'boolean',
      'allowAllIpv6Outbound': 'boolean',
      'deadLetterQueueEnabled': 'boolean',
      'deadLetterQueue': {
        'queueArn': '*',
        'queueUrl': '*',
        'queueName': '*',
        'encryptionMasterKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'fifo': 'boolean',
        'encryptionType': 'QueueEncryption'
      },
      'deadLetterTopic': {
        'topicArn': '*',
        'topicName': '*',
        'contentBasedDeduplication': 'boolean',
        'fifo': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'tracing': 'Tracing',
      'snapStart': '*',
      'profiling': 'boolean',
      'profilingGroup': {
        'profilingGroupName': '*',
        'profilingGroupArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'insightsVersion': '*',
      'adotInstrumentation': {
        'layerVersion': '*',
        'execWrapper': 'AdotLambdaExecWrapper'
      },
      'paramsAndSecrets': '*',
      'layers': {
        'layerVersionArn': '*',
        'compatibleRuntimes': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'reservedConcurrentExecutions': '*',
      'events': '*',
      'logRetention': 'RetentionDays',
      'logRetentionRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'logRetentionRetryOptions': {
        'maxRetries': '*',
        'base': '*'
      },
      'currentVersionOptions': {
        'codeSha256': '*',
        'description': '*',
        'provisionedConcurrentExecutions': '*',
        'removalPolicy': 'RemovalPolicy',
        'onFailure': '*',
        'maxEventAge': '*',
        'retryAttempts': '*'
      },
      'filesystem': '*',
      'allowPublicSubnet': 'boolean',
      'environmentEncryption': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'codeSigningConfig': {
        'codeSigningConfigArn': '*',
        'codeSigningConfigId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'architectures': '*',
      'architecture': '*',
      'runtimeManagementMode': '*',
      'logGroup': {
        'logGroupArn': '*',
        'logGroupName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'logFormat': '*',
      'loggingFormat': 'LoggingFormat',
      'recursiveLoop': 'RecursiveLoop',
      'applicationLogLevel': '*',
      'applicationLogLevelV2': 'ApplicationLogLevel',
      'systemLogLevel': '*',
      'systemLogLevelV2': 'SystemLogLevel',
      'onFailure': '*',
      'onSuccess': '*',
      'maxEventAge': '*',
      'retryAttempts': '*'
    }
  },
  '@aws-cdk.aws-lambda-python-alpha': {
    'PythonFunction': {
      'entry': '*',
      'runtime': '*',
      'index': '*',
      'handler': '*',
      'bundling': {
        'poetryIncludeHashes': 'boolean',
        'poetryWithoutUrls': 'boolean',
        'assetExcludes': '*',
        'outputPathSuffix': '*',
        'image': '*',
        'buildArgs': '*',
        'assetHashType': 'AssetHashType',
        'assetHash': '*',
        'commandHooks': '*',
        'bundlingFileAccess': 'BundlingFileAccess',
        'entrypoint': '*',
        'command': '*',
        'volumes': {
          'hostPath': '*',
          'containerPath': '*',
          'consistency': 'DockerVolumeConsistency'
        },
        'volumesFrom': '*',
        'environment': '*',
        'workingDirectory': '*',
        'user': '*',
        'securityOpt': '*',
        'network': '*',
        'platform': '*'
      },
      'description': '*',
      'timeout': '*',
      'environment': '*',
      'functionName': '*',
      'memorySize': '*',
      'ephemeralStorageSize': '*',
      'initialPolicy': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'ipv6AllowedForDualStack': 'boolean',
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'securityGroup': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'allowAllOutbound': 'boolean',
      'allowAllIpv6Outbound': 'boolean',
      'deadLetterQueueEnabled': 'boolean',
      'deadLetterQueue': {
        'queueArn': '*',
        'queueUrl': '*',
        'queueName': '*',
        'encryptionMasterKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'fifo': 'boolean',
        'encryptionType': 'QueueEncryption'
      },
      'deadLetterTopic': {
        'topicArn': '*',
        'topicName': '*',
        'contentBasedDeduplication': 'boolean',
        'fifo': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'tracing': 'Tracing',
      'snapStart': '*',
      'profiling': 'boolean',
      'profilingGroup': {
        'profilingGroupName': '*',
        'profilingGroupArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'insightsVersion': '*',
      'adotInstrumentation': {
        'layerVersion': '*',
        'execWrapper': 'AdotLambdaExecWrapper'
      },
      'paramsAndSecrets': '*',
      'layers': {
        'layerVersionArn': '*',
        'compatibleRuntimes': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'reservedConcurrentExecutions': '*',
      'events': '*',
      'logRetention': 'RetentionDays',
      'logRetentionRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'logRetentionRetryOptions': {
        'maxRetries': '*',
        'base': '*'
      },
      'currentVersionOptions': {
        'codeSha256': '*',
        'description': '*',
        'provisionedConcurrentExecutions': '*',
        'removalPolicy': 'RemovalPolicy',
        'onFailure': '*',
        'maxEventAge': '*',
        'retryAttempts': '*'
      },
      'filesystem': '*',
      'allowPublicSubnet': 'boolean',
      'environmentEncryption': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'codeSigningConfig': {
        'codeSigningConfigArn': '*',
        'codeSigningConfigId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'architectures': '*',
      'architecture': '*',
      'runtimeManagementMode': '*',
      'logGroup': {
        'logGroupArn': '*',
        'logGroupName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'logFormat': '*',
      'loggingFormat': 'LoggingFormat',
      'recursiveLoop': 'RecursiveLoop',
      'applicationLogLevel': '*',
      'applicationLogLevelV2': 'ApplicationLogLevel',
      'systemLogLevel': '*',
      'systemLogLevelV2': 'SystemLogLevel',
      'onFailure': '*',
      'onSuccess': '*',
      'maxEventAge': '*',
      'retryAttempts': '*'
    },
    'PythonLayerVersion': {
      'entry': '*',
      'compatibleRuntimes': '*',
      'compatibleArchitectures': '*',
      'bundling': {
        'poetryIncludeHashes': 'boolean',
        'poetryWithoutUrls': 'boolean',
        'assetExcludes': '*',
        'outputPathSuffix': '*',
        'image': '*',
        'buildArgs': '*',
        'assetHashType': 'AssetHashType',
        'assetHash': '*',
        'commandHooks': '*',
        'bundlingFileAccess': 'BundlingFileAccess',
        'entrypoint': '*',
        'command': '*',
        'volumes': {
          'hostPath': '*',
          'containerPath': '*',
          'consistency': 'DockerVolumeConsistency'
        },
        'volumesFrom': '*',
        'environment': '*',
        'workingDirectory': '*',
        'user': '*',
        'securityOpt': '*',
        'network': '*',
        'platform': '*'
      },
      'description': '*',
      'license': '*',
      'layerVersionName': '*',
      'removalPolicy': 'RemovalPolicy'
    }
  },
  '@aws-cdk.aws-location-alpha': {
    'GeofenceCollection': {
      'geofenceCollectionName': '*',
      'description': '*',
      'kmsKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'grant': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        },
        '*'
      ],
      'grantRead': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        }
      ]
    },
    'Map': {
      'mapName': '*',
      'description': '*',
      'style': 'Style',
      'customLayers': 'CustomLayer',
      'politicalView': 'PoliticalView',
      'grant': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        },
        '*'
      ],
      'grantRendering': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        }
      ]
    },
    'PlaceIndex': {
      'placeIndexName': '*',
      'dataSource': 'DataSource',
      'intendedUse': 'IntendedUse',
      'description': '*',
      'grant': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        },
        '*'
      ],
      'grantSearch': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        }
      ]
    },
    'RouteCalculator': {
      'routeCalculatorName': '*',
      'dataSource': 'DataSource',
      'description': '*',
      'grant': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        },
        '*'
      ],
      'grantRead': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        }
      ]
    },
    'Tracker': {
      'trackerName': '*',
      'description': '*',
      'eventBridgeEnabled': 'boolean',
      'kmsKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'kmsKeyEnableGeospatialQueries': 'boolean',
      'positionFiltering': 'PositionFiltering',
      'geofenceCollections': {
        'geofenceCollectionName': '*',
        'geofenceCollectionArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'addGeofenceCollections': [
        {
          'geofenceCollectionName': '*',
          'geofenceCollectionArn': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      ],
      'grant': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        },
        '*'
      ],
      'grantUpdateDevicePositions': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        }
      ],
      'grantRead': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        }
      ]
    }
  },
  '@aws-cdk.aws-msk-alpha': {
    'Cluster': {
      'clusterName': '*',
      'kafkaVersion': '*',
      'numberOfBrokerNodes': '*',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'instanceType': '*',
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'ebsStorageInfo': {
        'volumeSize': '*',
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'storageMode': 'StorageMode',
      'configurationInfo': {
        'arn': '*',
        'revision': '*'
      },
      'monitoring': {
        'clusterMonitoringLevel': 'ClusterMonitoringLevel',
        'enablePrometheusJmxExporter': 'boolean',
        'enablePrometheusNodeExporter': 'boolean'
      },
      'logging': {
        'firehoseDeliveryStreamName': '*',
        'cloudwatchLogGroup': {
          'logGroupArn': '*',
          'logGroupName': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        's3': {
          'bucket': {
            'bucketArn': '*',
            'bucketName': '*',
            'bucketWebsiteUrl': '*',
            'bucketWebsiteDomainName': '*',
            'bucketDomainName': '*',
            'bucketDualStackDomainName': '*',
            'bucketRegionalDomainName': '*',
            'isWebsite': 'boolean',
            'encryptionKey': {
              'keyArn': '*',
              'keyId': '*'
            },
            'policy': '*',
            'replicationRoleArn': '*'
          },
          'prefix': '*'
        }
      },
      'encryptionInTransit': {
        'clientBroker': 'ClientBrokerEncryption',
        'enableInCluster': 'boolean'
      },
      'clientAuthentication': '*',
      'removalPolicy': 'RemovalPolicy',
      'addUser': [
        '*'
      ]
    },
    'ServerlessCluster': {
      'clusterName': '*',
      'vpcConfigs': {
        'vpc': {
          'vpcId': '*',
          'vpcArn': '*',
          'vpcCidrBlock': '*',
          'publicSubnets': {
            'availabilityZone': '*',
            'subnetId': '*',
            'internetConnectivityEstablished': '*',
            'ipv4CidrBlock': '*',
            'routeTable': {
              'routeTableId': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'availabilityZones': '*',
          'vpnGatewayId': '*'
        },
        'vpcSubnets': {
          'subnetType': 'SubnetType',
          'availabilityZones': '*',
          'subnetGroupName': '*',
          'subnetName': '*',
          'onePerAz': 'boolean',
          'subnetFilters': '*'
        },
        'securityGroups': {
          'securityGroupId': '*',
          'allowAllOutbound': 'boolean',
          'canInlineRule': 'boolean',
          'uniqueId': '*',
          'connections': '*'
        }
      }
    }
  },
  '@aws-cdk.aws-neptune-alpha': {
    'DatabaseCluster': {
      'engineVersion': '*',
      'backupRetention': '*',
      'preferredBackupWindow': '*',
      'kmsKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'storageEncrypted': 'boolean',
      'instances': '*',
      'dbClusterName': '*',
      'iamAuthentication': 'boolean',
      'instanceIdentifierBase': '*',
      'instanceType': '*',
      'associatedRoles': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'deletionProtection': 'boolean',
      'preferredMaintenanceWindow': '*',
      'clusterParameterGroup': {
        'clusterParameterGroupName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'parameterGroup': {
        'parameterGroupName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'subnetGroup': {
        'subnetGroupName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'removalPolicy': 'RemovalPolicy',
      'autoMinorVersionUpgrade': 'boolean',
      'cloudwatchLogsExports': '*',
      'cloudwatchLogsRetention': 'RetentionDays',
      'cloudwatchLogsRetentionRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'serverlessScalingConfiguration': {
        'minCapacity': '*',
        'maxCapacity': '*'
      },
      'copyTagsToSnapshot': 'boolean',
      'port': '*'
    },
    'DatabaseInstance': {
      'cluster': {
        'clusterIdentifier': '*',
        'clusterResourceIdentifier': '*',
        'clusterEndpoint': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'connections': '*'
      },
      'instanceType': '*',
      'availabilityZone': '*',
      'dbInstanceName': '*',
      'parameterGroup': {
        'parameterGroupName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'removalPolicy': 'RemovalPolicy',
      'autoMinorVersionUpgrade': 'boolean'
    },
    'ClusterParameterGroup': {
      'clusterParameterGroupName': '*',
      'description': '*',
      'parameters': '*',
      'family': '*'
    },
    'ParameterGroup': {
      'parameterGroupName': '*',
      'description': '*',
      'parameters': '*',
      'family': '*'
    },
    'SubnetGroup': {
      'description': '*',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'subnetGroupName': '*',
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'removalPolicy': 'RemovalPolicy'
    }
  },
  '@aws-cdk.aws-pipes-alpha': {
    'ImportedPipe': {},
    'Pipe': {
      'source': {
        'sourceArn': '*'
      },
      'filter': {
        'filters': {
          'pattern': '*'
        }
      },
      'enrichment': {
        'enrichmentArn': '*'
      },
      'target': {
        'targetArn': '*'
      },
      'pipeName': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'logDestinations': '*',
      'logLevel': 'LogLevel',
      'logIncludeExecutionData': 'IncludeExecutionData',
      'description': '*',
      'desiredState': 'DesiredState',
      'tags': '*'
    }
  },
  '@aws-cdk.aws-redshift-alpha': {
    'Cluster': {
      'clusterName': '*',
      'parameterGroup': {
        'clusterParameterGroupName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'numberOfNodes': '*',
      'nodeType': 'NodeType',
      'clusterType': 'ClusterType',
      'port': '*',
      'encrypted': 'boolean',
      'encryptionKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'preferredMaintenanceWindow': '*',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'subnetGroup': {
        'clusterSubnetGroupName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'masterUser': {
        'masterUsername': '*',
        'masterPassword': '*',
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'excludeCharacters': '*'
      },
      'roles': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'defaultRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'defaultDatabaseName': '*',
      'loggingProperties': {
        'loggingBucket': {
          'bucketArn': '*',
          'bucketName': '*',
          'bucketWebsiteUrl': '*',
          'bucketWebsiteDomainName': '*',
          'bucketDomainName': '*',
          'bucketDualStackDomainName': '*',
          'bucketRegionalDomainName': '*',
          'isWebsite': 'boolean',
          'encryptionKey': {
            'keyArn': '*',
            'keyId': '*',
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'policy': '*',
          'replicationRoleArn': '*'
        },
        'loggingKeyPrefix': '*'
      },
      'removalPolicy': 'RemovalPolicy',
      'publiclyAccessible': 'boolean',
      'classicResizing': 'boolean',
      'elasticIp': '*',
      'rebootForParameterChanges': 'boolean',
      'enhancedVpcRouting': 'boolean',
      'multiAz': 'boolean',
      'resourceAction': 'ResourceAction',
      'availabilityZoneRelocation': 'boolean',
      'addRotationSingleUser': [
        '*'
      ],
      'addRotationMultiUser': [
        '*',
        {
          'secret': {
            'encryptionKey': {
              'keyArn': '*',
              'keyId': '*',
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'secretArn': '*',
            'secretFullArn': '*',
            'secretName': '*',
            'secretValue': '*'
          },
          'automaticallyAfter': '*'
        }
      ],
      'addToParameterGroup': [
        '*',
        '*'
      ],
      'enableRebootForParameterChanges': [],
      'addDefaultIamRole': [
        {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      ],
      'addIamRole': [
        {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      ]
    },
    'DatabaseSecret': {
      'username': '*',
      'encryptionKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'excludeCharacters': '*'
    },
    'ClusterParameterGroup': {
      'description': '*',
      'parameters': '*',
      'addParameter': [
        '*',
        '*'
      ]
    },
    'ClusterSubnetGroup': {
      'description': '*',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'removalPolicy': 'RemovalPolicy'
    }
  },
  '@aws-cdk.aws-route53resolver-alpha': {
    'FirewallDomainList': {
      'name': '*',
      'domains': '*'
    },
    'FirewallRuleGroupAssociation': {
      'firewallRuleGroup': {
        'firewallRuleGroupId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'mutationProtection': 'boolean',
      'name': '*',
      'priority': '*',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      }
    },
    'FirewallRuleGroup': {
      'name': '*',
      'rules': {
        'action': '*',
        'firewallDomainList': {
          'firewallDomainListId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'priority': '*'
      },
      'addRule': [
        {
          'action': '*',
          'firewallDomainList': {
            'firewallDomainListId': '*',
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'priority': '*'
        }
      ],
      'associate': [
        '*',
        {
          'mutationProtection': 'boolean',
          'name': '*',
          'priority': '*',
          'vpc': {
            'vpcId': '*',
            'vpcArn': '*',
            'vpcCidrBlock': '*',
            'publicSubnets': {
              'availabilityZone': '*',
              'subnetId': '*',
              'internetConnectivityEstablished': '*',
              'ipv4CidrBlock': '*',
              'routeTable': {
                'routeTableId': '*'
              },
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'availabilityZones': '*',
            'vpnGatewayId': '*'
          }
        }
      ]
    }
  },
  '@aws-cdk.aws-s3objectlambda-alpha': {
    'AccessPoint': {
      'bucket': {
        'bucketArn': '*',
        'bucketName': '*',
        'bucketWebsiteUrl': '*',
        'bucketWebsiteDomainName': '*',
        'bucketDomainName': '*',
        'bucketDualStackDomainName': '*',
        'bucketRegionalDomainName': '*',
        'isWebsite': 'boolean',
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'policy': '*',
        'replicationRoleArn': '*'
      },
      'handler': {
        'functionName': '*',
        'functionArn': '*',
        'role': {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'isBoundToVpc': 'boolean',
        'latestVersion': {
          'version': '*',
          'edgeArn': '*',
          'functionName': '*',
          'functionArn': '*',
          'isBoundToVpc': 'boolean',
          'architecture': '*',
          'resourceArnsForGrantInvoke': '*',
          'connections': '*'
        },
        'resourceArnsForGrantInvoke': '*'
      },
      'accessPointName': '*',
      'cloudWatchMetricsEnabled': 'boolean',
      'supportsGetObjectRange': 'boolean',
      'supportsGetObjectPartNumber': 'boolean',
      'payload': '*'
    }
  },
  '@aws-cdk.aws-sagemaker-alpha': {
    'EndpointConfig': {
      'endpointConfigName': '*',
      'encryptionKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'instanceProductionVariants': {
        'acceleratorType': '*',
        'initialInstanceCount': '*',
        'instanceType': '*',
        'initialVariantWeight': '*',
        'model': {
          'modelArn': '*',
          'modelName': '*',
          'role': {
            'roleArn': '*',
            'roleName': '*',
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*',
            'grantPrincipal': {
              'assumeRoleAction': '*',
              'principalAccount': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'connections': '*'
        },
        'variantName': '*'
      },
      'addInstanceProductionVariant': [
        {
          'acceleratorType': '*',
          'initialInstanceCount': '*',
          'instanceType': '*',
          'initialVariantWeight': '*',
          'model': {
            'modelArn': '*',
            'modelName': '*',
            'role': {
              'roleArn': '*',
              'roleName': '*',
              'assumeRoleAction': '*',
              'policyFragment': '*',
              'principalAccount': '*',
              'grantPrincipal': {
                'assumeRoleAction': '*',
                'principalAccount': '*'
              },
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'connections': '*'
          },
          'variantName': '*'
        }
      ],
      '_findInstanceProductionVariant': [
        '*'
      ]
    },
    'Endpoint': {
      'endpointName': '*',
      'endpointConfig': {
        'endpointConfigArn': '*',
        'endpointConfigName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'findInstanceProductionVariant': [
        '*'
      ]
    },
    'Model': {
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'modelName': '*',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'containers': {
        'image': '*',
        'environment': '*',
        'containerHostname': '*',
        'modelData': '*'
      },
      'allowAllOutbound': 'boolean',
      'networkIsolation': 'boolean',
      'addContainer': [
        {
          'image': '*',
          'environment': '*',
          'containerHostname': '*',
          'modelData': '*'
        }
      ]
    }
  },
  '@aws-cdk.aws-scheduler-alpha': {
    'Group': {
      'groupName': '*',
      'removalPolicy': 'RemovalPolicy'
    },
    'Schedule': {
      'schedule': '*',
      'target': '*',
      'scheduleName': '*',
      'description': '*',
      'group': {
        'groupName': '*',
        'groupArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'enabled': 'boolean',
      'key': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'timeWindow': '*',
      'start': '*',
      'end': '*'
    }
  },
  '@aws-cdk.aws-servicecatalogappregistry-alpha': {
    'Application': {
      'applicationName': '*',
      'description': '*'
    },
    'AttributeGroup': {
      'attributeGroupName': '*',
      'description': '*',
      'attributes': '*'
    }
  },
  '@aws-cdk.example-construct-library': {
    'ExampleResource': {
      'waitConditionHandleName': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'bucket': {
        'bucketArn': '*',
        'bucketName': '*',
        'bucketWebsiteUrl': '*',
        'bucketWebsiteDomainName': '*',
        'bucketDomainName': '*',
        'bucketDualStackDomainName': '*',
        'bucketRegionalDomainName': '*',
        'isWebsite': 'boolean',
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'policy': '*',
        'replicationRoleArn': '*'
      },
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'removalPolicy': 'RemovalPolicy'
    }
  },
  '@aws-cdk.aws-eks-v2-alpha': {
    'AccessEntry': {
      'accessEntryName': '*',
      'accessEntryType': 'AccessEntryType',
      'cluster': {
        'vpc': {
          'vpcId': '*',
          'vpcArn': '*',
          'vpcCidrBlock': '*',
          'publicSubnets': {
            'availabilityZone': '*',
            'subnetId': '*',
            'internetConnectivityEstablished': '*',
            'ipv4CidrBlock': '*',
            'routeTable': {
              'routeTableId': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'availabilityZones': '*',
          'vpnGatewayId': '*'
        },
        'clusterName': '*',
        'clusterArn': '*',
        'clusterEndpoint': '*',
        'clusterCertificateAuthorityData': '*',
        'clusterSecurityGroupId': '*',
        'clusterSecurityGroup': {
          'securityGroupId': '*',
          'allowAllOutbound': 'boolean',
          'canInlineRule': 'boolean',
          'uniqueId': '*',
          'connections': '*'
        },
        'clusterEncryptionConfigKeyArn': '*',
        'openIdConnectProvider': {
          'openIdConnectProviderArn': '*',
          'openIdConnectProviderIssuer': '*'
        },
        'eksPodIdentityAgent': {
          'addonName': '*',
          'addonArn': '*'
        },
        'ipFamily': 'IpFamily',
        'kubectlProviderOptions': {
          'role': {
            'roleArn': '*',
            'roleName': '*',
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*',
            'grantPrincipal': {
              'assumeRoleAction': '*',
              'principalAccount': '*'
            }
          },
          'awscliLayer': {
            'layerVersionArn': '*',
            'compatibleRuntimes': '*'
          },
          'environment': '*',
          'memory': '*'
        },
        'kubectlProvider': {
          'serviceToken': '*'
        },
        'prune': 'boolean'
      },
      'accessPolicies': {
        'accessScope': {
          'namespaces': '*',
          'type': 'AccessScopeType'
        },
        'policy': '*'
      },
      'principal': '*',
      'addAccessPolicies': [
        {
          'accessScope': {
            'namespaces': '*',
            'type': 'AccessScopeType'
          },
          'policy': '*'
        }
      ]
    },
    'Addon': {
      'addonName': '*',
      'addonVersion': '*',
      'cluster': {
        'vpc': {
          'vpcId': '*',
          'vpcArn': '*',
          'vpcCidrBlock': '*',
          'publicSubnets': {
            'availabilityZone': '*',
            'subnetId': '*',
            'internetConnectivityEstablished': '*',
            'ipv4CidrBlock': '*',
            'routeTable': {
              'routeTableId': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'availabilityZones': '*',
          'vpnGatewayId': '*'
        },
        'clusterName': '*',
        'clusterArn': '*',
        'clusterEndpoint': '*',
        'clusterCertificateAuthorityData': '*',
        'clusterSecurityGroupId': '*',
        'clusterSecurityGroup': {
          'securityGroupId': '*',
          'allowAllOutbound': 'boolean',
          'canInlineRule': 'boolean',
          'uniqueId': '*',
          'connections': '*'
        },
        'clusterEncryptionConfigKeyArn': '*',
        'openIdConnectProvider': {
          'openIdConnectProviderArn': '*',
          'openIdConnectProviderIssuer': '*'
        },
        'eksPodIdentityAgent': {
          'addonName': '*',
          'addonArn': '*'
        },
        'ipFamily': 'IpFamily',
        'kubectlProviderOptions': {
          'role': {
            'roleArn': '*',
            'roleName': '*',
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*',
            'grantPrincipal': {
              'assumeRoleAction': '*',
              'principalAccount': '*'
            }
          },
          'awscliLayer': {
            'layerVersionArn': '*',
            'compatibleRuntimes': '*'
          },
          'environment': '*',
          'memory': '*'
        },
        'kubectlProvider': {
          'serviceToken': '*'
        },
        'prune': 'boolean'
      },
      'preserveOnDelete': 'boolean'
    },
    'Cluster': {
      'defaultCapacity': '*',
      'defaultCapacityInstance': '*',
      'defaultCapacityType': 'DefaultCapacityType',
      'bootstrapClusterCreatorAdminPermissions': 'boolean',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'clusterName': '*',
      'securityGroup': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'version': '*',
      'mastersRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'coreDnsComputeType': 'CoreDnsComputeType',
      'endpointAccess': '*',
      'prune': 'boolean',
      'secretsEncryptionKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'ipFamily': 'IpFamily',
      'serviceIpv4Cidr': '*',
      'albController': {
        'version': '*',
        'repository': '*',
        'policy': '*'
      },
      'clusterLogging': 'ClusterLoggingTypes',
      'tags': '*',
      'kubectlProviderOptions': {
        'role': {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'awscliLayer': {
          'layerVersionArn': '*',
          'compatibleRuntimes': '*'
        },
        'environment': '*',
        'securityGroup': {
          'securityGroupId': '*',
          'allowAllOutbound': 'boolean',
          'canInlineRule': 'boolean',
          'uniqueId': '*',
          'connections': '*'
        },
        'memory': '*',
        'privateSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          }
        }
      },
      'grantAccess': [
        '*',
        '*',
        {
          'accessScope': {
            'namespaces': '*',
            'type': 'AccessScopeType'
          },
          'policy': '*'
        }
      ],
      'getServiceLoadBalancerAddress': [
        '*',
        {
          'timeout': '*',
          'namespace': '*'
        }
      ],
      'getIngressLoadBalancerAddress': [
        '*',
        {
          'timeout': '*',
          'namespace': '*'
        }
      ],
      'addAutoScalingGroupCapacity': [
        '*',
        {
          'instanceType': '*',
          'bootstrapEnabled': 'boolean',
          'bootstrapOptions': {
            'useMaxPods': 'boolean',
            'enableDockerBridge': 'boolean',
            'awsApiRetryAttempts': '*',
            'dockerConfigJson': '*',
            'dnsClusterIp': '*',
            'kubeletExtraArgs': '*',
            'additionalArgs': '*'
          },
          'machineImageType': 'MachineImageType',
          'minCapacity': '*',
          'maxCapacity': '*',
          'desiredCapacity': '*',
          'keyName': '*',
          'keyPair': {
            'keyPairName': '*',
            'type': 'KeyPairType',
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'vpcSubnets': {
            'subnetType': 'SubnetType',
            'availabilityZones': '*',
            'subnetGroupName': '*',
            'subnetName': '*',
            'onePerAz': 'boolean',
            'subnetFilters': '*',
            'subnets': {
              'availabilityZone': '*',
              'subnetId': '*',
              'internetConnectivityEstablished': '*',
              'ipv4CidrBlock': '*',
              'routeTable': {
                'routeTableId': '*'
              }
            }
          },
          'notificationsTopic': {
            'topicArn': '*',
            'topicName': '*',
            'contentBasedDeduplication': 'boolean',
            'fifo': 'boolean'
          },
          'notifications': {
            'scalingEvents': '*'
          },
          'allowAllOutbound': 'boolean',
          'updateType': 'UpdateType',
          'rollingUpdateConfiguration': {
            'maxBatchSize': '*',
            'minInstancesInService': '*',
            'minSuccessfulInstancesPercent': '*',
            'pauseTime': '*',
            'waitOnResourceSignals': 'boolean',
            'suspendProcesses': 'ScalingProcess'
          },
          'replacingUpdateMinSuccessfulInstancesPercent': '*',
          'ignoreUnmodifiedSizeProperties': 'boolean',
          'resourceSignalCount': '*',
          'associatePublicIpAddress': 'boolean',
          'spotPrice': '*',
          'healthCheck': '*',
          'blockDevices': {
            'deviceName': '*',
            'volume': '*',
            'mappingEnabled': 'boolean'
          },
          'instanceMonitoring': 'Monitoring',
          'groupMetrics': '*',
          'signals': '*',
          'updatePolicy': '*',
          'newInstancesProtectedFromScaleIn': 'boolean',
          'autoScalingGroupName': '*',
          'terminationPolicies': 'TerminationPolicy',
          'terminationPolicyCustomLambdaFunctionArn': '*',
          'capacityRebalance': 'boolean',
          'ssmSessionPermissions': 'boolean',
          'azCapacityDistributionStrategy': 'CapacityDistributionStrategy'
        }
      ],
      'addNodegroupCapacity': [
        '*',
        {
          'nodegroupName': '*',
          'subnets': {
            'subnetType': 'SubnetType',
            'availabilityZones': '*',
            'subnetGroupName': '*',
            'subnetName': '*',
            'onePerAz': 'boolean',
            'subnetFilters': '*',
            'subnets': {
              'availabilityZone': '*',
              'subnetId': '*',
              'internetConnectivityEstablished': '*',
              'ipv4CidrBlock': '*',
              'routeTable': {
                'routeTableId': '*'
              },
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            }
          },
          'amiType': 'NodegroupAmiType',
          'diskSize': '*',
          'desiredSize': '*',
          'maxSize': '*',
          'minSize': '*',
          'forceUpdate': 'boolean',
          'instanceType': '*',
          'labels': '*',
          'taints': {
            'effect': 'TaintEffect',
            'key': '*',
            'value': '*'
          },
          'nodeRole': {
            'roleArn': '*',
            'roleName': '*',
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*',
            'grantPrincipal': {
              'assumeRoleAction': '*',
              'principalAccount': '*'
            }
          },
          'releaseVersion': '*',
          'remoteAccess': {
            'sshKeyName': '*',
            'sourceSecurityGroups': {
              'securityGroupId': '*',
              'allowAllOutbound': 'boolean',
              'canInlineRule': 'boolean',
              'uniqueId': '*',
              'connections': '*'
            }
          },
          'tags': '*',
          'launchTemplateSpec': {
            'id': '*',
            'version': '*'
          },
          'capacityType': 'CapacityType',
          'maxUnavailable': '*',
          'maxUnavailablePercentage': '*'
        }
      ],
      'addFargateProfile': [
        '*',
        {
          'fargateProfileName': '*',
          'podExecutionRole': {
            'roleArn': '*',
            'roleName': '*',
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*',
            'grantPrincipal': {
              'assumeRoleAction': '*',
              'principalAccount': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'selectors': {
            'namespace': '*',
            'labels': '*'
          },
          'vpc': {
            'vpcId': '*',
            'vpcArn': '*',
            'vpcCidrBlock': '*',
            'publicSubnets': {
              'availabilityZone': '*',
              'subnetId': '*',
              'internetConnectivityEstablished': '*',
              'ipv4CidrBlock': '*',
              'routeTable': {
                'routeTableId': '*'
              }
            },
            'availabilityZones': '*',
            'vpnGatewayId': '*'
          },
          'subnetSelection': {
            'subnetType': 'SubnetType',
            'availabilityZones': '*',
            'subnetGroupName': '*',
            'subnetName': '*',
            'onePerAz': 'boolean',
            'subnetFilters': '*'
          }
        }
      ],
      '_attachFargateProfile': [
        '*'
      ],
      '_dependOnKubectlBarrier': [
        '*'
      ]
    },
    'ImportedCluster': {
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'clusterName': '*',
      'clusterEndpoint': '*',
      'clusterCertificateAuthorityData': '*',
      'clusterSecurityGroupId': '*',
      'clusterEncryptionConfigKeyArn': '*',
      'ipFamily': 'IpFamily',
      'securityGroupIds': '*',
      'openIdConnectProvider': {
        'openIdConnectProviderArn': '*',
        'openIdConnectProviderIssuer': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'kubectlProvider': {
        'serviceToken': '*',
        'role': {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'kubectlProviderOptions': {
        'role': {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'awscliLayer': {
          'layerVersionArn': '*',
          'compatibleRuntimes': '*'
        },
        'environment': '*',
        'securityGroup': {
          'securityGroupId': '*',
          'allowAllOutbound': 'boolean',
          'canInlineRule': 'boolean',
          'uniqueId': '*',
          'connections': '*'
        },
        'memory': '*',
        'privateSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          }
        }
      },
      'prune': 'boolean'
    },
    'FargateCluster': {
      'defaultProfile': {
        'fargateProfileName': '*',
        'podExecutionRole': {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'selectors': {
          'namespace': '*',
          'labels': '*'
        },
        'vpc': {
          'vpcId': '*',
          'vpcArn': '*',
          'vpcCidrBlock': '*',
          'publicSubnets': {
            'availabilityZone': '*',
            'subnetId': '*',
            'internetConnectivityEstablished': '*',
            'ipv4CidrBlock': '*',
            'routeTable': {
              'routeTableId': '*'
            }
          },
          'availabilityZones': '*',
          'vpnGatewayId': '*'
        },
        'subnetSelection': {
          'subnetType': 'SubnetType',
          'availabilityZones': '*',
          'subnetGroupName': '*',
          'subnetName': '*',
          'onePerAz': 'boolean',
          'subnetFilters': '*'
        }
      },
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'clusterName': '*',
      'securityGroup': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'version': '*',
      'mastersRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'coreDnsComputeType': 'CoreDnsComputeType',
      'endpointAccess': '*',
      'prune': 'boolean',
      'secretsEncryptionKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'ipFamily': 'IpFamily',
      'serviceIpv4Cidr': '*',
      'albController': {
        'version': '*',
        'repository': '*',
        'policy': '*'
      },
      'clusterLogging': 'ClusterLoggingTypes',
      'tags': '*',
      'kubectlProviderOptions': {
        'role': {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'awscliLayer': {
          'layerVersionArn': '*',
          'compatibleRuntimes': '*'
        },
        'environment': '*',
        'securityGroup': {
          'securityGroupId': '*',
          'allowAllOutbound': 'boolean',
          'canInlineRule': 'boolean',
          'uniqueId': '*',
          'connections': '*'
        },
        'memory': '*',
        'privateSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          }
        }
      }
    },
    'Nodegroup': {
      'cluster': {
        'vpc': {
          'vpcId': '*',
          'vpcArn': '*',
          'vpcCidrBlock': '*',
          'publicSubnets': {
            'availabilityZone': '*',
            'subnetId': '*',
            'internetConnectivityEstablished': '*',
            'ipv4CidrBlock': '*',
            'routeTable': {
              'routeTableId': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'availabilityZones': '*',
          'vpnGatewayId': '*'
        },
        'clusterName': '*',
        'clusterArn': '*',
        'clusterEndpoint': '*',
        'clusterCertificateAuthorityData': '*',
        'clusterSecurityGroupId': '*',
        'clusterSecurityGroup': {
          'securityGroupId': '*',
          'allowAllOutbound': 'boolean',
          'canInlineRule': 'boolean',
          'uniqueId': '*',
          'connections': '*'
        },
        'clusterEncryptionConfigKeyArn': '*',
        'openIdConnectProvider': {
          'openIdConnectProviderArn': '*',
          'openIdConnectProviderIssuer': '*'
        },
        'eksPodIdentityAgent': {
          'addonName': '*',
          'addonArn': '*'
        },
        'ipFamily': 'IpFamily',
        'kubectlProviderOptions': {
          'role': {
            'roleArn': '*',
            'roleName': '*',
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*',
            'grantPrincipal': {
              'assumeRoleAction': '*',
              'principalAccount': '*'
            }
          },
          'awscliLayer': {
            'layerVersionArn': '*',
            'compatibleRuntimes': '*'
          },
          'environment': '*',
          'memory': '*'
        },
        'kubectlProvider': {
          'serviceToken': '*'
        },
        'prune': 'boolean'
      },
      'nodegroupName': '*',
      'subnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'amiType': 'NodegroupAmiType',
      'diskSize': '*',
      'desiredSize': '*',
      'maxSize': '*',
      'minSize': '*',
      'forceUpdate': 'boolean',
      'instanceType': '*',
      'instanceTypes': '*',
      'labels': '*',
      'taints': {
        'effect': 'TaintEffect',
        'key': '*',
        'value': '*'
      },
      'nodeRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'releaseVersion': '*',
      'remoteAccess': {
        'sshKeyName': '*',
        'sourceSecurityGroups': {
          'securityGroupId': '*',
          'allowAllOutbound': 'boolean',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*',
          'canInlineRule': 'boolean',
          'uniqueId': '*',
          'connections': '*'
        }
      },
      'tags': '*',
      'launchTemplateSpec': {
        'id': '*',
        'version': '*'
      },
      'capacityType': 'CapacityType',
      'maxUnavailable': '*',
      'maxUnavailablePercentage': '*'
    },
    'OpenIdConnectProvider': {
      'url': '*'
    }
  },
  'aws-cdk-lib.aws-apigateway': {
    'ApiKey': {
      'resources': {
        'restApiId': '*',
        'restApiName': '*',
        'restApiRootResourceId': '*',
        'latestDeployment': '*',
        'deploymentStage': '*',
        'root': {
          'restApi': '*',
          'resourceId': '*',
          'path': '*',
          'defaultIntegration': '*',
          'defaultMethodOptions': {
            'operationName': '*',
            'authorizationType': 'AuthorizationType',
            'authorizer': {
              'authorizerId': '*',
              'authorizationType': 'AuthorizationType'
            },
            'apiKeyRequired': 'boolean',
            'methodResponses': {
              'statusCode': '*',
              'responseParameters': '*',
              'responseModels': '*'
            },
            'requestParameters': '*',
            'requestModels': '*',
            'requestValidator': {
              'requestValidatorId': '*',
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'authorizationScopes': '*',
            'requestValidatorOptions': {
              'requestValidatorName': '*',
              'validateRequestBody': 'boolean',
              'validateRequestParameters': 'boolean'
            }
          },
          'defaultCorsPreflightOptions': {
            'statusCode': '*',
            'allowOrigins': '*',
            'allowHeaders': '*',
            'allowMethods': '*',
            'allowCredentials': 'boolean',
            'maxAge': '*',
            'disableCache': 'boolean',
            'exposeHeaders': '*'
          }
        }
      },
      'stages': {
        'stageName': '*',
        'restApi': {
          'restApiId': '*',
          'restApiName': '*',
          'restApiRootResourceId': '*',
          'latestDeployment': '*',
          'deploymentStage': '*',
          'root': {
            'restApi': '*',
            'resourceId': '*',
            'path': '*',
            'defaultIntegration': '*',
            'defaultMethodOptions': {
              'operationName': '*',
              'authorizationType': 'AuthorizationType',
              'authorizer': {
                'authorizerId': '*',
                'authorizationType': 'AuthorizationType'
              },
              'apiKeyRequired': 'boolean',
              'methodResponses': {
                'statusCode': '*',
                'responseParameters': '*',
                'responseModels': '*'
              },
              'requestParameters': '*',
              'requestModels': '*',
              'requestValidator': {
                'requestValidatorId': '*',
                'stack': '*',
                'env': {
                  'account': '*',
                  'region': '*'
                },
                'node': '*'
              },
              'authorizationScopes': '*',
              'requestValidatorOptions': {
                'requestValidatorName': '*',
                'validateRequestBody': 'boolean',
                'validateRequestParameters': 'boolean'
              }
            },
            'defaultCorsPreflightOptions': {
              'statusCode': '*',
              'allowOrigins': '*',
              'allowHeaders': '*',
              'allowMethods': '*',
              'allowCredentials': 'boolean',
              'maxAge': '*',
              'disableCache': 'boolean',
              'exposeHeaders': '*'
            }
          }
        }
      },
      'customerId': '*',
      'enabled': 'boolean',
      'generateDistinctId': 'boolean',
      'apiKeyName': '*',
      'value': '*',
      'description': '*',
      'defaultIntegration': '*',
      'defaultMethodOptions': {
        'operationName': '*',
        'authorizationType': 'AuthorizationType',
        'authorizer': {
          'authorizerId': '*',
          'authorizationType': 'AuthorizationType'
        },
        'apiKeyRequired': 'boolean',
        'methodResponses': {
          'statusCode': '*',
          'responseParameters': '*',
          'responseModels': '*'
        },
        'requestParameters': '*',
        'requestModels': '*',
        'requestValidator': {
          'requestValidatorId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'authorizationScopes': '*',
        'requestValidatorOptions': {
          'requestValidatorName': '*',
          'validateRequestBody': 'boolean',
          'validateRequestParameters': 'boolean'
        }
      },
      'defaultCorsPreflightOptions': {
        'statusCode': '*',
        'allowOrigins': '*',
        'allowHeaders': '*',
        'allowMethods': '*',
        'allowCredentials': 'boolean',
        'maxAge': '*',
        'disableCache': 'boolean',
        'exposeHeaders': '*'
      }
    },
    'RateLimitedApiKey': {
      'apiStages': {
        'api': {
          'restApiId': '*',
          'restApiName': '*',
          'restApiRootResourceId': '*',
          'latestDeployment': '*',
          'deploymentStage': '*',
          'root': {
            'restApi': '*',
            'resourceId': '*',
            'path': '*',
            'defaultIntegration': '*',
            'defaultMethodOptions': {
              'operationName': '*',
              'authorizationType': 'AuthorizationType',
              'authorizer': {
                'authorizerId': '*',
                'authorizationType': 'AuthorizationType'
              },
              'apiKeyRequired': 'boolean',
              'methodResponses': {
                'statusCode': '*',
                'responseParameters': '*',
                'responseModels': '*'
              },
              'requestParameters': '*',
              'requestModels': '*',
              'requestValidator': {
                'requestValidatorId': '*',
                'stack': '*',
                'env': {
                  'account': '*',
                  'region': '*'
                },
                'node': '*'
              },
              'authorizationScopes': '*',
              'requestValidatorOptions': {
                'requestValidatorName': '*',
                'validateRequestBody': 'boolean',
                'validateRequestParameters': 'boolean'
              }
            },
            'defaultCorsPreflightOptions': {
              'statusCode': '*',
              'allowOrigins': '*',
              'allowHeaders': '*',
              'allowMethods': '*',
              'allowCredentials': 'boolean',
              'maxAge': '*',
              'disableCache': 'boolean',
              'exposeHeaders': '*'
            }
          }
        },
        'throttle': {
          'method': '*',
          'throttle': {
            'rateLimit': '*',
            'burstLimit': '*'
          }
        }
      },
      'quota': {
        'limit': '*',
        'offset': '*',
        'period': 'Period'
      },
      'throttle': {
        'rateLimit': '*',
        'burstLimit': '*'
      },
      'resources': {
        'restApiId': '*',
        'restApiName': '*',
        'restApiRootResourceId': '*',
        'latestDeployment': '*',
        'deploymentStage': '*',
        'root': {
          'restApi': '*',
          'resourceId': '*',
          'path': '*',
          'defaultIntegration': '*',
          'defaultMethodOptions': {
            'operationName': '*',
            'authorizationType': 'AuthorizationType',
            'authorizer': {
              'authorizerId': '*',
              'authorizationType': 'AuthorizationType'
            },
            'apiKeyRequired': 'boolean',
            'methodResponses': {
              'statusCode': '*',
              'responseParameters': '*',
              'responseModels': '*'
            },
            'requestParameters': '*',
            'requestModels': '*',
            'requestValidator': {
              'requestValidatorId': '*',
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'authorizationScopes': '*',
            'requestValidatorOptions': {
              'requestValidatorName': '*',
              'validateRequestBody': 'boolean',
              'validateRequestParameters': 'boolean'
            }
          },
          'defaultCorsPreflightOptions': {
            'statusCode': '*',
            'allowOrigins': '*',
            'allowHeaders': '*',
            'allowMethods': '*',
            'allowCredentials': 'boolean',
            'maxAge': '*',
            'disableCache': 'boolean',
            'exposeHeaders': '*'
          }
        }
      },
      'stages': {
        'stageName': '*',
        'restApi': {
          'restApiId': '*',
          'restApiName': '*',
          'restApiRootResourceId': '*',
          'latestDeployment': '*',
          'deploymentStage': '*',
          'root': {
            'restApi': '*',
            'resourceId': '*',
            'path': '*',
            'defaultIntegration': '*',
            'defaultMethodOptions': {
              'operationName': '*',
              'authorizationType': 'AuthorizationType',
              'authorizer': {
                'authorizerId': '*',
                'authorizationType': 'AuthorizationType'
              },
              'apiKeyRequired': 'boolean',
              'methodResponses': {
                'statusCode': '*',
                'responseParameters': '*',
                'responseModels': '*'
              },
              'requestParameters': '*',
              'requestModels': '*',
              'requestValidator': {
                'requestValidatorId': '*',
                'stack': '*',
                'env': {
                  'account': '*',
                  'region': '*'
                },
                'node': '*'
              },
              'authorizationScopes': '*',
              'requestValidatorOptions': {
                'requestValidatorName': '*',
                'validateRequestBody': 'boolean',
                'validateRequestParameters': 'boolean'
              }
            },
            'defaultCorsPreflightOptions': {
              'statusCode': '*',
              'allowOrigins': '*',
              'allowHeaders': '*',
              'allowMethods': '*',
              'allowCredentials': 'boolean',
              'maxAge': '*',
              'disableCache': 'boolean',
              'exposeHeaders': '*'
            }
          }
        }
      },
      'customerId': '*',
      'enabled': 'boolean',
      'generateDistinctId': 'boolean',
      'apiKeyName': '*',
      'value': '*',
      'description': '*',
      'defaultIntegration': '*',
      'defaultMethodOptions': {
        'operationName': '*',
        'authorizationType': 'AuthorizationType',
        'authorizer': {
          'authorizerId': '*',
          'authorizationType': 'AuthorizationType'
        },
        'apiKeyRequired': 'boolean',
        'methodResponses': {
          'statusCode': '*',
          'responseParameters': '*',
          'responseModels': '*'
        },
        'requestParameters': '*',
        'requestModels': '*',
        'requestValidator': {
          'requestValidatorId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'authorizationScopes': '*',
        'requestValidatorOptions': {
          'requestValidatorName': '*',
          'validateRequestBody': 'boolean',
          'validateRequestParameters': 'boolean'
        }
      },
      'defaultCorsPreflightOptions': {
        'statusCode': '*',
        'allowOrigins': '*',
        'allowHeaders': '*',
        'allowMethods': '*',
        'allowCredentials': 'boolean',
        'maxAge': '*',
        'disableCache': 'boolean',
        'exposeHeaders': '*'
      }
    },
    'BasePathMapping': {
      'domainName': {
        'domainName': '*',
        'domainNameAliasDomainName': '*',
        'domainNameAliasHostedZoneId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'restApi': {
        'restApiId': '*',
        'restApiName': '*',
        'restApiRootResourceId': '*',
        'latestDeployment': '*',
        'deploymentStage': '*',
        'root': {
          'restApi': '*',
          'resourceId': '*',
          'path': '*',
          'defaultIntegration': '*',
          'defaultMethodOptions': {
            'operationName': '*',
            'authorizationType': 'AuthorizationType',
            'authorizer': {
              'authorizerId': '*',
              'authorizationType': 'AuthorizationType'
            },
            'apiKeyRequired': 'boolean',
            'methodResponses': {
              'statusCode': '*',
              'responseParameters': '*',
              'responseModels': '*'
            },
            'requestParameters': '*',
            'requestModels': '*',
            'requestValidator': {
              'requestValidatorId': '*',
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'authorizationScopes': '*',
            'requestValidatorOptions': {
              'requestValidatorName': '*',
              'validateRequestBody': 'boolean',
              'validateRequestParameters': 'boolean'
            }
          },
          'defaultCorsPreflightOptions': {
            'statusCode': '*',
            'allowOrigins': '*',
            'allowHeaders': '*',
            'allowMethods': '*',
            'allowCredentials': 'boolean',
            'maxAge': '*',
            'disableCache': 'boolean',
            'exposeHeaders': '*'
          }
        }
      },
      'basePath': '*',
      'stage': '*',
      'attachToStage': 'boolean'
    },
    'Deployment': {
      'api': {
        'restApiId': '*',
        'restApiName': '*',
        'restApiRootResourceId': '*',
        'latestDeployment': '*',
        'deploymentStage': '*',
        'root': {
          'restApi': '*',
          'resourceId': '*',
          'path': '*',
          'defaultIntegration': '*',
          'defaultMethodOptions': {
            'operationName': '*',
            'authorizationType': 'AuthorizationType',
            'authorizer': {
              'authorizerId': '*',
              'authorizationType': 'AuthorizationType'
            },
            'apiKeyRequired': 'boolean',
            'methodResponses': {
              'statusCode': '*',
              'responseParameters': '*',
              'responseModels': '*'
            },
            'requestParameters': '*',
            'requestModels': '*',
            'requestValidator': {
              'requestValidatorId': '*',
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'authorizationScopes': '*',
            'requestValidatorOptions': {
              'requestValidatorName': '*',
              'validateRequestBody': 'boolean',
              'validateRequestParameters': 'boolean'
            }
          },
          'defaultCorsPreflightOptions': {
            'statusCode': '*',
            'allowOrigins': '*',
            'allowHeaders': '*',
            'allowMethods': '*',
            'allowCredentials': 'boolean',
            'maxAge': '*',
            'disableCache': 'boolean',
            'exposeHeaders': '*'
          }
        }
      },
      'description': '*',
      'retainDeployments': 'boolean',
      'stageName': '*',
      'addToLogicalId': [
        '*'
      ],
      '_addMethodDependency': [
        '*'
      ]
    },
    'DomainName': {
      'mapping': {
        'restApiId': '*',
        'restApiName': '*',
        'restApiRootResourceId': '*',
        'latestDeployment': '*',
        'deploymentStage': '*',
        'root': {
          'restApi': '*',
          'resourceId': '*',
          'path': '*',
          'defaultIntegration': '*',
          'defaultMethodOptions': {
            'operationName': '*',
            'authorizationType': 'AuthorizationType',
            'authorizer': {
              'authorizerId': '*',
              'authorizationType': 'AuthorizationType'
            },
            'apiKeyRequired': 'boolean',
            'methodResponses': {
              'statusCode': '*',
              'responseParameters': '*',
              'responseModels': '*'
            },
            'requestParameters': '*',
            'requestModels': '*',
            'requestValidator': {
              'requestValidatorId': '*',
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'authorizationScopes': '*',
            'requestValidatorOptions': {
              'requestValidatorName': '*',
              'validateRequestBody': 'boolean',
              'validateRequestParameters': 'boolean'
            }
          },
          'defaultCorsPreflightOptions': {
            'statusCode': '*',
            'allowOrigins': '*',
            'allowHeaders': '*',
            'allowMethods': '*',
            'allowCredentials': 'boolean',
            'maxAge': '*',
            'disableCache': 'boolean',
            'exposeHeaders': '*'
          }
        }
      },
      'domainName': '*',
      'certificate': {
        'certificateArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'endpointType': 'EndpointType',
      'securityPolicy': 'SecurityPolicy',
      'mtls': {
        'bucket': {
          'bucketArn': '*',
          'bucketName': '*',
          'bucketWebsiteUrl': '*',
          'bucketWebsiteDomainName': '*',
          'bucketDomainName': '*',
          'bucketDualStackDomainName': '*',
          'bucketRegionalDomainName': '*',
          'isWebsite': 'boolean',
          'encryptionKey': {
            'keyArn': '*',
            'keyId': '*',
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'policy': '*',
          'replicationRoleArn': '*'
        },
        'key': '*',
        'version': '*'
      },
      'basePath': '*',
      'addBasePathMapping': [
        {
          'restApiId': '*',
          'restApiName': '*',
          'restApiRootResourceId': '*',
          'latestDeployment': '*',
          'deploymentStage': '*',
          'root': {
            'restApi': '*',
            'resourceId': '*',
            'path': '*',
            'defaultIntegration': '*',
            'defaultMethodOptions': {
              'operationName': '*',
              'authorizationType': 'AuthorizationType',
              'authorizer': {
                'authorizerId': '*',
                'authorizationType': 'AuthorizationType'
              },
              'apiKeyRequired': 'boolean',
              'methodResponses': {
                'statusCode': '*',
                'responseParameters': '*',
                'responseModels': '*'
              },
              'requestParameters': '*',
              'requestModels': '*',
              'requestValidator': {
                'requestValidatorId': '*',
                'stack': '*',
                'env': {
                  'account': '*',
                  'region': '*'
                },
                'node': '*'
              },
              'authorizationScopes': '*',
              'requestValidatorOptions': {
                'requestValidatorName': '*',
                'validateRequestBody': 'boolean',
                'validateRequestParameters': 'boolean'
              }
            },
            'defaultCorsPreflightOptions': {
              'statusCode': '*',
              'allowOrigins': '*',
              'allowHeaders': '*',
              'allowMethods': '*',
              'allowCredentials': 'boolean',
              'maxAge': '*',
              'disableCache': 'boolean',
              'exposeHeaders': '*'
            }
          }
        },
        {
          'basePath': '*',
          'stage': '*',
          'attachToStage': 'boolean'
        }
      ],
      'addApiMapping': [
        {
          'stageName': '*',
          'restApi': {
            'restApiId': '*',
            'restApiName': '*',
            'restApiRootResourceId': '*',
            'latestDeployment': '*',
            'deploymentStage': '*',
            'root': {
              'restApi': '*',
              'resourceId': '*',
              'path': '*',
              'defaultIntegration': '*',
              'defaultMethodOptions': {
                'operationName': '*',
                'authorizationType': 'AuthorizationType',
                'authorizer': {
                  'authorizerId': '*',
                  'authorizationType': 'AuthorizationType'
                },
                'apiKeyRequired': 'boolean',
                'methodResponses': {
                  'statusCode': '*',
                  'responseParameters': '*',
                  'responseModels': '*'
                },
                'requestParameters': '*',
                'requestModels': '*',
                'requestValidator': {
                  'requestValidatorId': '*',
                  'stack': '*',
                  'env': {
                    'account': '*',
                    'region': '*'
                  },
                  'node': '*'
                },
                'authorizationScopes': '*',
                'requestValidatorOptions': {
                  'requestValidatorName': '*',
                  'validateRequestBody': 'boolean',
                  'validateRequestParameters': 'boolean'
                }
              },
              'defaultCorsPreflightOptions': {
                'statusCode': '*',
                'allowOrigins': '*',
                'allowHeaders': '*',
                'allowMethods': '*',
                'allowCredentials': 'boolean',
                'maxAge': '*',
                'disableCache': 'boolean',
                'exposeHeaders': '*'
              }
            }
          }
        },
        {
          'basePath': '*'
        }
      ]
    },
    'GatewayResponse': {
      'restApi': {
        'restApiId': '*',
        'restApiName': '*',
        'restApiRootResourceId': '*',
        'latestDeployment': '*',
        'deploymentStage': '*',
        'root': {
          'restApi': '*',
          'resourceId': '*',
          'path': '*',
          'defaultIntegration': '*',
          'defaultMethodOptions': {
            'operationName': '*',
            'authorizationType': 'AuthorizationType',
            'authorizer': {
              'authorizerId': '*',
              'authorizationType': 'AuthorizationType'
            },
            'apiKeyRequired': 'boolean',
            'methodResponses': {
              'statusCode': '*',
              'responseParameters': '*',
              'responseModels': '*'
            },
            'requestParameters': '*',
            'requestModels': '*',
            'requestValidator': {
              'requestValidatorId': '*',
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'authorizationScopes': '*',
            'requestValidatorOptions': {
              'requestValidatorName': '*',
              'validateRequestBody': 'boolean',
              'validateRequestParameters': 'boolean'
            }
          },
          'defaultCorsPreflightOptions': {
            'statusCode': '*',
            'allowOrigins': '*',
            'allowHeaders': '*',
            'allowMethods': '*',
            'allowCredentials': 'boolean',
            'maxAge': '*',
            'disableCache': 'boolean',
            'exposeHeaders': '*'
          }
        }
      },
      'type': '*',
      'statusCode': '*',
      'responseHeaders': '*',
      'templates': '*'
    },
    'LambdaRestApi': {
      'handler': {
        'functionName': '*',
        'functionArn': '*',
        'role': {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'isBoundToVpc': 'boolean',
        'latestVersion': {
          'version': '*',
          'edgeArn': '*',
          'functionName': '*',
          'functionArn': '*',
          'isBoundToVpc': 'boolean',
          'architecture': '*',
          'resourceArnsForGrantInvoke': '*',
          'connections': '*'
        },
        'resourceArnsForGrantInvoke': '*'
      },
      'integrationOptions': {
        'proxy': 'boolean',
        'allowTestInvoke': 'boolean',
        'cacheKeyParameters': '*',
        'cacheNamespace': '*',
        'contentHandling': 'ContentHandling',
        'credentialsRole': {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'credentialsPassthrough': 'boolean',
        'passthroughBehavior': 'PassthroughBehavior',
        'requestParameters': '*',
        'requestTemplates': '*',
        'timeout': '*',
        'integrationResponses': {
          'selectionPattern': '*',
          'statusCode': '*',
          'contentHandling': 'ContentHandling',
          'responseParameters': '*',
          'responseTemplates': '*'
        },
        'connectionType': 'ConnectionType',
        'vpcLink': {
          'vpcLinkId': '*'
        }
      },
      'proxy': 'boolean',
      'options': {
        'binaryMediaTypes': '*',
        'minimumCompressionSize': '*',
        'minCompressionSize': '*',
        'cloneFrom': {
          'restApiId': '*',
          'restApiName': '*',
          'restApiRootResourceId': '*',
          'latestDeployment': '*',
          'deploymentStage': '*',
          'root': {
            'restApi': '*',
            'resourceId': '*',
            'path': '*',
            'defaultIntegration': '*',
            'defaultMethodOptions': {
              'operationName': '*',
              'authorizationType': 'AuthorizationType',
              'authorizer': {
                'authorizerId': '*',
                'authorizationType': 'AuthorizationType'
              },
              'apiKeyRequired': 'boolean',
              'methodResponses': {
                'statusCode': '*',
                'responseParameters': '*',
                'responseModels': '*'
              },
              'requestParameters': '*',
              'requestModels': '*',
              'requestValidator': {
                'requestValidatorId': '*',
                'stack': '*',
                'env': {
                  'account': '*',
                  'region': '*'
                },
                'node': '*'
              },
              'authorizationScopes': '*',
              'requestValidatorOptions': {
                'requestValidatorName': '*',
                'validateRequestBody': 'boolean',
                'validateRequestParameters': 'boolean'
              }
            },
            'defaultCorsPreflightOptions': {
              'statusCode': '*',
              'allowOrigins': '*',
              'allowHeaders': '*',
              'allowMethods': '*',
              'allowCredentials': 'boolean',
              'maxAge': '*',
              'disableCache': 'boolean',
              'exposeHeaders': '*'
            }
          }
        },
        'apiKeySourceType': 'ApiKeySourceType',
        'endpointConfiguration': {
          'types': 'EndpointType',
          'vpcEndpoints': {
            'vpcEndpointId': '*'
          }
        },
        'deploy': 'boolean',
        'deployOptions': {
          'stageName': '*',
          'accessLogDestination': '*',
          'accessLogFormat': '*',
          'tracingEnabled': 'boolean',
          'cacheClusterEnabled': 'boolean',
          'cacheClusterSize': '*',
          'clientCertificateId': '*',
          'description': '*',
          'documentationVersion': '*',
          'variables': '*',
          'methodOptions': '*',
          'metricsEnabled': 'boolean',
          'loggingLevel': 'MethodLoggingLevel',
          'dataTraceEnabled': 'boolean',
          'throttlingBurstLimit': '*',
          'throttlingRateLimit': '*',
          'cachingEnabled': 'boolean',
          'cacheDataEncrypted': 'boolean'
        },
        'retainDeployments': 'boolean',
        'restApiName': '*',
        'parameters': '*',
        'policy': '*',
        'failOnWarnings': 'boolean',
        'domainName': {
          'domainName': '*',
          'certificate': {
            'certificateArn': '*'
          },
          'endpointType': 'EndpointType',
          'securityPolicy': 'SecurityPolicy',
          'mtls': {
            'bucket': {
              'bucketArn': '*',
              'bucketName': '*',
              'bucketWebsiteUrl': '*',
              'bucketWebsiteDomainName': '*',
              'bucketDomainName': '*',
              'bucketDualStackDomainName': '*',
              'bucketRegionalDomainName': '*',
              'isWebsite': 'boolean',
              'encryptionKey': {
                'keyArn': '*',
                'keyId': '*'
              },
              'policy': '*',
              'replicationRoleArn': '*'
            },
            'key': '*',
            'version': '*'
          },
          'basePath': '*'
        },
        'cloudWatchRole': 'boolean',
        'cloudWatchRoleRemovalPolicy': 'RemovalPolicy',
        'endpointExportName': '*',
        'endpointTypes': 'EndpointType',
        'disableExecuteApiEndpoint': 'boolean',
        'description': '*'
      },
      'binaryMediaTypes': '*',
      'minimumCompressionSize': '*',
      'minCompressionSize': '*',
      'cloneFrom': {
        'restApiId': '*',
        'restApiName': '*',
        'restApiRootResourceId': '*',
        'latestDeployment': '*',
        'deploymentStage': '*',
        'root': {
          'restApi': '*',
          'resourceId': '*',
          'path': '*',
          'defaultIntegration': '*',
          'defaultMethodOptions': {
            'operationName': '*',
            'authorizationType': 'AuthorizationType',
            'authorizer': {
              'authorizerId': '*',
              'authorizationType': 'AuthorizationType'
            },
            'apiKeyRequired': 'boolean',
            'methodResponses': {
              'statusCode': '*',
              'responseParameters': '*',
              'responseModels': '*'
            },
            'requestParameters': '*',
            'requestModels': '*',
            'requestValidator': {
              'requestValidatorId': '*',
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'authorizationScopes': '*',
            'requestValidatorOptions': {
              'requestValidatorName': '*',
              'validateRequestBody': 'boolean',
              'validateRequestParameters': 'boolean'
            }
          },
          'defaultCorsPreflightOptions': {
            'statusCode': '*',
            'allowOrigins': '*',
            'allowHeaders': '*',
            'allowMethods': '*',
            'allowCredentials': 'boolean',
            'maxAge': '*',
            'disableCache': 'boolean',
            'exposeHeaders': '*'
          }
        }
      },
      'apiKeySourceType': 'ApiKeySourceType',
      'endpointConfiguration': {
        'types': 'EndpointType',
        'vpcEndpoints': {
          'vpcEndpointId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'deploy': 'boolean',
      'deployOptions': {
        'stageName': '*',
        'accessLogDestination': '*',
        'accessLogFormat': '*',
        'tracingEnabled': 'boolean',
        'cacheClusterEnabled': 'boolean',
        'cacheClusterSize': '*',
        'clientCertificateId': '*',
        'description': '*',
        'documentationVersion': '*',
        'variables': '*',
        'methodOptions': '*',
        'metricsEnabled': 'boolean',
        'loggingLevel': 'MethodLoggingLevel',
        'dataTraceEnabled': 'boolean',
        'throttlingBurstLimit': '*',
        'throttlingRateLimit': '*',
        'cachingEnabled': 'boolean',
        'cacheTtl': '*',
        'cacheDataEncrypted': 'boolean'
      },
      'retainDeployments': 'boolean',
      'restApiName': '*',
      'parameters': '*',
      'policy': '*',
      'failOnWarnings': 'boolean',
      'domainName': {
        'domainName': '*',
        'certificate': {
          'certificateArn': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'endpointType': 'EndpointType',
        'securityPolicy': 'SecurityPolicy',
        'mtls': {
          'bucket': {
            'bucketArn': '*',
            'bucketName': '*',
            'bucketWebsiteUrl': '*',
            'bucketWebsiteDomainName': '*',
            'bucketDomainName': '*',
            'bucketDualStackDomainName': '*',
            'bucketRegionalDomainName': '*',
            'isWebsite': 'boolean',
            'encryptionKey': {
              'keyArn': '*',
              'keyId': '*'
            },
            'policy': '*',
            'replicationRoleArn': '*'
          },
          'key': '*',
          'version': '*'
        },
        'basePath': '*'
      },
      'cloudWatchRole': 'boolean',
      'cloudWatchRoleRemovalPolicy': 'RemovalPolicy',
      'endpointExportName': '*',
      'endpointTypes': 'EndpointType',
      'disableExecuteApiEndpoint': 'boolean',
      'description': '*',
      'defaultIntegration': '*',
      'defaultMethodOptions': {
        'operationName': '*',
        'authorizationType': 'AuthorizationType',
        'authorizer': {
          'authorizerId': '*',
          'authorizationType': 'AuthorizationType'
        },
        'apiKeyRequired': 'boolean',
        'methodResponses': {
          'statusCode': '*',
          'responseParameters': '*',
          'responseModels': '*'
        },
        'requestParameters': '*',
        'requestModels': '*',
        'requestValidator': {
          'requestValidatorId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'authorizationScopes': '*',
        'requestValidatorOptions': {
          'requestValidatorName': '*',
          'validateRequestBody': 'boolean',
          'validateRequestParameters': 'boolean'
        }
      },
      'defaultCorsPreflightOptions': {
        'statusCode': '*',
        'allowOrigins': '*',
        'allowHeaders': '*',
        'allowMethods': '*',
        'allowCredentials': 'boolean',
        'maxAge': '*',
        'disableCache': 'boolean',
        'exposeHeaders': '*'
      }
    },
    'Method': {
      'resource': {
        'restApi': '*',
        'api': {
          'restApiId': '*',
          'restApiName': '*',
          'restApiRootResourceId': '*',
          'latestDeployment': '*',
          'deploymentStage': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'resourceId': '*',
        'path': '*',
        'defaultIntegration': '*',
        'defaultMethodOptions': {
          'operationName': '*',
          'authorizationType': 'AuthorizationType',
          'authorizer': {
            'authorizerId': '*',
            'authorizationType': 'AuthorizationType'
          },
          'apiKeyRequired': 'boolean',
          'methodResponses': {
            'statusCode': '*',
            'responseParameters': '*',
            'responseModels': '*'
          },
          'requestParameters': '*',
          'requestModels': '*',
          'requestValidator': {
            'requestValidatorId': '*'
          },
          'authorizationScopes': '*',
          'requestValidatorOptions': {
            'requestValidatorName': '*',
            'validateRequestBody': 'boolean',
            'validateRequestParameters': 'boolean'
          }
        },
        'defaultCorsPreflightOptions': {
          'statusCode': '*',
          'allowOrigins': '*',
          'allowHeaders': '*',
          'allowMethods': '*',
          'allowCredentials': 'boolean',
          'maxAge': '*',
          'disableCache': 'boolean',
          'exposeHeaders': '*'
        }
      },
      'httpMethod': '*',
      'integration': '*',
      'options': {
        'operationName': '*',
        'authorizationType': 'AuthorizationType',
        'authorizer': {
          'authorizerId': '*',
          'authorizationType': 'AuthorizationType'
        },
        'apiKeyRequired': 'boolean',
        'methodResponses': {
          'statusCode': '*',
          'responseParameters': '*',
          'responseModels': '*'
        },
        'requestParameters': '*',
        'requestModels': '*',
        'requestValidator': {
          'requestValidatorId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'authorizationScopes': '*',
        'requestValidatorOptions': {
          'requestValidatorName': '*',
          'validateRequestBody': 'boolean',
          'validateRequestParameters': 'boolean'
        }
      },
      'addMethodResponse': [
        {
          'statusCode': '*',
          'responseParameters': '*',
          'responseModels': '*'
        }
      ],
      'metric': [
        '*',
        {
          'stageName': '*',
          'restApi': {
            'restApiId': '*',
            'restApiName': '*',
            'restApiRootResourceId': '*',
            'latestDeployment': '*',
            'deploymentStage': '*',
            'root': {
              'restApi': '*',
              'resourceId': '*',
              'path': '*',
              'defaultIntegration': '*',
              'defaultMethodOptions': {
                'operationName': '*',
                'authorizationType': 'AuthorizationType',
                'authorizer': {
                  'authorizerId': '*',
                  'authorizationType': 'AuthorizationType'
                },
                'apiKeyRequired': 'boolean',
                'methodResponses': {
                  'statusCode': '*',
                  'responseParameters': '*',
                  'responseModels': '*'
                },
                'requestParameters': '*',
                'requestModels': '*',
                'requestValidator': {
                  'requestValidatorId': '*',
                  'stack': '*',
                  'env': {
                    'account': '*',
                    'region': '*'
                  },
                  'node': '*'
                },
                'authorizationScopes': '*',
                'requestValidatorOptions': {
                  'requestValidatorName': '*',
                  'validateRequestBody': 'boolean',
                  'validateRequestParameters': 'boolean'
                }
              },
              'defaultCorsPreflightOptions': {
                'statusCode': '*',
                'allowOrigins': '*',
                'allowHeaders': '*',
                'allowMethods': '*',
                'allowCredentials': 'boolean',
                'maxAge': '*',
                'disableCache': 'boolean',
                'exposeHeaders': '*'
              }
            }
          }
        },
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricClientError': [
        {
          'stageName': '*',
          'restApi': {
            'restApiId': '*',
            'restApiName': '*',
            'restApiRootResourceId': '*',
            'latestDeployment': '*',
            'deploymentStage': '*',
            'root': {
              'restApi': '*',
              'resourceId': '*',
              'path': '*',
              'defaultIntegration': '*',
              'defaultMethodOptions': {
                'operationName': '*',
                'authorizationType': 'AuthorizationType',
                'authorizer': {
                  'authorizerId': '*',
                  'authorizationType': 'AuthorizationType'
                },
                'apiKeyRequired': 'boolean',
                'methodResponses': {
                  'statusCode': '*',
                  'responseParameters': '*',
                  'responseModels': '*'
                },
                'requestParameters': '*',
                'requestModels': '*',
                'requestValidator': {
                  'requestValidatorId': '*',
                  'stack': '*',
                  'env': {
                    'account': '*',
                    'region': '*'
                  },
                  'node': '*'
                },
                'authorizationScopes': '*',
                'requestValidatorOptions': {
                  'requestValidatorName': '*',
                  'validateRequestBody': 'boolean',
                  'validateRequestParameters': 'boolean'
                }
              },
              'defaultCorsPreflightOptions': {
                'statusCode': '*',
                'allowOrigins': '*',
                'allowHeaders': '*',
                'allowMethods': '*',
                'allowCredentials': 'boolean',
                'maxAge': '*',
                'disableCache': 'boolean',
                'exposeHeaders': '*'
              }
            }
          }
        },
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricServerError': [
        {
          'stageName': '*',
          'restApi': {
            'restApiId': '*',
            'restApiName': '*',
            'restApiRootResourceId': '*',
            'latestDeployment': '*',
            'deploymentStage': '*',
            'root': {
              'restApi': '*',
              'resourceId': '*',
              'path': '*',
              'defaultIntegration': '*',
              'defaultMethodOptions': {
                'operationName': '*',
                'authorizationType': 'AuthorizationType',
                'authorizer': {
                  'authorizerId': '*',
                  'authorizationType': 'AuthorizationType'
                },
                'apiKeyRequired': 'boolean',
                'methodResponses': {
                  'statusCode': '*',
                  'responseParameters': '*',
                  'responseModels': '*'
                },
                'requestParameters': '*',
                'requestModels': '*',
                'requestValidator': {
                  'requestValidatorId': '*',
                  'stack': '*',
                  'env': {
                    'account': '*',
                    'region': '*'
                  },
                  'node': '*'
                },
                'authorizationScopes': '*',
                'requestValidatorOptions': {
                  'requestValidatorName': '*',
                  'validateRequestBody': 'boolean',
                  'validateRequestParameters': 'boolean'
                }
              },
              'defaultCorsPreflightOptions': {
                'statusCode': '*',
                'allowOrigins': '*',
                'allowHeaders': '*',
                'allowMethods': '*',
                'allowCredentials': 'boolean',
                'maxAge': '*',
                'disableCache': 'boolean',
                'exposeHeaders': '*'
              }
            }
          }
        },
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricCacheHitCount': [
        {
          'stageName': '*',
          'restApi': {
            'restApiId': '*',
            'restApiName': '*',
            'restApiRootResourceId': '*',
            'latestDeployment': '*',
            'deploymentStage': '*',
            'root': {
              'restApi': '*',
              'resourceId': '*',
              'path': '*',
              'defaultIntegration': '*',
              'defaultMethodOptions': {
                'operationName': '*',
                'authorizationType': 'AuthorizationType',
                'authorizer': {
                  'authorizerId': '*',
                  'authorizationType': 'AuthorizationType'
                },
                'apiKeyRequired': 'boolean',
                'methodResponses': {
                  'statusCode': '*',
                  'responseParameters': '*',
                  'responseModels': '*'
                },
                'requestParameters': '*',
                'requestModels': '*',
                'requestValidator': {
                  'requestValidatorId': '*',
                  'stack': '*',
                  'env': {
                    'account': '*',
                    'region': '*'
                  },
                  'node': '*'
                },
                'authorizationScopes': '*',
                'requestValidatorOptions': {
                  'requestValidatorName': '*',
                  'validateRequestBody': 'boolean',
                  'validateRequestParameters': 'boolean'
                }
              },
              'defaultCorsPreflightOptions': {
                'statusCode': '*',
                'allowOrigins': '*',
                'allowHeaders': '*',
                'allowMethods': '*',
                'allowCredentials': 'boolean',
                'maxAge': '*',
                'disableCache': 'boolean',
                'exposeHeaders': '*'
              }
            }
          }
        },
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricCacheMissCount': [
        {
          'stageName': '*',
          'restApi': {
            'restApiId': '*',
            'restApiName': '*',
            'restApiRootResourceId': '*',
            'latestDeployment': '*',
            'deploymentStage': '*',
            'root': {
              'restApi': '*',
              'resourceId': '*',
              'path': '*',
              'defaultIntegration': '*',
              'defaultMethodOptions': {
                'operationName': '*',
                'authorizationType': 'AuthorizationType',
                'authorizer': {
                  'authorizerId': '*',
                  'authorizationType': 'AuthorizationType'
                },
                'apiKeyRequired': 'boolean',
                'methodResponses': {
                  'statusCode': '*',
                  'responseParameters': '*',
                  'responseModels': '*'
                },
                'requestParameters': '*',
                'requestModels': '*',
                'requestValidator': {
                  'requestValidatorId': '*',
                  'stack': '*',
                  'env': {
                    'account': '*',
                    'region': '*'
                  },
                  'node': '*'
                },
                'authorizationScopes': '*',
                'requestValidatorOptions': {
                  'requestValidatorName': '*',
                  'validateRequestBody': 'boolean',
                  'validateRequestParameters': 'boolean'
                }
              },
              'defaultCorsPreflightOptions': {
                'statusCode': '*',
                'allowOrigins': '*',
                'allowHeaders': '*',
                'allowMethods': '*',
                'allowCredentials': 'boolean',
                'maxAge': '*',
                'disableCache': 'boolean',
                'exposeHeaders': '*'
              }
            }
          }
        },
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricCount': [
        {
          'stageName': '*',
          'restApi': {
            'restApiId': '*',
            'restApiName': '*',
            'restApiRootResourceId': '*',
            'latestDeployment': '*',
            'deploymentStage': '*',
            'root': {
              'restApi': '*',
              'resourceId': '*',
              'path': '*',
              'defaultIntegration': '*',
              'defaultMethodOptions': {
                'operationName': '*',
                'authorizationType': 'AuthorizationType',
                'authorizer': {
                  'authorizerId': '*',
                  'authorizationType': 'AuthorizationType'
                },
                'apiKeyRequired': 'boolean',
                'methodResponses': {
                  'statusCode': '*',
                  'responseParameters': '*',
                  'responseModels': '*'
                },
                'requestParameters': '*',
                'requestModels': '*',
                'requestValidator': {
                  'requestValidatorId': '*',
                  'stack': '*',
                  'env': {
                    'account': '*',
                    'region': '*'
                  },
                  'node': '*'
                },
                'authorizationScopes': '*',
                'requestValidatorOptions': {
                  'requestValidatorName': '*',
                  'validateRequestBody': 'boolean',
                  'validateRequestParameters': 'boolean'
                }
              },
              'defaultCorsPreflightOptions': {
                'statusCode': '*',
                'allowOrigins': '*',
                'allowHeaders': '*',
                'allowMethods': '*',
                'allowCredentials': 'boolean',
                'maxAge': '*',
                'disableCache': 'boolean',
                'exposeHeaders': '*'
              }
            }
          }
        },
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricIntegrationLatency': [
        {
          'stageName': '*',
          'restApi': {
            'restApiId': '*',
            'restApiName': '*',
            'restApiRootResourceId': '*',
            'latestDeployment': '*',
            'deploymentStage': '*',
            'root': {
              'restApi': '*',
              'resourceId': '*',
              'path': '*',
              'defaultIntegration': '*',
              'defaultMethodOptions': {
                'operationName': '*',
                'authorizationType': 'AuthorizationType',
                'authorizer': {
                  'authorizerId': '*',
                  'authorizationType': 'AuthorizationType'
                },
                'apiKeyRequired': 'boolean',
                'methodResponses': {
                  'statusCode': '*',
                  'responseParameters': '*',
                  'responseModels': '*'
                },
                'requestParameters': '*',
                'requestModels': '*',
                'requestValidator': {
                  'requestValidatorId': '*',
                  'stack': '*',
                  'env': {
                    'account': '*',
                    'region': '*'
                  },
                  'node': '*'
                },
                'authorizationScopes': '*',
                'requestValidatorOptions': {
                  'requestValidatorName': '*',
                  'validateRequestBody': 'boolean',
                  'validateRequestParameters': 'boolean'
                }
              },
              'defaultCorsPreflightOptions': {
                'statusCode': '*',
                'allowOrigins': '*',
                'allowHeaders': '*',
                'allowMethods': '*',
                'allowCredentials': 'boolean',
                'maxAge': '*',
                'disableCache': 'boolean',
                'exposeHeaders': '*'
              }
            }
          }
        },
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricLatency': [
        {
          'stageName': '*',
          'restApi': {
            'restApiId': '*',
            'restApiName': '*',
            'restApiRootResourceId': '*',
            'latestDeployment': '*',
            'deploymentStage': '*',
            'root': {
              'restApi': '*',
              'resourceId': '*',
              'path': '*',
              'defaultIntegration': '*',
              'defaultMethodOptions': {
                'operationName': '*',
                'authorizationType': 'AuthorizationType',
                'authorizer': {
                  'authorizerId': '*',
                  'authorizationType': 'AuthorizationType'
                },
                'apiKeyRequired': 'boolean',
                'methodResponses': {
                  'statusCode': '*',
                  'responseParameters': '*',
                  'responseModels': '*'
                },
                'requestParameters': '*',
                'requestModels': '*',
                'requestValidator': {
                  'requestValidatorId': '*',
                  'stack': '*',
                  'env': {
                    'account': '*',
                    'region': '*'
                  },
                  'node': '*'
                },
                'authorizationScopes': '*',
                'requestValidatorOptions': {
                  'requestValidatorName': '*',
                  'validateRequestBody': 'boolean',
                  'validateRequestParameters': 'boolean'
                }
              },
              'defaultCorsPreflightOptions': {
                'statusCode': '*',
                'allowOrigins': '*',
                'allowHeaders': '*',
                'allowMethods': '*',
                'allowCredentials': 'boolean',
                'maxAge': '*',
                'disableCache': 'boolean',
                'exposeHeaders': '*'
              }
            }
          }
        },
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'grantExecute': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        }
      ]
    },
    'Model': {
      'restApi': {
        'restApiId': '*',
        'restApiName': '*',
        'restApiRootResourceId': '*',
        'latestDeployment': '*',
        'deploymentStage': '*',
        'root': {
          'restApi': '*',
          'resourceId': '*',
          'path': '*',
          'defaultIntegration': '*',
          'defaultMethodOptions': {
            'operationName': '*',
            'authorizationType': 'AuthorizationType',
            'authorizer': {
              'authorizerId': '*',
              'authorizationType': 'AuthorizationType'
            },
            'apiKeyRequired': 'boolean',
            'methodResponses': {
              'statusCode': '*',
              'responseParameters': '*',
              'responseModels': '*'
            },
            'requestParameters': '*',
            'requestModels': '*',
            'requestValidator': {
              'requestValidatorId': '*',
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'authorizationScopes': '*',
            'requestValidatorOptions': {
              'requestValidatorName': '*',
              'validateRequestBody': 'boolean',
              'validateRequestParameters': 'boolean'
            }
          },
          'defaultCorsPreflightOptions': {
            'statusCode': '*',
            'allowOrigins': '*',
            'allowHeaders': '*',
            'allowMethods': '*',
            'allowCredentials': 'boolean',
            'maxAge': '*',
            'disableCache': 'boolean',
            'exposeHeaders': '*'
          }
        }
      },
      'contentType': '*',
      'description': '*',
      'modelName': '*',
      'schema': {
        'schema': 'JsonSchemaVersion',
        'id': '*',
        'ref': '*',
        'type': 'JsonSchemaType',
        'title': '*',
        'description': '*',
        'enum': '*',
        'default': '*',
        'format': '*',
        'definitions': '*',
        'multipleOf': '*',
        'maximum': '*',
        'exclusiveMaximum': 'boolean',
        'minimum': '*',
        'exclusiveMinimum': 'boolean',
        'maxLength': '*',
        'minLength': '*',
        'pattern': '*',
        'maxItems': '*',
        'minItems': '*',
        'uniqueItems': 'boolean',
        'maxProperties': '*',
        'minProperties': '*',
        'required': '*',
        'properties': '*',
        'additionalProperties': 'boolean',
        'patternProperties': '*',
        'dependencies': '*'
      }
    },
    'RequestValidator': {
      'restApi': {
        'restApiId': '*',
        'restApiName': '*',
        'restApiRootResourceId': '*',
        'latestDeployment': '*',
        'deploymentStage': '*',
        'root': {
          'restApi': '*',
          'resourceId': '*',
          'path': '*',
          'defaultIntegration': '*',
          'defaultMethodOptions': {
            'operationName': '*',
            'authorizationType': 'AuthorizationType',
            'authorizer': {
              'authorizerId': '*',
              'authorizationType': 'AuthorizationType'
            },
            'apiKeyRequired': 'boolean',
            'methodResponses': {
              'statusCode': '*',
              'responseParameters': '*',
              'responseModels': '*'
            },
            'requestParameters': '*',
            'requestModels': '*',
            'requestValidator': {
              'requestValidatorId': '*',
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'authorizationScopes': '*',
            'requestValidatorOptions': {
              'requestValidatorName': '*',
              'validateRequestBody': 'boolean',
              'validateRequestParameters': 'boolean'
            }
          },
          'defaultCorsPreflightOptions': {
            'statusCode': '*',
            'allowOrigins': '*',
            'allowHeaders': '*',
            'allowMethods': '*',
            'allowCredentials': 'boolean',
            'maxAge': '*',
            'disableCache': 'boolean',
            'exposeHeaders': '*'
          }
        }
      },
      'requestValidatorName': '*',
      'validateRequestBody': 'boolean',
      'validateRequestParameters': 'boolean'
    },
    'Resource': {
      'parent': {
        'restApi': '*',
        'api': {
          'restApiId': '*',
          'restApiName': '*',
          'restApiRootResourceId': '*',
          'latestDeployment': '*',
          'deploymentStage': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'resourceId': '*',
        'path': '*',
        'defaultIntegration': '*',
        'defaultMethodOptions': {
          'operationName': '*',
          'authorizationType': 'AuthorizationType',
          'authorizer': {
            'authorizerId': '*',
            'authorizationType': 'AuthorizationType'
          },
          'apiKeyRequired': 'boolean',
          'methodResponses': {
            'statusCode': '*',
            'responseParameters': '*',
            'responseModels': '*'
          },
          'requestParameters': '*',
          'requestModels': '*',
          'requestValidator': {
            'requestValidatorId': '*'
          },
          'authorizationScopes': '*',
          'requestValidatorOptions': {
            'requestValidatorName': '*',
            'validateRequestBody': 'boolean',
            'validateRequestParameters': 'boolean'
          }
        },
        'defaultCorsPreflightOptions': {
          'statusCode': '*',
          'allowOrigins': '*',
          'allowHeaders': '*',
          'allowMethods': '*',
          'allowCredentials': 'boolean',
          'maxAge': '*',
          'disableCache': 'boolean',
          'exposeHeaders': '*'
        }
      },
      'pathPart': '*',
      'defaultIntegration': '*',
      'defaultMethodOptions': {
        'operationName': '*',
        'authorizationType': 'AuthorizationType',
        'authorizer': {
          'authorizerId': '*',
          'authorizationType': 'AuthorizationType'
        },
        'apiKeyRequired': 'boolean',
        'methodResponses': {
          'statusCode': '*',
          'responseParameters': '*',
          'responseModels': '*'
        },
        'requestParameters': '*',
        'requestModels': '*',
        'requestValidator': {
          'requestValidatorId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'authorizationScopes': '*',
        'requestValidatorOptions': {
          'requestValidatorName': '*',
          'validateRequestBody': 'boolean',
          'validateRequestParameters': 'boolean'
        }
      },
      'defaultCorsPreflightOptions': {
        'statusCode': '*',
        'allowOrigins': '*',
        'allowHeaders': '*',
        'allowMethods': '*',
        'allowCredentials': 'boolean',
        'maxAge': '*',
        'disableCache': 'boolean',
        'exposeHeaders': '*'
      }
    },
    'ProxyResource': {
      'parent': {
        'restApi': '*',
        'api': {
          'restApiId': '*',
          'restApiName': '*',
          'restApiRootResourceId': '*',
          'latestDeployment': '*',
          'deploymentStage': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'resourceId': '*',
        'path': '*',
        'defaultIntegration': '*',
        'defaultMethodOptions': {
          'operationName': '*',
          'authorizationType': 'AuthorizationType',
          'authorizer': {
            'authorizerId': '*',
            'authorizationType': 'AuthorizationType'
          },
          'apiKeyRequired': 'boolean',
          'methodResponses': {
            'statusCode': '*',
            'responseParameters': '*',
            'responseModels': '*'
          },
          'requestParameters': '*',
          'requestModels': '*',
          'requestValidator': {
            'requestValidatorId': '*'
          },
          'authorizationScopes': '*',
          'requestValidatorOptions': {
            'requestValidatorName': '*',
            'validateRequestBody': 'boolean',
            'validateRequestParameters': 'boolean'
          }
        },
        'defaultCorsPreflightOptions': {
          'statusCode': '*',
          'allowOrigins': '*',
          'allowHeaders': '*',
          'allowMethods': '*',
          'allowCredentials': 'boolean',
          'maxAge': '*',
          'disableCache': 'boolean',
          'exposeHeaders': '*'
        }
      },
      'anyMethod': 'boolean',
      'defaultIntegration': '*',
      'defaultMethodOptions': {
        'operationName': '*',
        'authorizationType': 'AuthorizationType',
        'authorizer': {
          'authorizerId': '*',
          'authorizationType': 'AuthorizationType'
        },
        'apiKeyRequired': 'boolean',
        'methodResponses': {
          'statusCode': '*',
          'responseParameters': '*',
          'responseModels': '*'
        },
        'requestParameters': '*',
        'requestModels': '*',
        'requestValidator': {
          'requestValidatorId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'authorizationScopes': '*',
        'requestValidatorOptions': {
          'requestValidatorName': '*',
          'validateRequestBody': 'boolean',
          'validateRequestParameters': 'boolean'
        }
      },
      'defaultCorsPreflightOptions': {
        'statusCode': '*',
        'allowOrigins': '*',
        'allowHeaders': '*',
        'allowMethods': '*',
        'allowCredentials': 'boolean',
        'maxAge': '*',
        'disableCache': 'boolean',
        'exposeHeaders': '*'
      },
      'addMethod': [
        '*',
        '*',
        {
          'operationName': '*',
          'authorizationType': 'AuthorizationType',
          'authorizer': {
            'authorizerId': '*',
            'authorizationType': 'AuthorizationType'
          },
          'apiKeyRequired': 'boolean',
          'methodResponses': {
            'statusCode': '*',
            'responseParameters': '*',
            'responseModels': '*'
          },
          'requestParameters': '*',
          'requestModels': '*',
          'requestValidator': {
            'requestValidatorId': '*',
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'authorizationScopes': '*',
          'requestValidatorOptions': {
            'requestValidatorName': '*',
            'validateRequestBody': 'boolean',
            'validateRequestParameters': 'boolean'
          }
        }
      ]
    },
    'SpecRestApi': {
      'apiDefinition': '*',
      'minCompressionSize': '*',
      'deploy': 'boolean',
      'deployOptions': {
        'stageName': '*',
        'accessLogDestination': '*',
        'accessLogFormat': '*',
        'tracingEnabled': 'boolean',
        'cacheClusterEnabled': 'boolean',
        'cacheClusterSize': '*',
        'clientCertificateId': '*',
        'description': '*',
        'documentationVersion': '*',
        'variables': '*',
        'methodOptions': '*',
        'metricsEnabled': 'boolean',
        'loggingLevel': 'MethodLoggingLevel',
        'dataTraceEnabled': 'boolean',
        'throttlingBurstLimit': '*',
        'throttlingRateLimit': '*',
        'cachingEnabled': 'boolean',
        'cacheTtl': '*',
        'cacheDataEncrypted': 'boolean'
      },
      'retainDeployments': 'boolean',
      'restApiName': '*',
      'parameters': '*',
      'policy': '*',
      'failOnWarnings': 'boolean',
      'domainName': {
        'domainName': '*',
        'certificate': {
          'certificateArn': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'endpointType': 'EndpointType',
        'securityPolicy': 'SecurityPolicy',
        'mtls': {
          'bucket': {
            'bucketArn': '*',
            'bucketName': '*',
            'bucketWebsiteUrl': '*',
            'bucketWebsiteDomainName': '*',
            'bucketDomainName': '*',
            'bucketDualStackDomainName': '*',
            'bucketRegionalDomainName': '*',
            'isWebsite': 'boolean',
            'encryptionKey': {
              'keyArn': '*',
              'keyId': '*'
            },
            'policy': '*',
            'replicationRoleArn': '*'
          },
          'key': '*',
          'version': '*'
        },
        'basePath': '*'
      },
      'cloudWatchRole': 'boolean',
      'cloudWatchRoleRemovalPolicy': 'RemovalPolicy',
      'endpointExportName': '*',
      'endpointTypes': 'EndpointType',
      'disableExecuteApiEndpoint': 'boolean',
      'description': '*'
    },
    'RestApi': {
      'binaryMediaTypes': '*',
      'minimumCompressionSize': '*',
      'minCompressionSize': '*',
      'cloneFrom': {
        'restApiId': '*',
        'restApiName': '*',
        'restApiRootResourceId': '*',
        'latestDeployment': '*',
        'deploymentStage': '*',
        'root': {
          'restApi': '*',
          'resourceId': '*',
          'path': '*',
          'defaultIntegration': '*',
          'defaultMethodOptions': {
            'operationName': '*',
            'authorizationType': 'AuthorizationType',
            'authorizer': {
              'authorizerId': '*',
              'authorizationType': 'AuthorizationType'
            },
            'apiKeyRequired': 'boolean',
            'methodResponses': {
              'statusCode': '*',
              'responseParameters': '*',
              'responseModels': '*'
            },
            'requestParameters': '*',
            'requestModels': '*',
            'requestValidator': {
              'requestValidatorId': '*',
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'authorizationScopes': '*',
            'requestValidatorOptions': {
              'requestValidatorName': '*',
              'validateRequestBody': 'boolean',
              'validateRequestParameters': 'boolean'
            }
          },
          'defaultCorsPreflightOptions': {
            'statusCode': '*',
            'allowOrigins': '*',
            'allowHeaders': '*',
            'allowMethods': '*',
            'allowCredentials': 'boolean',
            'maxAge': '*',
            'disableCache': 'boolean',
            'exposeHeaders': '*'
          }
        }
      },
      'apiKeySourceType': 'ApiKeySourceType',
      'endpointConfiguration': {
        'types': 'EndpointType',
        'vpcEndpoints': {
          'vpcEndpointId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'deploy': 'boolean',
      'deployOptions': {
        'stageName': '*',
        'accessLogDestination': '*',
        'accessLogFormat': '*',
        'tracingEnabled': 'boolean',
        'cacheClusterEnabled': 'boolean',
        'cacheClusterSize': '*',
        'clientCertificateId': '*',
        'description': '*',
        'documentationVersion': '*',
        'variables': '*',
        'methodOptions': '*',
        'metricsEnabled': 'boolean',
        'loggingLevel': 'MethodLoggingLevel',
        'dataTraceEnabled': 'boolean',
        'throttlingBurstLimit': '*',
        'throttlingRateLimit': '*',
        'cachingEnabled': 'boolean',
        'cacheTtl': '*',
        'cacheDataEncrypted': 'boolean'
      },
      'retainDeployments': 'boolean',
      'restApiName': '*',
      'parameters': '*',
      'policy': '*',
      'failOnWarnings': 'boolean',
      'domainName': {
        'domainName': '*',
        'certificate': {
          'certificateArn': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'endpointType': 'EndpointType',
        'securityPolicy': 'SecurityPolicy',
        'mtls': {
          'bucket': {
            'bucketArn': '*',
            'bucketName': '*',
            'bucketWebsiteUrl': '*',
            'bucketWebsiteDomainName': '*',
            'bucketDomainName': '*',
            'bucketDualStackDomainName': '*',
            'bucketRegionalDomainName': '*',
            'isWebsite': 'boolean',
            'encryptionKey': {
              'keyArn': '*',
              'keyId': '*'
            },
            'policy': '*',
            'replicationRoleArn': '*'
          },
          'key': '*',
          'version': '*'
        },
        'basePath': '*'
      },
      'cloudWatchRole': 'boolean',
      'cloudWatchRoleRemovalPolicy': 'RemovalPolicy',
      'endpointExportName': '*',
      'endpointTypes': 'EndpointType',
      'disableExecuteApiEndpoint': 'boolean',
      'description': '*',
      'defaultIntegration': '*',
      'defaultMethodOptions': {
        'operationName': '*',
        'authorizationType': 'AuthorizationType',
        'authorizer': {
          'authorizerId': '*',
          'authorizationType': 'AuthorizationType'
        },
        'apiKeyRequired': 'boolean',
        'methodResponses': {
          'statusCode': '*',
          'responseParameters': '*',
          'responseModels': '*'
        },
        'requestParameters': '*',
        'requestModels': '*',
        'requestValidator': {
          'requestValidatorId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'authorizationScopes': '*',
        'requestValidatorOptions': {
          'requestValidatorName': '*',
          'validateRequestBody': 'boolean',
          'validateRequestParameters': 'boolean'
        }
      },
      'defaultCorsPreflightOptions': {
        'statusCode': '*',
        'allowOrigins': '*',
        'allowHeaders': '*',
        'allowMethods': '*',
        'allowCredentials': 'boolean',
        'maxAge': '*',
        'disableCache': 'boolean',
        'exposeHeaders': '*'
      },
      'addModel': [
        '*',
        {
          'contentType': '*',
          'description': '*',
          'modelName': '*',
          'schema': {
            'schema': 'JsonSchemaVersion',
            'id': '*',
            'ref': '*',
            'type': 'JsonSchemaType',
            'title': '*',
            'description': '*',
            'enum': '*',
            'default': '*',
            'format': '*',
            'definitions': '*',
            'multipleOf': '*',
            'maximum': '*',
            'exclusiveMaximum': 'boolean',
            'minimum': '*',
            'exclusiveMinimum': 'boolean',
            'maxLength': '*',
            'minLength': '*',
            'pattern': '*',
            'maxItems': '*',
            'minItems': '*',
            'uniqueItems': 'boolean',
            'maxProperties': '*',
            'minProperties': '*',
            'required': '*',
            'properties': '*',
            'additionalProperties': 'boolean',
            'patternProperties': '*',
            'dependencies': '*'
          }
        }
      ],
      'addRequestValidator': [
        '*',
        {
          'requestValidatorName': '*',
          'validateRequestBody': 'boolean',
          'validateRequestParameters': 'boolean'
        }
      ],
      '_attachMethod': [
        '*'
      ],
      '_attachDeployment': [
        '*'
      ]
    },
    'RootResource': {},
    'Stage': {
      'deployment': '*',
      'stageName': '*',
      'accessLogDestination': '*',
      'accessLogFormat': '*',
      'tracingEnabled': 'boolean',
      'cacheClusterEnabled': 'boolean',
      'cacheClusterSize': '*',
      'clientCertificateId': '*',
      'description': '*',
      'documentationVersion': '*',
      'variables': '*',
      'methodOptions': '*',
      'metricsEnabled': 'boolean',
      'loggingLevel': 'MethodLoggingLevel',
      'dataTraceEnabled': 'boolean',
      'throttlingBurstLimit': '*',
      'throttlingRateLimit': '*',
      'cachingEnabled': 'boolean',
      'cacheTtl': '*',
      'cacheDataEncrypted': 'boolean'
    },
    'StepFunctionsRestApi': {
      'stateMachine': {
        'stateMachineArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*'
        }
      },
      'requestContext': {
        'accountId': 'boolean',
        'apiId': 'boolean',
        'apiKey': 'boolean',
        'authorizerPrincipalId': 'boolean',
        'caller': 'boolean',
        'cognitoAuthenticationProvider': 'boolean',
        'cognitoAuthenticationType': 'boolean',
        'cognitoIdentityId': 'boolean',
        'cognitoIdentityPoolId': 'boolean',
        'httpMethod': 'boolean',
        'stage': 'boolean',
        'sourceIp': 'boolean',
        'user': 'boolean',
        'userAgent': 'boolean',
        'userArn': 'boolean',
        'requestId': 'boolean',
        'resourceId': 'boolean',
        'resourcePath': 'boolean'
      },
      'querystring': 'boolean',
      'path': 'boolean',
      'headers': 'boolean',
      'authorizer': 'boolean',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'useDefaultMethodResponses': 'boolean',
      'binaryMediaTypes': '*',
      'minimumCompressionSize': '*',
      'minCompressionSize': '*',
      'cloneFrom': {
        'restApiId': '*',
        'restApiName': '*',
        'restApiRootResourceId': '*',
        'latestDeployment': '*',
        'deploymentStage': '*',
        'root': {
          'restApi': '*',
          'resourceId': '*',
          'path': '*',
          'defaultIntegration': '*',
          'defaultMethodOptions': {
            'operationName': '*',
            'authorizationType': 'AuthorizationType',
            'authorizer': {
              'authorizerId': '*',
              'authorizationType': 'AuthorizationType'
            },
            'apiKeyRequired': 'boolean',
            'methodResponses': {
              'statusCode': '*',
              'responseParameters': '*',
              'responseModels': '*'
            },
            'requestParameters': '*',
            'requestModels': '*',
            'requestValidator': {
              'requestValidatorId': '*',
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'authorizationScopes': '*',
            'requestValidatorOptions': {
              'requestValidatorName': '*',
              'validateRequestBody': 'boolean',
              'validateRequestParameters': 'boolean'
            }
          },
          'defaultCorsPreflightOptions': {
            'statusCode': '*',
            'allowOrigins': '*',
            'allowHeaders': '*',
            'allowMethods': '*',
            'allowCredentials': 'boolean',
            'maxAge': '*',
            'disableCache': 'boolean',
            'exposeHeaders': '*'
          }
        }
      },
      'apiKeySourceType': 'ApiKeySourceType',
      'endpointConfiguration': {
        'types': 'EndpointType',
        'vpcEndpoints': {
          'vpcEndpointId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'deploy': 'boolean',
      'deployOptions': {
        'stageName': '*',
        'accessLogDestination': '*',
        'accessLogFormat': '*',
        'tracingEnabled': 'boolean',
        'cacheClusterEnabled': 'boolean',
        'cacheClusterSize': '*',
        'clientCertificateId': '*',
        'description': '*',
        'documentationVersion': '*',
        'variables': '*',
        'methodOptions': '*',
        'metricsEnabled': 'boolean',
        'loggingLevel': 'MethodLoggingLevel',
        'dataTraceEnabled': 'boolean',
        'throttlingBurstLimit': '*',
        'throttlingRateLimit': '*',
        'cachingEnabled': 'boolean',
        'cacheTtl': '*',
        'cacheDataEncrypted': 'boolean'
      },
      'retainDeployments': 'boolean',
      'restApiName': '*',
      'parameters': '*',
      'policy': '*',
      'failOnWarnings': 'boolean',
      'domainName': {
        'domainName': '*',
        'certificate': {
          'certificateArn': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'endpointType': 'EndpointType',
        'securityPolicy': 'SecurityPolicy',
        'mtls': {
          'bucket': {
            'bucketArn': '*',
            'bucketName': '*',
            'bucketWebsiteUrl': '*',
            'bucketWebsiteDomainName': '*',
            'bucketDomainName': '*',
            'bucketDualStackDomainName': '*',
            'bucketRegionalDomainName': '*',
            'isWebsite': 'boolean',
            'encryptionKey': {
              'keyArn': '*',
              'keyId': '*'
            },
            'policy': '*',
            'replicationRoleArn': '*'
          },
          'key': '*',
          'version': '*'
        },
        'basePath': '*'
      },
      'cloudWatchRole': 'boolean',
      'cloudWatchRoleRemovalPolicy': 'RemovalPolicy',
      'endpointExportName': '*',
      'endpointTypes': 'EndpointType',
      'disableExecuteApiEndpoint': 'boolean',
      'description': '*',
      'defaultIntegration': '*',
      'defaultMethodOptions': {
        'operationName': '*',
        'authorizationType': 'AuthorizationType',
        'authorizer': {
          'authorizerId': '*',
          'authorizationType': 'AuthorizationType'
        },
        'apiKeyRequired': 'boolean',
        'methodResponses': {
          'statusCode': '*',
          'responseParameters': '*',
          'responseModels': '*'
        },
        'requestParameters': '*',
        'requestModels': '*',
        'requestValidator': {
          'requestValidatorId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'authorizationScopes': '*',
        'requestValidatorOptions': {
          'requestValidatorName': '*',
          'validateRequestBody': 'boolean',
          'validateRequestParameters': 'boolean'
        }
      },
      'defaultCorsPreflightOptions': {
        'statusCode': '*',
        'allowOrigins': '*',
        'allowHeaders': '*',
        'allowMethods': '*',
        'allowCredentials': 'boolean',
        'maxAge': '*',
        'disableCache': 'boolean',
        'exposeHeaders': '*'
      }
    },
    'UsagePlan': {
      'apiStages': {
        'api': {
          'restApiId': '*',
          'restApiName': '*',
          'restApiRootResourceId': '*',
          'latestDeployment': '*',
          'deploymentStage': '*',
          'root': {
            'restApi': '*',
            'resourceId': '*',
            'path': '*',
            'defaultIntegration': '*',
            'defaultMethodOptions': {
              'operationName': '*',
              'authorizationType': 'AuthorizationType',
              'authorizer': {
                'authorizerId': '*',
                'authorizationType': 'AuthorizationType'
              },
              'apiKeyRequired': 'boolean',
              'methodResponses': {
                'statusCode': '*',
                'responseParameters': '*',
                'responseModels': '*'
              },
              'requestParameters': '*',
              'requestModels': '*',
              'requestValidator': {
                'requestValidatorId': '*',
                'stack': '*',
                'env': {
                  'account': '*',
                  'region': '*'
                },
                'node': '*'
              },
              'authorizationScopes': '*',
              'requestValidatorOptions': {
                'requestValidatorName': '*',
                'validateRequestBody': 'boolean',
                'validateRequestParameters': 'boolean'
              }
            },
            'defaultCorsPreflightOptions': {
              'statusCode': '*',
              'allowOrigins': '*',
              'allowHeaders': '*',
              'allowMethods': '*',
              'allowCredentials': 'boolean',
              'maxAge': '*',
              'disableCache': 'boolean',
              'exposeHeaders': '*'
            }
          }
        },
        'throttle': {
          'method': '*',
          'throttle': {
            'rateLimit': '*',
            'burstLimit': '*'
          }
        }
      },
      'description': '*',
      'quota': {
        'limit': '*',
        'offset': '*',
        'period': 'Period'
      },
      'throttle': {
        'rateLimit': '*',
        'burstLimit': '*'
      },
      'name': '*',
      'apiKey': {
        'keyId': '*',
        'keyArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'addApiStage': [
        {
          'api': {
            'restApiId': '*',
            'restApiName': '*',
            'restApiRootResourceId': '*',
            'latestDeployment': '*',
            'deploymentStage': '*',
            'root': {
              'restApi': '*',
              'resourceId': '*',
              'path': '*',
              'defaultIntegration': '*',
              'defaultMethodOptions': {
                'operationName': '*',
                'authorizationType': 'AuthorizationType',
                'authorizer': {
                  'authorizerId': '*',
                  'authorizationType': 'AuthorizationType'
                },
                'apiKeyRequired': 'boolean',
                'methodResponses': {
                  'statusCode': '*',
                  'responseParameters': '*',
                  'responseModels': '*'
                },
                'requestParameters': '*',
                'requestModels': '*',
                'requestValidator': {
                  'requestValidatorId': '*',
                  'stack': '*',
                  'env': {
                    'account': '*',
                    'region': '*'
                  },
                  'node': '*'
                },
                'authorizationScopes': '*',
                'requestValidatorOptions': {
                  'requestValidatorName': '*',
                  'validateRequestBody': 'boolean',
                  'validateRequestParameters': 'boolean'
                }
              },
              'defaultCorsPreflightOptions': {
                'statusCode': '*',
                'allowOrigins': '*',
                'allowHeaders': '*',
                'allowMethods': '*',
                'allowCredentials': 'boolean',
                'maxAge': '*',
                'disableCache': 'boolean',
                'exposeHeaders': '*'
              }
            }
          },
          'throttle': {
            'method': '*',
            'throttle': {
              'rateLimit': '*',
              'burstLimit': '*'
            }
          }
        }
      ]
    },
    'VpcLink': {
      'vpcLinkName': '*',
      'description': '*',
      'targets': {
        'vpc': {
          'vpcId': '*',
          'vpcArn': '*',
          'vpcCidrBlock': '*',
          'publicSubnets': {
            'availabilityZone': '*',
            'subnetId': '*',
            'internetConnectivityEstablished': '*',
            'ipv4CidrBlock': '*',
            'routeTable': {
              'routeTableId': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'availabilityZones': '*',
          'vpnGatewayId': '*'
        },
        'metrics': '*',
        'securityGroups': '*',
        'ipAddressType': 'IpAddressType',
        'enforceSecurityGroupInboundRulesOnPrivateLinkTraffic': '*',
        'loadBalancerCanonicalHostedZoneId': '*',
        'loadBalancerDnsName': '*',
        'loadBalancerArn': '*',
        'connections': '*'
      },
      'addTargets': [
        {
          'vpc': {
            'vpcId': '*',
            'vpcArn': '*',
            'vpcCidrBlock': '*',
            'publicSubnets': {
              'availabilityZone': '*',
              'subnetId': '*',
              'internetConnectivityEstablished': '*',
              'ipv4CidrBlock': '*',
              'routeTable': {
                'routeTableId': '*'
              },
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'availabilityZones': '*',
            'vpnGatewayId': '*'
          },
          'metrics': '*',
          'securityGroups': '*',
          'ipAddressType': 'IpAddressType',
          'enforceSecurityGroupInboundRulesOnPrivateLinkTraffic': '*',
          'loadBalancerCanonicalHostedZoneId': '*',
          'loadBalancerDnsName': '*',
          'loadBalancerArn': '*',
          'connections': '*'
        }
      ]
    }
  },
  'aws-cdk-lib.aws-appconfig': {
    'Application': {
      'applicationName': '*',
      'description': '*'
    },
    'DeploymentStrategy': {
      'rolloutStrategy': '*',
      'deploymentStrategyName': '*',
      'description': '*'
    },
    'Environment': {
      'application': {
        'description': '*',
        'name': '*',
        'applicationId': '*',
        'applicationArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'environmentName': '*',
      'description': '*',
      'monitors': '*',
      'deletionProtectionCheck': 'DeletionProtectionCheck'
    },
    'Extension': {
      'actions': '*',
      'extensionName': '*',
      'description': '*',
      'latestVersionNumber': '*',
      'parameters': '*'
    }
  },
  'aws-cdk-lib.aws-applicationautoscaling': {
    'ScalableTarget': {
      'minCapacity': '*',
      'maxCapacity': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'resourceId': '*',
      'scalableDimension': '*',
      'serviceNamespace': 'ServiceNamespace',
      'addToRolePolicy': [
        '*'
      ],
      'scaleOnSchedule': [
        '*',
        {
          'schedule': '*',
          'startTime': '*',
          'minCapacity': '*',
          'maxCapacity': '*',
          'timeZone': '*'
        }
      ],
      'scaleOnMetric': [
        '*',
        {
          'metric': {
            'warnings': '*',
            'warningsV2': '*'
          },
          'scalingSteps': {
            'lower': '*',
            'upper': '*',
            'change': '*'
          },
          'adjustmentType': 'AdjustmentType',
          'cooldown': '*',
          'minAdjustmentMagnitude': '*',
          'evaluationPeriods': '*',
          'datapointsToAlarm': '*',
          'metricAggregationType': 'MetricAggregationType'
        }
      ],
      'scaleToTrackMetric': [
        '*',
        {
          'targetValue': '*',
          'predefinedMetric': 'PredefinedMetric',
          'resourceLabel': '*',
          'customMetric': {
            'warnings': '*',
            'warningsV2': '*'
          },
          'policyName': '*',
          'disableScaleIn': 'boolean',
          'scaleInCooldown': '*'
        }
      ]
    }
  },
  'aws-cdk-lib.aws-appmesh': {
    'GatewayRoute': {
      'virtualGateway': {
        'virtualGatewayName': '*',
        'virtualGatewayArn': '*',
        'mesh': {
          'meshName': '*',
          'meshArn': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'gatewayRouteName': '*',
      'routeSpec': '*'
    },
    'Mesh': {
      'meshName': '*',
      'egressFilter': 'MeshFilterType',
      'serviceDiscovery': {
        'ipPreference': 'IpPreference'
      }
    },
    'Route': {
      'mesh': {
        'meshName': '*',
        'meshArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'virtualRouter': {
        'virtualRouterName': '*',
        'virtualRouterArn': '*',
        'mesh': {
          'meshName': '*',
          'meshArn': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'routeName': '*',
      'routeSpec': '*'
    },
    'VirtualGateway': {
      'mesh': {
        'meshName': '*',
        'meshArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'virtualGatewayName': '*',
      'listeners': '*',
      'accessLog': '*',
      'backendDefaults': {
        'tlsClientPolicy': {
          'enforce': 'boolean',
          'ports': '*',
          'validation': {
            'trust': '*',
            'subjectAlternativeNames': '*'
          },
          'mutualTlsCertificate': '*'
        }
      }
    },
    'VirtualNode': {
      'mesh': {
        'meshName': '*',
        'meshArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'virtualNodeName': '*',
      'serviceDiscovery': '*',
      'backends': '*',
      'listeners': '*',
      'accessLog': '*',
      'backendDefaults': {
        'tlsClientPolicy': {
          'enforce': 'boolean',
          'ports': '*',
          'validation': {
            'trust': '*',
            'subjectAlternativeNames': '*'
          },
          'mutualTlsCertificate': '*'
        }
      },
      'addListener': [
        '*'
      ],
      'addBackend': [
        '*'
      ]
    },
    'VirtualRouter': {
      'mesh': {
        'meshName': '*',
        'meshArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'listeners': '*',
      'virtualRouterName': '*'
    },
    'VirtualService': {
      'virtualServiceName': '*',
      'virtualServiceProvider': '*'
    }
  },
  'aws-cdk-lib.aws-appsync': {
    'AppsyncFunction': {
      'api': {
        'apiId': '*',
        'arn': '*',
        'graphQLEndpointArn': '*',
        'visibility': 'Visibility',
        'modes': 'AuthorizationType',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'dataSource': '*',
      'name': '*',
      'description': '*',
      'requestMappingTemplate': '*',
      'responseMappingTemplate': '*',
      'runtime': '*',
      'code': '*',
      'maxBatchSize': '*'
    },
    'ChannelNamespace': {
      'api': {
        'authProviderTypes': 'AppSyncAuthorizationType',
        'httpDns': '*',
        'realtimeDns': '*',
        'apiId': '*',
        'apiArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'channelNamespaceName': '*',
      'code': '*',
      'authorizationConfig': {
        'publishAuthModeTypes': 'AppSyncAuthorizationType',
        'subscribeAuthModeTypes': 'AppSyncAuthorizationType'
      },
      'grantSubscribe': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        }
      ],
      'grantPublish': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        }
      ],
      'grantPublishAndSubscribe': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        }
      ]
    },
    'EventApi': {
      'apiName': '*',
      'authorizationConfig': {
        'authProviders': {
          'authorizationType': 'AppSyncAuthorizationType',
          'cognitoConfig': {
            'userPool': {
              'userPoolId': '*',
              'userPoolArn': '*',
              'userPoolProviderName': '*',
              'identityProviders': {
                'providerName': '*',
                'stack': '*',
                'env': {
                  'account': '*',
                  'region': '*'
                },
                'node': '*'
              }
            },
            'appIdClientRegex': '*'
          },
          'apiKeyConfig': {
            'name': '*',
            'description': '*',
            'expires': '*'
          },
          'openIdConnectConfig': {
            'tokenExpiryFromAuth': '*',
            'tokenExpiryFromIssue': '*',
            'clientId': '*',
            'oidcProvider': '*'
          },
          'lambdaAuthorizerConfig': {
            'handler': {
              'functionName': '*',
              'functionArn': '*',
              'role': {
                'roleArn': '*',
                'roleName': '*',
                'assumeRoleAction': '*',
                'policyFragment': '*',
                'principalAccount': '*',
                'grantPrincipal': {
                  'assumeRoleAction': '*',
                  'principalAccount': '*'
                }
              },
              'isBoundToVpc': 'boolean',
              'latestVersion': {
                'version': '*',
                'edgeArn': '*',
                'functionName': '*',
                'functionArn': '*',
                'isBoundToVpc': 'boolean',
                'architecture': '*',
                'resourceArnsForGrantInvoke': '*',
                'connections': '*'
              },
              'resourceArnsForGrantInvoke': '*'
            },
            'resultsCacheTtl': '*',
            'validationRegex': '*'
          }
        },
        'connectionAuthModeTypes': 'AppSyncAuthorizationType',
        'defaultPublishAuthModeTypes': 'AppSyncAuthorizationType',
        'defaultSubscribeAuthModeTypes': 'AppSyncAuthorizationType'
      },
      'logConfig': {
        'excludeVerboseContent': 'boolean',
        'fieldLogLevel': 'AppSyncFieldLogLevel',
        'role': {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'retention': 'RetentionDays'
      },
      'ownerContact': '*',
      'domainName': {
        'certificate': {
          'certificateArn': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'domainName': '*'
      }
    },
    'GraphqlApi': {
      'name': '*',
      'authorizationConfig': {
        'defaultAuthorization': {
          'authorizationType': 'AuthorizationType',
          'userPoolConfig': {
            'userPool': {
              'userPoolId': '*',
              'userPoolArn': '*',
              'userPoolProviderName': '*',
              'identityProviders': {
                'providerName': '*',
                'stack': '*',
                'env': {
                  'account': '*',
                  'region': '*'
                },
                'node': '*'
              }
            },
            'appIdClientRegex': '*',
            'defaultAction': 'UserPoolDefaultAction'
          },
          'apiKeyConfig': {
            'name': '*',
            'description': '*',
            'expires': '*'
          },
          'openIdConnectConfig': {
            'tokenExpiryFromAuth': '*',
            'tokenExpiryFromIssue': '*',
            'clientId': '*',
            'oidcProvider': '*'
          },
          'lambdaAuthorizerConfig': {
            'handler': {
              'functionName': '*',
              'functionArn': '*',
              'role': {
                'roleArn': '*',
                'roleName': '*',
                'assumeRoleAction': '*',
                'policyFragment': '*',
                'principalAccount': '*',
                'grantPrincipal': {
                  'assumeRoleAction': '*',
                  'principalAccount': '*'
                }
              },
              'isBoundToVpc': 'boolean',
              'latestVersion': {
                'version': '*',
                'edgeArn': '*',
                'functionName': '*',
                'functionArn': '*',
                'isBoundToVpc': 'boolean',
                'architecture': '*',
                'resourceArnsForGrantInvoke': '*',
                'connections': '*'
              },
              'resourceArnsForGrantInvoke': '*'
            },
            'resultsCacheTtl': '*',
            'validationRegex': '*'
          }
        }
      },
      'logConfig': {
        'excludeVerboseContent': 'boolean',
        'fieldLogLevel': 'FieldLogLevel',
        'role': {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'retention': 'RetentionDays'
      },
      'definition': '*',
      'schema': '*',
      'xrayEnabled': 'boolean',
      'visibility': 'Visibility',
      'domainName': {
        'certificate': {
          'certificateArn': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'domainName': '*'
      },
      'introspectionConfig': 'IntrospectionConfig',
      'queryDepthLimit': '*',
      'resolverCountLimit': '*',
      'environmentVariables': '*',
      'ownerContact': '*',
      'addSchemaDependency': [
        '*'
      ],
      'addEnvironmentVariable': [
        '*',
        '*'
      ]
    },
    'SourceApiAssociation': {
      'sourceApi': {
        'apiId': '*',
        'arn': '*',
        'graphQLEndpointArn': '*',
        'visibility': 'Visibility',
        'modes': 'AuthorizationType',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'mergedApi': {
        'apiId': '*',
        'arn': '*',
        'graphQLEndpointArn': '*',
        'visibility': 'Visibility',
        'modes': 'AuthorizationType',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'mergedApiExecutionRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'mergeType': 'MergeType',
      'description': '*'
    }
  },
  'aws-cdk-lib.aws-autoscaling': {
    'AutoScalingGroup': {
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'launchTemplate': {
        'versionNumber': '*',
        'launchTemplateId': '*',
        'launchTemplateName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'mixedInstancesPolicy': {
        'instancesDistribution': {
          'onDemandAllocationStrategy': 'OnDemandAllocationStrategy',
          'onDemandBaseCapacity': '*',
          'onDemandPercentageAboveBaseCapacity': '*',
          'spotAllocationStrategy': 'SpotAllocationStrategy',
          'spotInstancePools': '*',
          'spotMaxPrice': '*'
        },
        'launchTemplate': {
          'versionNumber': '*',
          'launchTemplateId': '*',
          'launchTemplateName': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'launchTemplateOverrides': {
          'instanceRequirements': '*',
          'instanceType': '*',
          'weightedCapacity': '*'
        }
      },
      'instanceType': '*',
      'machineImage': '*',
      'securityGroup': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'userData': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'init': '*',
      'initOptions': {
        'configSets': '*',
        'embedFingerprint': 'boolean',
        'printLog': 'boolean',
        'ignoreFailures': 'boolean',
        'includeUrl': 'boolean',
        'includeRole': 'boolean'
      },
      'requireImdsv2': 'boolean',
      'maxHealthyPercentage': '*',
      'minHealthyPercentage': '*',
      'minCapacity': '*',
      'maxCapacity': '*',
      'desiredCapacity': '*',
      'keyName': '*',
      'keyPair': {
        'keyPairName': '*',
        'type': 'KeyPairType',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'notificationsTopic': {
        'topicArn': '*',
        'topicName': '*',
        'contentBasedDeduplication': 'boolean',
        'fifo': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'notifications': {
        'topic': {
          'topicArn': '*',
          'topicName': '*',
          'contentBasedDeduplication': 'boolean',
          'fifo': 'boolean',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'scalingEvents': '*'
      },
      'allowAllOutbound': 'boolean',
      'updateType': 'UpdateType',
      'rollingUpdateConfiguration': {
        'maxBatchSize': '*',
        'minInstancesInService': '*',
        'minSuccessfulInstancesPercent': '*',
        'pauseTime': '*',
        'waitOnResourceSignals': 'boolean',
        'suspendProcesses': 'ScalingProcess'
      },
      'replacingUpdateMinSuccessfulInstancesPercent': '*',
      'ignoreUnmodifiedSizeProperties': 'boolean',
      'resourceSignalCount': '*',
      'resourceSignalTimeout': '*',
      'cooldown': '*',
      'associatePublicIpAddress': 'boolean',
      'spotPrice': '*',
      'healthCheck': '*',
      'blockDevices': {
        'deviceName': '*',
        'volume': '*',
        'mappingEnabled': 'boolean'
      },
      'maxInstanceLifetime': '*',
      'instanceMonitoring': 'Monitoring',
      'groupMetrics': '*',
      'signals': '*',
      'updatePolicy': '*',
      'newInstancesProtectedFromScaleIn': 'boolean',
      'autoScalingGroupName': '*',
      'terminationPolicies': 'TerminationPolicy',
      'terminationPolicyCustomLambdaFunctionArn': '*',
      'defaultInstanceWarmup': '*',
      'capacityRebalance': 'boolean',
      'ssmSessionPermissions': 'boolean',
      'azCapacityDistributionStrategy': 'CapacityDistributionStrategy',
      'addSecurityGroup': [
        {
          'securityGroupId': '*',
          'allowAllOutbound': 'boolean',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*',
          'canInlineRule': 'boolean',
          'uniqueId': '*',
          'connections': '*'
        }
      ],
      'attachToClassicLB': [
        '*'
      ],
      'attachToApplicationTargetGroup': [
        {
          'metrics': '*',
          'targetGroupName': '*',
          'targetGroupArn': '*',
          'loadBalancerArns': '*',
          'loadBalancerAttached': '*',
          'node': '*'
        }
      ],
      'attachToNetworkTargetGroup': [
        {
          'metrics': '*',
          'targetGroupName': '*',
          'targetGroupArn': '*',
          'loadBalancerArns': '*',
          'loadBalancerAttached': '*',
          'node': '*'
        }
      ],
      'addUserData': [
        '*'
      ],
      'addToRolePolicy': [
        '*'
      ],
      'applyCloudFormationInit': [
        '*',
        {
          'configSets': '*',
          'embedFingerprint': 'boolean',
          'printLog': 'boolean',
          'ignoreFailures': 'boolean',
          'includeUrl': 'boolean',
          'includeRole': 'boolean'
        }
      ],
      'protectNewInstancesFromScaleIn': [],
      'areNewInstancesProtectedFromScaleIn': []
    },
    'LifecycleHook': {
      'autoScalingGroup': {
        'autoScalingGroupName': '*',
        'autoScalingGroupArn': '*',
        'osType': 'OperatingSystemType',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*'
        }
      },
      'lifecycleHookName': '*',
      'defaultResult': 'DefaultResult',
      'heartbeatTimeout': '*',
      'lifecycleTransition': 'LifecycleTransition',
      'notificationMetadata': '*',
      'notificationTarget': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      }
    },
    'ScheduledAction': {
      'autoScalingGroup': {
        'autoScalingGroupName': '*',
        'autoScalingGroupArn': '*',
        'osType': 'OperatingSystemType',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*'
        }
      },
      'timeZone': '*',
      'schedule': '*',
      'startTime': '*',
      'endTime': '*',
      'minCapacity': '*',
      'maxCapacity': '*',
      'desiredCapacity': '*'
    },
    'WarmPool': {
      'autoScalingGroup': {
        'autoScalingGroupName': '*',
        'autoScalingGroupArn': '*',
        'osType': 'OperatingSystemType',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*'
        }
      },
      'reuseOnScaleIn': 'boolean',
      'maxGroupPreparedCapacity': '*',
      'minSize': '*',
      'poolState': 'PoolState'
    }
  },
  'aws-cdk-lib.aws-backup': {
    'BackupPlan': {
      'backupPlanName': '*',
      'backupVault': {
        'backupVaultName': '*',
        'backupVaultArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'backupPlanRules': '*',
      'windowsVss': 'boolean',
      'addRule': [
        '*'
      ],
      'addSelection': [
        '*',
        {
          'resources': '*',
          'backupSelectionName': '*',
          'role': {
            'roleArn': '*',
            'roleName': '*',
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*',
            'grantPrincipal': {
              'assumeRoleAction': '*',
              'principalAccount': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'disableDefaultBackupPolicy': 'boolean',
          'allowRestores': 'boolean'
        }
      ]
    },
    'BackupSelection': {
      'backupPlan': {
        'backupPlanId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'resources': '*',
      'backupSelectionName': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'disableDefaultBackupPolicy': 'boolean',
      'allowRestores': 'boolean'
    },
    'BackupVault': {
      'backupVaultName': '*',
      'accessPolicy': '*',
      'encryptionKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'notificationTopic': {
        'topicArn': '*',
        'topicName': '*',
        'contentBasedDeduplication': 'boolean',
        'fifo': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'notificationEvents': 'BackupVaultEvents',
      'removalPolicy': 'RemovalPolicy',
      'blockRecoveryPointDeletion': [],
      'lockConfiguration': {
        'minRetention': '*'
      },
      'addToAccessPolicy': [
        '*'
      ]
    }
  },
  'aws-cdk-lib.aws-batch': {
    'EcsJobDefinition': {
      'container': {
        'image': '*',
        'cpu': '*',
        'memory': '*',
        'command': '*',
        'environment': '*',
        'executionRole': {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'linuxParameters': '*',
        'logDriverConfig': {
          'logDriver': '*',
          'options': '*',
          'secretOptions': '*'
        },
        'readonlyRootFilesystem': 'boolean',
        'secrets': '*',
        'user': '*',
        'volumes': '*'
      },
      'propagateTags': 'boolean',
      'jobDefinitionName': '*',
      'parameters': '*',
      'retryAttempts': '*',
      'retryStrategies': '*',
      'schedulingPriority': '*',
      'timeout': '*',
      'grantSubmitJob': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        },
        {
          'jobQueueName': '*',
          'jobQueueArn': '*',
          'computeEnvironments': {
            'computeEnvironment': {
              'computeEnvironmentName': '*',
              'computeEnvironmentArn': '*',
              'serviceRole': {
                'roleArn': '*',
                'roleName': '*',
                'assumeRoleAction': '*',
                'policyFragment': '*',
                'principalAccount': '*',
                'grantPrincipal': {
                  'assumeRoleAction': '*',
                  'principalAccount': '*'
                },
                'stack': '*',
                'env': {
                  'account': '*',
                  'region': '*'
                },
                'node': '*'
              },
              'enabled': 'boolean'
            },
            'order': '*'
          },
          'priority': '*',
          'enabled': 'boolean',
          'schedulingPolicy': {
            'schedulingPolicyName': '*',
            'schedulingPolicyArn': '*'
          }
        }
      ]
    },
    'EksJobDefinition': {
      'container': '*',
      'dnsPolicy': 'DnsPolicy',
      'useHostNetwork': 'boolean',
      'serviceAccount': '*',
      'jobDefinitionName': '*',
      'parameters': '*',
      'retryAttempts': '*',
      'retryStrategies': '*',
      'schedulingPriority': '*',
      'timeout': '*'
    },
    'JobQueue': {},
    'ManagedEc2EcsComputeEnvironment': {
      'useOptimalInstanceClasses': 'boolean',
      'images': {
        'imageType': 'EcsMachineImageType',
        'image': '*'
      },
      'allocationStrategy': 'AllocationStrategy',
      'spotBidPercentage': '*',
      'spotFleetRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'instanceTypes': '*',
      'instanceClasses': 'InstanceClass',
      'instanceRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'launchTemplate': {
        'versionNumber': '*',
        'launchTemplateId': '*',
        'launchTemplateName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'minvCpus': '*',
      'placementGroup': {
        'placementGroupName': '*',
        'partitions': '*',
        'spreadLevel': 'PlacementGroupSpreadLevel',
        'strategy': 'PlacementGroupStrategy',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'maxvCpus': '*',
      'replaceComputeEnvironment': 'boolean',
      'spot': 'boolean',
      'updateTimeout': '*',
      'terminateOnUpdate': 'boolean',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'updateToLatestImageVersion': 'boolean',
      'computeEnvironmentName': '*',
      'serviceRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'enabled': 'boolean',
      'addInstanceType': [
        '*'
      ],
      'addInstanceClass': [
        'InstanceClass'
      ]
    },
    'ManagedEc2EksComputeEnvironment': {
      'kubernetesNamespace': '*',
      'eksCluster': {
        'vpc': {
          'vpcId': '*',
          'vpcArn': '*',
          'vpcCidrBlock': '*',
          'publicSubnets': {
            'availabilityZone': '*',
            'subnetId': '*',
            'internetConnectivityEstablished': '*',
            'ipv4CidrBlock': '*',
            'routeTable': {
              'routeTableId': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'availabilityZones': '*',
          'vpnGatewayId': '*'
        },
        'clusterName': '*',
        'clusterArn': '*',
        'clusterEndpoint': '*',
        'clusterCertificateAuthorityData': '*',
        'clusterSecurityGroupId': '*',
        'clusterSecurityGroup': {
          'securityGroupId': '*',
          'allowAllOutbound': 'boolean',
          'canInlineRule': 'boolean',
          'uniqueId': '*',
          'connections': '*'
        },
        'clusterEncryptionConfigKeyArn': '*',
        'openIdConnectProvider': {
          'openIdConnectProviderArn': '*',
          'openIdConnectProviderIssuer': '*'
        },
        'eksPodIdentityAgent': {
          'addonName': '*',
          'addonArn': '*'
        },
        'kubectlRole': {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          }
        },
        'kubectlEnvironment': '*',
        'kubectlLayer': {
          'layerVersionArn': '*',
          'compatibleRuntimes': '*'
        },
        'ipFamily': 'IpFamily',
        'kubectlProvider': {
          'serviceToken': '*',
          'roleArn': '*'
        },
        'kubectlMemory': '*',
        'prune': 'boolean',
        'authenticationMode': 'AuthenticationMode'
      },
      'useOptimalInstanceClasses': 'boolean',
      'images': {
        'imageType': 'EksMachineImageType',
        'image': '*'
      },
      'allocationStrategy': 'AllocationStrategy',
      'spotBidPercentage': '*',
      'instanceTypes': '*',
      'instanceClasses': 'InstanceClass',
      'instanceRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'launchTemplate': {
        'versionNumber': '*',
        'launchTemplateId': '*',
        'launchTemplateName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'minvCpus': '*',
      'placementGroup': {
        'placementGroupName': '*',
        'partitions': '*',
        'spreadLevel': 'PlacementGroupSpreadLevel',
        'strategy': 'PlacementGroupStrategy',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'maxvCpus': '*',
      'replaceComputeEnvironment': 'boolean',
      'spot': 'boolean',
      'updateTimeout': '*',
      'terminateOnUpdate': 'boolean',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'updateToLatestImageVersion': 'boolean',
      'computeEnvironmentName': '*',
      'serviceRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'enabled': 'boolean',
      'addInstanceType': [
        '*'
      ],
      'addInstanceClass': [
        'InstanceClass'
      ]
    },
    'FargateComputeEnvironment': {
      'maxvCpus': '*',
      'replaceComputeEnvironment': 'boolean',
      'spot': 'boolean',
      'updateTimeout': '*',
      'terminateOnUpdate': 'boolean',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'updateToLatestImageVersion': 'boolean',
      'computeEnvironmentName': '*',
      'serviceRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'enabled': 'boolean'
    },
    'MultiNodeJobDefinition': {
      'addContainer': [
        {
          'startNode': '*',
          'endNode': '*',
          'container': {
            'image': '*',
            'cpu': '*',
            'memory': '*',
            'command': '*',
            'environment': '*',
            'executionRole': {
              'roleArn': '*',
              'roleName': '*',
              'assumeRoleAction': '*',
              'policyFragment': '*',
              'principalAccount': '*',
              'grantPrincipal': {
                'assumeRoleAction': '*',
                'principalAccount': '*'
              },
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'linuxParameters': '*',
            'logDriverConfig': {
              'logDriver': '*',
              'options': '*',
              'secretOptions': '*'
            },
            'readonlyRootFilesystem': 'boolean',
            'secrets': '*',
            'user': '*',
            'volumes': '*'
          }
        }
      ]
    },
    'FairshareSchedulingPolicy': {
      'addShare': [
        {
          'shareIdentifier': '*',
          'weightFactor': '*'
        }
      ]
    },
    'UnmanagedComputeEnvironment': {}
  },
  'aws-cdk-lib.aws-certificatemanager': {
    'Certificate': {
      'domainName': '*',
      'subjectAlternativeNames': '*',
      'validationDomains': '*',
      'validationMethod': 'ValidationMethod',
      'validation': '*',
      'transparencyLoggingEnabled': 'boolean',
      'certificateName': '*',
      'keyAlgorithm': '*'
    },
    'DnsValidatedCertificate': {
      'hostedZone': {
        'hostedZoneId': '*',
        'zoneName': '*',
        'hostedZoneArn': '*',
        'hostedZoneNameServers': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'region': '*',
      'route53Endpoint': '*',
      'customResourceRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'cleanupRoute53Records': 'boolean',
      'domainName': '*',
      'subjectAlternativeNames': '*',
      'validationDomains': '*',
      'validationMethod': 'ValidationMethod',
      'validation': '*',
      'transparencyLoggingEnabled': 'boolean',
      'certificateName': '*',
      'keyAlgorithm': '*',
      'applyRemovalPolicy': [
        'RemovalPolicy'
      ]
    },
    'PrivateCertificate': {
      'domainName': '*',
      'subjectAlternativeNames': '*',
      'certificateAuthority': {
        'certificateAuthorityArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'keyAlgorithm': '*'
    }
  },
  'aws-cdk-lib.aws-chatbot': {
    'SlackChannelConfiguration': {
      'slackChannelConfigurationName': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'slackWorkspaceId': '*',
      'slackChannelId': '*',
      'notificationTopics': {
        'topicArn': '*',
        'topicName': '*',
        'contentBasedDeduplication': 'boolean',
        'fifo': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'loggingLevel': 'LoggingLevel',
      'logRetention': 'RetentionDays',
      'logRetentionRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'logRetentionRetryOptions': {
        'maxRetries': '*',
        'base': '*'
      },
      'guardrailPolicies': {
        'managedPolicyArn': '*'
      },
      'userRoleRequired': 'boolean',
      'addNotificationTopic': [
        {
          'topicArn': '*',
          'topicName': '*',
          'contentBasedDeduplication': 'boolean',
          'fifo': 'boolean',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      ]
    }
  },
  'aws-cdk-lib.aws-cloudformation': {
    'CustomResource': {
      'provider': '*',
      'properties': '*',
      'resourceType': '*',
      'removalPolicy': 'RemovalPolicy'
    }
  },
  'aws-cdk-lib.aws-cloudfront': {
    'CachePolicy': {
      'cachePolicyName': '*',
      'comment': '*',
      'defaultTtl': '*',
      'minTtl': '*',
      'maxTtl': '*',
      'cookieBehavior': '*',
      'headerBehavior': '*',
      'queryStringBehavior': '*',
      'enableAcceptEncodingGzip': 'boolean',
      'enableAcceptEncodingBrotli': 'boolean'
    },
    'Distribution': {
      'defaultBehavior': {
        'origin': '*',
        'allowedMethods': '*',
        'cachedMethods': '*',
        'cachePolicy': {
          'cachePolicyId': '*'
        },
        'compress': 'boolean',
        'originRequestPolicy': {
          'originRequestPolicyId': '*'
        },
        'realtimeLogConfig': {
          'realtimeLogConfigName': '*',
          'realtimeLogConfigArn': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'responseHeadersPolicy': {
          'responseHeadersPolicyId': '*'
        },
        'smoothStreaming': 'boolean',
        'viewerProtocolPolicy': 'ViewerProtocolPolicy',
        'functionAssociations': {
          'function': {
            'functionName': '*',
            'functionArn': '*'
          },
          'eventType': 'FunctionEventType'
        },
        'edgeLambdas': {
          'functionVersion': {
            'version': '*',
            'lambda': {
              'functionName': '*',
              'functionArn': '*',
              'role': {
                'roleArn': '*',
                'roleName': '*',
                'assumeRoleAction': '*',
                'policyFragment': '*',
                'principalAccount': '*',
                'grantPrincipal': {
                  'assumeRoleAction': '*',
                  'principalAccount': '*'
                }
              },
              'isBoundToVpc': 'boolean',
              'architecture': '*',
              'resourceArnsForGrantInvoke': '*',
              'connections': '*'
            },
            'edgeArn': '*',
            'functionName': '*',
            'functionArn': '*',
            'isBoundToVpc': 'boolean',
            'resourceArnsForGrantInvoke': '*'
          },
          'eventType': 'LambdaEdgeEventType',
          'includeBody': 'boolean'
        },
        'trustedKeyGroups': {
          'keyGroupId': '*'
        }
      },
      'additionalBehaviors': '*',
      'certificate': {
        'certificateArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'comment': '*',
      'defaultRootObject': '*',
      'domainNames': '*',
      'enabled': 'boolean',
      'enableIpv6': 'boolean',
      'enableLogging': 'boolean',
      'geoRestriction': '*',
      'httpVersion': 'HttpVersion',
      'logBucket': {
        'bucketArn': '*',
        'bucketName': '*',
        'bucketWebsiteUrl': '*',
        'bucketWebsiteDomainName': '*',
        'bucketDomainName': '*',
        'bucketDualStackDomainName': '*',
        'bucketRegionalDomainName': '*',
        'isWebsite': 'boolean',
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'policy': '*',
        'replicationRoleArn': '*'
      },
      'logIncludesCookies': 'boolean',
      'logFilePrefix': '*',
      'priceClass': 'PriceClass',
      'webAclId': '*',
      'errorResponses': {
        'ttl': '*',
        'httpStatus': '*',
        'responseHttpStatus': '*',
        'responsePagePath': '*'
      },
      'minimumProtocolVersion': 'SecurityPolicyProtocol',
      'sslSupportMethod': 'SSLMethod',
      'publishAdditionalMetrics': 'boolean',
      'metric': [
        '*',
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricRequests': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricBytesUploaded': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricBytesDownloaded': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricTotalErrorRate': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metric4xxErrorRate': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metric5xxErrorRate': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricOriginLatency': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricCacheHitRate': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metric401ErrorRate': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metric403ErrorRate': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metric404ErrorRate': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metric502ErrorRate': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metric503ErrorRate': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metric504ErrorRate': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'addBehavior': [
        '*',
        '*',
        {
          'allowedMethods': '*',
          'cachedMethods': '*',
          'cachePolicy': {
            'cachePolicyId': '*'
          },
          'compress': 'boolean',
          'originRequestPolicy': {
            'originRequestPolicyId': '*'
          },
          'realtimeLogConfig': {
            'realtimeLogConfigName': '*',
            'realtimeLogConfigArn': '*',
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'responseHeadersPolicy': {
            'responseHeadersPolicyId': '*'
          },
          'smoothStreaming': 'boolean',
          'viewerProtocolPolicy': 'ViewerProtocolPolicy',
          'functionAssociations': {
            'function': {
              'functionName': '*',
              'functionArn': '*'
            },
            'eventType': 'FunctionEventType'
          },
          'edgeLambdas': {
            'functionVersion': {
              'version': '*',
              'lambda': {
                'functionName': '*',
                'functionArn': '*',
                'role': {
                  'roleArn': '*',
                  'roleName': '*',
                  'assumeRoleAction': '*',
                  'policyFragment': '*',
                  'principalAccount': '*',
                  'grantPrincipal': {
                    'assumeRoleAction': '*',
                    'principalAccount': '*'
                  }
                },
                'isBoundToVpc': 'boolean',
                'architecture': '*',
                'resourceArnsForGrantInvoke': '*',
                'connections': '*'
              },
              'edgeArn': '*',
              'functionName': '*',
              'functionArn': '*',
              'isBoundToVpc': 'boolean',
              'resourceArnsForGrantInvoke': '*'
            },
            'eventType': 'LambdaEdgeEventType',
            'includeBody': 'boolean'
          },
          'trustedKeyGroups': {
            'keyGroupId': '*'
          }
        }
      ],
      'grant': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        },
        '*'
      ],
      'grantCreateInvalidation': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        }
      ],
      'attachWebAclId': [
        '*'
      ]
    },
    'Function': {
      'functionName': '*',
      'comment': '*',
      'code': '*',
      'runtime': '*',
      'keyValueStore': {
        'keyValueStoreArn': '*',
        'keyValueStoreId': '*',
        'keyValueStoreStatus': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'autoPublish': 'boolean'
    },
    'KeyGroup': {
      'keyGroupName': '*',
      'comment': '*',
      'items': {
        'publicKeyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      }
    },
    'KeyValueStore': {},
    'S3OriginAccessControl': {
      'description': '*',
      'originAccessControlName': '*',
      'signing': '*'
    },
    'FunctionUrlOriginAccessControl': {
      'description': '*',
      'originAccessControlName': '*',
      'signing': '*'
    },
    'OriginAccessIdentity': {},
    'OriginRequestPolicy': {
      'originRequestPolicyName': '*',
      'comment': '*',
      'cookieBehavior': '*',
      'headerBehavior': '*',
      'queryStringBehavior': '*'
    },
    'PublicKey': {
      'publicKeyName': '*',
      'comment': '*',
      'encodedKey': '*'
    },
    'RealtimeLogConfig': {
      'realtimeLogConfigName': '*',
      'fields': '*',
      'samplingRate': '*',
      'endPoints': '*'
    },
    'ResponseHeadersPolicy': {
      'responseHeadersPolicyName': '*',
      'comment': '*',
      'corsBehavior': {
        'accessControlAllowCredentials': 'boolean',
        'accessControlAllowHeaders': '*',
        'accessControlAllowMethods': '*',
        'accessControlAllowOrigins': '*',
        'accessControlExposeHeaders': '*',
        'accessControlMaxAge': '*',
        'originOverride': 'boolean'
      },
      'customHeadersBehavior': {
        'customHeaders': {
          'header': '*',
          'override': 'boolean',
          'value': '*'
        }
      },
      'securityHeadersBehavior': {
        'contentSecurityPolicy': {
          'contentSecurityPolicy': '*',
          'override': 'boolean'
        },
        'contentTypeOptions': {
          'override': 'boolean'
        },
        'frameOptions': {
          'frameOption': 'HeadersFrameOption',
          'override': 'boolean'
        },
        'referrerPolicy': {
          'referrerPolicy': 'HeadersReferrerPolicy',
          'override': 'boolean'
        },
        'strictTransportSecurity': {
          'accessControlMaxAge': '*',
          'includeSubdomains': 'boolean',
          'override': 'boolean',
          'preload': 'boolean'
        },
        'xssProtection': {
          'modeBlock': 'boolean',
          'override': 'boolean',
          'protection': 'boolean',
          'reportUri': '*'
        }
      },
      'removeHeaders': '*',
      'serverTimingSamplingRate': '*'
    },
    'CloudFrontWebDistribution': {
      'aliasConfiguration': {
        'acmCertRef': '*',
        'names': '*',
        'sslMethod': 'SSLMethod',
        'securityPolicy': 'SecurityPolicyProtocol'
      },
      'comment': '*',
      'enabled': 'boolean',
      'defaultRootObject': '*',
      'enableIpV6': 'boolean',
      'httpVersion': 'HttpVersion',
      'priceClass': 'PriceClass',
      'viewerProtocolPolicy': 'ViewerProtocolPolicy',
      'originConfigs': {
        'connectionAttempts': '*',
        'connectionTimeout': '*',
        's3OriginSource': {
          's3BucketSource': {
            'bucketArn': '*',
            'bucketName': '*',
            'bucketWebsiteUrl': '*',
            'bucketWebsiteDomainName': '*',
            'bucketDomainName': '*',
            'bucketDualStackDomainName': '*',
            'bucketRegionalDomainName': '*',
            'isWebsite': 'boolean',
            'encryptionKey': {
              'keyArn': '*',
              'keyId': '*',
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'policy': '*',
            'replicationRoleArn': '*'
          },
          'originAccessIdentity': {
            'originAccessIdentityName': '*',
            'originAccessIdentityId': '*',
            'grantPrincipal': {
              'assumeRoleAction': '*',
              'policyFragment': '*',
              'principalAccount': '*'
            }
          },
          'originPath': '*',
          'originHeaders': '*',
          'originShieldRegion': '*'
        },
        'customOriginSource': {
          'domainName': '*',
          'httpPort': '*',
          'httpsPort': '*',
          'originProtocolPolicy': 'OriginProtocolPolicy',
          'allowedOriginSSLVersions': 'OriginSslPolicy',
          'originPath': '*',
          'originHeaders': '*',
          'originShieldRegion': '*'
        },
        'failoverCriteriaStatusCodes': 'FailoverStatusCode',
        'behaviors': {
          'compress': 'boolean',
          'isDefaultBehavior': 'boolean',
          'trustedSigners': '*',
          'trustedKeyGroups': {
            'keyGroupId': '*'
          },
          'allowedMethods': 'CloudFrontAllowedMethods',
          'pathPattern': '*',
          'cachedMethods': 'CloudFrontAllowedCachedMethods',
          'forwardedValues': '*',
          'lambdaFunctionAssociations': {
            'eventType': 'LambdaEdgeEventType',
            'lambdaFunction': {
              'version': '*',
              'lambda': {
                'functionName': '*',
                'functionArn': '*',
                'role': {
                  'roleArn': '*',
                  'roleName': '*',
                  'assumeRoleAction': '*',
                  'principalAccount': '*'
                },
                'isBoundToVpc': 'boolean',
                'architecture': '*',
                'resourceArnsForGrantInvoke': '*',
                'connections': '*'
              },
              'edgeArn': '*',
              'functionName': '*',
              'functionArn': '*',
              'isBoundToVpc': 'boolean',
              'resourceArnsForGrantInvoke': '*'
            },
            'includeBody': 'boolean'
          },
          'functionAssociations': {
            'function': {
              'functionName': '*',
              'functionArn': '*'
            },
            'eventType': 'FunctionEventType'
          },
          'viewerProtocolPolicy': 'ViewerProtocolPolicy'
        },
        'originPath': '*',
        'originHeaders': '*',
        'originShieldRegion': '*'
      },
      'loggingConfig': {
        'bucket': {
          'bucketArn': '*',
          'bucketName': '*',
          'bucketWebsiteUrl': '*',
          'bucketWebsiteDomainName': '*',
          'bucketDomainName': '*',
          'bucketDualStackDomainName': '*',
          'bucketRegionalDomainName': '*',
          'isWebsite': 'boolean',
          'encryptionKey': {
            'keyArn': '*',
            'keyId': '*',
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'policy': '*',
          'replicationRoleArn': '*'
        },
        'includeCookies': 'boolean',
        'prefix': '*'
      },
      'errorConfigurations': '*',
      'webACLId': '*',
      'viewerCertificate': '*',
      'geoRestriction': '*',
      'grant': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        },
        '*'
      ]
    }
  },
  'aws-cdk-lib.aws-cloudtrail': {
    'Trail': {
      'includeGlobalServiceEvents': 'boolean',
      'isMultiRegionTrail': 'boolean',
      'managementEvents': 'ReadWriteType',
      'enableFileValidation': 'boolean',
      'sendToCloudWatchLogs': 'boolean',
      'cloudWatchLogsRetention': 'RetentionDays',
      'cloudWatchLogGroup': {
        'logGroupArn': '*',
        'logGroupName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'kmsKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'encryptionKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'snsTopic': {
        'topicArn': '*',
        'topicName': '*',
        'contentBasedDeduplication': 'boolean',
        'fifo': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'trailName': '*',
      's3KeyPrefix': '*',
      'bucket': {
        'bucketArn': '*',
        'bucketName': '*',
        'bucketWebsiteUrl': '*',
        'bucketWebsiteDomainName': '*',
        'bucketDomainName': '*',
        'bucketDualStackDomainName': '*',
        'bucketRegionalDomainName': '*',
        'isWebsite': 'boolean',
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'policy': '*',
        'replicationRoleArn': '*'
      },
      'isOrganizationTrail': 'boolean',
      'orgId': '*',
      'insightTypes': '*',
      'addEventSelector': [
        'DataResourceType',
        '*',
        {
          'readWriteType': 'ReadWriteType',
          'includeManagementEvents': 'boolean',
          'excludeManagementEventSources': 'ManagementEventSources'
        }
      ],
      'addLambdaEventSelector': [
        {
          'functionName': '*',
          'functionArn': '*',
          'role': {
            'roleArn': '*',
            'roleName': '*',
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*',
            'grantPrincipal': {
              'assumeRoleAction': '*',
              'principalAccount': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'isBoundToVpc': 'boolean',
          'latestVersion': {
            'version': '*',
            'edgeArn': '*',
            'functionName': '*',
            'functionArn': '*',
            'isBoundToVpc': 'boolean',
            'architecture': '*',
            'resourceArnsForGrantInvoke': '*',
            'connections': '*'
          },
          'resourceArnsForGrantInvoke': '*'
        },
        {
          'readWriteType': 'ReadWriteType',
          'includeManagementEvents': 'boolean',
          'excludeManagementEventSources': 'ManagementEventSources'
        }
      ],
      'logAllLambdaDataEvents': [
        {
          'readWriteType': 'ReadWriteType',
          'includeManagementEvents': 'boolean',
          'excludeManagementEventSources': 'ManagementEventSources'
        }
      ],
      'addS3EventSelector': [
        {
          'bucket': {
            'bucketArn': '*',
            'bucketName': '*',
            'bucketWebsiteUrl': '*',
            'bucketWebsiteDomainName': '*',
            'bucketDomainName': '*',
            'bucketDualStackDomainName': '*',
            'bucketRegionalDomainName': '*',
            'isWebsite': 'boolean',
            'encryptionKey': {
              'keyArn': '*',
              'keyId': '*',
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'policy': '*',
            'replicationRoleArn': '*'
          },
          'objectPrefix': '*'
        },
        {
          'readWriteType': 'ReadWriteType',
          'includeManagementEvents': 'boolean',
          'excludeManagementEventSources': 'ManagementEventSources'
        }
      ],
      'logAllS3DataEvents': [
        {
          'readWriteType': 'ReadWriteType',
          'includeManagementEvents': 'boolean',
          'excludeManagementEventSources': 'ManagementEventSources'
        }
      ],
      'onCloudTrailEvent': [
        '*',
        {
          'target': '*',
          'description': '*',
          'ruleName': '*',
          'eventPattern': {
            'version': '*',
            'id': '*',
            'detailType': '*',
            'source': '*',
            'account': '*',
            'time': '*',
            'region': '*',
            'resources': '*',
            'detail': '*'
          },
          'crossStackScope': '*'
        }
      ]
    }
  },
  'aws-cdk-lib.aws-cloudwatch': {
    'Alarm': {
      'metric': {
        'warnings': '*',
        'warningsV2': '*'
      },
      'period': '*',
      'statistic': '*',
      'alarmName': '*',
      'alarmDescription': '*',
      'comparisonOperator': 'ComparisonOperator',
      'threshold': '*',
      'evaluationPeriods': '*',
      'evaluateLowSampleCountPercentile': '*',
      'treatMissingData': 'TreatMissingData',
      'actionsEnabled': 'boolean',
      'datapointsToAlarm': '*',
      'toAnnotation': [],
      'addAlarmAction': [
        '*'
      ]
    },
    'CompositeAlarm': {
      'actionsEnabled': 'boolean',
      'alarmDescription': '*',
      'compositeAlarmName': '*',
      'alarmRule': '*',
      'actionsSuppressor': {
        'alarmArn': '*',
        'alarmName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'actionsSuppressorExtensionPeriod': '*',
      'actionsSuppressorWaitPeriod': '*'
    },
    'Dashboard': {
      'dashboardName': '*',
      'defaultInterval': '*',
      'start': '*',
      'end': '*',
      'periodOverride': 'PeriodOverride',
      'widgets': {
        'width': '*',
        'height': '*',
        'warnings': '*',
        'warningsV2': '*'
      },
      'variables': '*',
      'addWidgets': [
        {
          'width': '*',
          'height': '*',
          'warnings': '*',
          'warningsV2': '*'
        }
      ],
      'addVariable': [
        '*'
      ]
    }
  },
  'aws-cdk-lib.aws-codebuild': {
    'Fleet': {
      'fleetName': '*',
      'baseCapacity': '*',
      'computeType': 'FleetComputeType',
      'environmentType': 'EnvironmentType'
    },
    'PipelineProject': {},
    'Project': {
      'source': {
        'identifier': '*',
        'type': '*',
        'badgeSupported': 'boolean'
      },
      'artifacts': {
        'identifier': '*',
        'type': '*'
      },
      'secondarySources': {
        'identifier': '*',
        'type': '*',
        'badgeSupported': 'boolean'
      },
      'secondaryArtifacts': {
        'identifier': '*',
        'type': '*'
      },
      'description': '*',
      'buildSpec': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'encryptionKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'cache': '*',
      'environment': {
        'buildImage': {
          'type': '*',
          'imageId': '*',
          'defaultComputeType': 'ComputeType',
          'imagePullPrincipalType': 'ImagePullPrincipalType',
          'secretsManagerCredentials': {
            'encryptionKey': {
              'keyArn': '*',
              'keyId': '*',
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'secretArn': '*',
            'secretFullArn': '*',
            'secretName': '*',
            'secretValue': '*'
          },
          'repository': {
            'repositoryName': '*',
            'repositoryArn': '*',
            'repositoryUri': '*',
            'registryUri': '*'
          }
        },
        'computeType': 'ComputeType',
        'fleet': {
          'fleetArn': '*',
          'fleetName': '*',
          'computeType': 'FleetComputeType',
          'environmentType': 'EnvironmentType'
        },
        'privileged': 'boolean',
        'certificate': {
          'bucket': {
            'bucketArn': '*',
            'bucketName': '*',
            'bucketWebsiteUrl': '*',
            'bucketWebsiteDomainName': '*',
            'bucketDomainName': '*',
            'bucketDualStackDomainName': '*',
            'bucketRegionalDomainName': '*',
            'isWebsite': 'boolean',
            'policy': '*',
            'replicationRoleArn': '*'
          },
          'objectKey': '*'
        },
        'environmentVariables': '*'
      },
      'badge': 'boolean',
      'timeout': '*',
      'environmentVariables': '*',
      'checkSecretsInPlainTextEnvVariables': 'boolean',
      'projectName': '*',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'subnetSelection': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'allowAllOutbound': 'boolean',
      'fileSystemLocations': '*',
      'grantReportGroupPermissions': 'boolean',
      'logging': {
        's3': {
          'encrypted': 'boolean',
          'bucket': {
            'bucketArn': '*',
            'bucketName': '*',
            'bucketWebsiteUrl': '*',
            'bucketWebsiteDomainName': '*',
            'bucketDomainName': '*',
            'bucketDualStackDomainName': '*',
            'bucketRegionalDomainName': '*',
            'isWebsite': 'boolean',
            'encryptionKey': {
              'keyArn': '*',
              'keyId': '*',
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'policy': '*',
            'replicationRoleArn': '*'
          },
          'prefix': '*',
          'enabled': 'boolean'
        },
        'cloudWatch': {
          'logGroup': {
            'logGroupArn': '*',
            'logGroupName': '*'
          },
          'prefix': '*',
          'enabled': 'boolean'
        }
      },
      'queuedTimeout': '*',
      'concurrentBuildLimit': '*',
      'ssmSessionPermissions': 'boolean',
      'visibility': 'ProjectVisibility',
      'autoRetryLimit': '*',
      'enableBatchBuilds': [],
      'addSecondarySource': [
        {
          'identifier': '*',
          'type': '*',
          'badgeSupported': 'boolean'
        }
      ],
      'addFileSystemLocation': [
        '*'
      ],
      'addSecondaryArtifact': [
        {
          'identifier': '*',
          'type': '*'
        }
      ],
      'bindToCodePipeline': [
        '*',
        {
          'artifactBucket': {
            'bucketArn': '*',
            'bucketName': '*',
            'bucketWebsiteUrl': '*',
            'bucketWebsiteDomainName': '*',
            'bucketDomainName': '*',
            'bucketDualStackDomainName': '*',
            'bucketRegionalDomainName': '*',
            'isWebsite': 'boolean',
            'encryptionKey': {
              'keyArn': '*',
              'keyId': '*',
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'policy': '*',
            'replicationRoleArn': '*'
          }
        }
      ]
    },
    'ReportGroup': {
      'reportGroupName': '*',
      'exportBucket': {
        'bucketArn': '*',
        'bucketName': '*',
        'bucketWebsiteUrl': '*',
        'bucketWebsiteDomainName': '*',
        'bucketDomainName': '*',
        'bucketDualStackDomainName': '*',
        'bucketRegionalDomainName': '*',
        'isWebsite': 'boolean',
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'policy': '*',
        'replicationRoleArn': '*'
      },
      'zipExport': 'boolean',
      'removalPolicy': 'RemovalPolicy',
      'type': 'ReportGroupType',
      'deleteReports': 'boolean'
    },
    'GitHubSourceCredentials': {
      'accessToken': '*'
    },
    'GitHubEnterpriseSourceCredentials': {
      'accessToken': '*'
    },
    'BitBucketSourceCredentials': {
      'username': '*',
      'password': '*'
    },
    'UntrustedCodeBoundaryPolicy': {
      'managedPolicyName': '*',
      'additionalStatements': '*'
    }
  },
  'aws-cdk-lib.aws-codecommit': {
    'Repository': {
      'repositoryName': '*',
      'description': '*',
      'code': '*',
      'kmsKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'notify': [
        '*',
        {
          'name': '*',
          'events': 'RepositoryEventTrigger',
          'branches': '*',
          'customData': '*'
        }
      ]
    }
  },
  'aws-cdk-lib.aws-codeguruprofiler': {
    'ProfilingGroup': {
      'profilingGroupName': '*',
      'computePlatform': 'ComputePlatform'
    }
  },
  'aws-cdk-lib.aws-codepipeline': {
    'Pipeline': {
      'artifactBucket': {
        'bucketArn': '*',
        'bucketName': '*',
        'bucketWebsiteUrl': '*',
        'bucketWebsiteDomainName': '*',
        'bucketDomainName': '*',
        'bucketDualStackDomainName': '*',
        'bucketRegionalDomainName': '*',
        'isWebsite': 'boolean',
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'policy': '*',
        'replicationRoleArn': '*'
      },
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'restartExecutionOnUpdate': 'boolean',
      'pipelineName': '*',
      'crossRegionReplicationBuckets': '*',
      'stages': {
        'stageName': '*',
        'actions': {
          'actionProperties': {
            'actionName': '*',
            'role': {
              'roleArn': '*',
              'roleName': '*',
              'assumeRoleAction': '*',
              'policyFragment': '*',
              'principalAccount': '*',
              'grantPrincipal': {
                'assumeRoleAction': '*',
                'principalAccount': '*'
              },
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'region': '*',
            'account': '*',
            'resource': '*',
            'category': 'ActionCategory',
            'provider': '*',
            'owner': '*',
            'version': '*',
            'runOrder': '*',
            'artifactBounds': {
              'minInputs': '*',
              'maxInputs': '*',
              'minOutputs': '*',
              'maxOutputs': '*'
            },
            'inputs': '*',
            'variablesNamespace': '*'
          }
        },
        'transitionToEnabled': 'boolean',
        'transitionDisabledReason': '*'
      },
      'crossAccountKeys': 'boolean',
      'enableKeyRotation': 'boolean',
      'reuseCrossRegionSupportStacks': 'boolean',
      'pipelineType': 'PipelineType',
      'variables': '*',
      'triggers': {
        'providerType': 'ProviderType',
        'gitConfiguration': {
          'sourceAction': {
            'actionProperties': {
              'actionName': '*',
              'role': {
                'roleArn': '*',
                'roleName': '*',
                'assumeRoleAction': '*',
                'policyFragment': '*',
                'principalAccount': '*',
                'grantPrincipal': {
                  'assumeRoleAction': '*',
                  'principalAccount': '*'
                },
                'stack': '*',
                'env': {
                  'account': '*',
                  'region': '*'
                },
                'node': '*'
              },
              'region': '*',
              'account': '*',
              'resource': '*',
              'category': 'ActionCategory',
              'provider': '*',
              'owner': '*',
              'version': '*',
              'runOrder': '*',
              'artifactBounds': {
                'minInputs': '*',
                'maxInputs': '*',
                'minOutputs': '*',
                'maxOutputs': '*'
              },
              'inputs': '*',
              'variablesNamespace': '*'
            }
          },
          'pushFilter': {
            'tagsExcludes': '*',
            'tagsIncludes': '*'
          },
          'pullRequestFilter': {
            'branchesExcludes': '*',
            'branchesIncludes': '*',
            'filePathsExcludes': '*',
            'filePathsIncludes': '*',
            'events': 'GitPullRequestEvent'
          }
        }
      },
      'executionMode': 'ExecutionMode',
      'addStage': [
        {
          'placement': {
            'rightBefore': {
              'stageName': '*',
              'pipeline': {
                'pipelineName': '*',
                'pipelineArn': '*',
                'stack': '*',
                'env': {
                  'account': '*',
                  'region': '*'
                },
                'node': '*'
              },
              'actions': {
                'actionProperties': {
                  'actionName': '*',
                  'role': {
                    'roleArn': '*',
                    'roleName': '*',
                    'assumeRoleAction': '*',
                    'policyFragment': '*',
                    'principalAccount': '*',
                    'grantPrincipal': {
                      'assumeRoleAction': '*',
                      'principalAccount': '*'
                    }
                  },
                  'region': '*',
                  'account': '*',
                  'resource': '*',
                  'category': 'ActionCategory',
                  'provider': '*',
                  'owner': '*',
                  'version': '*',
                  'runOrder': '*',
                  'artifactBounds': {
                    'minInputs': '*',
                    'maxInputs': '*',
                    'minOutputs': '*',
                    'maxOutputs': '*'
                  },
                  'inputs': '*',
                  'variablesNamespace': '*'
                }
              }
            }
          },
          'stageName': '*',
          'transitionToEnabled': 'boolean',
          'transitionDisabledReason': '*'
        }
      ],
      'addToRolePolicy': [
        '*'
      ],
      'addVariable': [
        '*'
      ],
      'addTrigger': [
        {
          'providerType': 'ProviderType',
          'gitConfiguration': {
            'sourceAction': {
              'actionProperties': {
                'actionName': '*',
                'role': {
                  'roleArn': '*',
                  'roleName': '*',
                  'assumeRoleAction': '*',
                  'policyFragment': '*',
                  'principalAccount': '*',
                  'grantPrincipal': {
                    'assumeRoleAction': '*',
                    'principalAccount': '*'
                  },
                  'stack': '*',
                  'env': {
                    'account': '*',
                    'region': '*'
                  },
                  'node': '*'
                },
                'region': '*',
                'account': '*',
                'resource': '*',
                'category': 'ActionCategory',
                'provider': '*',
                'owner': '*',
                'version': '*',
                'runOrder': '*',
                'artifactBounds': {
                  'minInputs': '*',
                  'maxInputs': '*',
                  'minOutputs': '*',
                  'maxOutputs': '*'
                },
                'inputs': '*',
                'variablesNamespace': '*'
              }
            },
            'pushFilter': {
              'tagsExcludes': '*',
              'tagsIncludes': '*'
            },
            'pullRequestFilter': {
              'branchesExcludes': '*',
              'branchesIncludes': '*',
              'filePathsExcludes': '*',
              'filePathsIncludes': '*',
              'events': 'GitPullRequestEvent'
            }
          }
        }
      ],
      'stage': [
        '*'
      ],
      '_attachActionToPipeline': [
        '*',
        {
          'actionProperties': {
            'actionName': '*',
            'role': {
              'roleArn': '*',
              'roleName': '*',
              'assumeRoleAction': '*',
              'policyFragment': '*',
              'principalAccount': '*',
              'grantPrincipal': {
                'assumeRoleAction': '*',
                'principalAccount': '*'
              },
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'region': '*',
            'account': '*',
            'resource': '*',
            'category': 'ActionCategory',
            'provider': '*',
            'owner': '*',
            'version': '*',
            'runOrder': '*',
            'artifactBounds': {
              'minInputs': '*',
              'maxInputs': '*',
              'minOutputs': '*',
              'maxOutputs': '*'
            },
            'inputs': '*',
            'variablesNamespace': '*'
          }
        },
        '*'
      ]
    }
  },
  'aws-cdk-lib.aws-codestarnotifications': {
    'NotificationRule': {
      'events': '*',
      'source': '*',
      'targets': '*',
      'notificationRuleName': '*',
      'enabled': 'boolean',
      'detailType': 'DetailType',
      'createdBy': '*',
      'addTarget': [
        '*'
      ]
    }
  },
  'aws-cdk-lib.aws-cognito': {
    'UserPoolClient': {
      'userPool': {
        'userPoolId': '*',
        'userPoolArn': '*',
        'userPoolProviderName': '*',
        'identityProviders': {
          'providerName': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'userPoolClientName': '*',
      'generateSecret': 'boolean',
      'authFlows': {
        'adminUserPassword': 'boolean',
        'custom': 'boolean',
        'userPassword': 'boolean',
        'userSrp': 'boolean',
        'user': 'boolean'
      },
      'disableOAuth': 'boolean',
      'oAuth': {
        'flows': {
          'authorizationCodeGrant': 'boolean',
          'implicitCodeGrant': 'boolean',
          'clientCredentials': 'boolean'
        },
        'callbackUrls': '*',
        'logoutUrls': '*',
        'scopes': '*',
        'defaultRedirectUri': '*'
      },
      'authSessionValidity': '*',
      'preventUserExistenceErrors': 'boolean',
      'supportedIdentityProviders': '*',
      'idTokenValidity': '*',
      'refreshTokenValidity': '*',
      'accessTokenValidity': '*',
      'readAttributes': '*',
      'writeAttributes': '*',
      'enableTokenRevocation': 'boolean',
      'enablePropagateAdditionalUserContextData': 'boolean'
    },
    'UserPoolDomain': {
      'userPool': {
        'userPoolId': '*',
        'userPoolArn': '*',
        'userPoolProviderName': '*',
        'identityProviders': {
          'providerName': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'customDomain': {
        'domainName': '*',
        'certificate': {
          'certificateArn': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'cognitoDomain': {
        'domainPrefix': '*'
      },
      'managedLoginVersion': 'ManagedLoginVersion',
      'baseUrl': [
        {
          'fips': 'boolean'
        }
      ],
      'signInUrl': [
        '*',
        {
          'redirectUri': '*',
          'signInPath': '*',
          'fips': 'boolean'
        }
      ]
    },
    'UserPoolGroup': {
      'userPool': {
        'userPoolId': '*',
        'userPoolArn': '*',
        'userPoolProviderName': '*',
        'identityProviders': {
          'providerName': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'description': '*',
      'groupName': '*',
      'precedence': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      }
    },
    'UserPoolResourceServer': {
      'userPool': {
        'userPoolId': '*',
        'userPoolArn': '*',
        'userPoolProviderName': '*',
        'identityProviders': {
          'providerName': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'identifier': '*',
      'userPoolResourceServerName': '*',
      'scopes': '*'
    },
    'UserPool': {
      'userPoolName': '*',
      'selfSignUpEnabled': 'boolean',
      'userVerification': {
        'emailSubject': '*',
        'emailBody': '*',
        'emailStyle': 'VerificationEmailStyle',
        'smsMessage': '*'
      },
      'userInvitation': {
        'emailSubject': '*',
        'emailBody': '*',
        'smsMessage': '*'
      },
      'smsRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'smsRoleExternalId': '*',
      'snsRegion': '*',
      'enableSmsRole': 'boolean',
      'signInAliases': {
        'username': 'boolean',
        'email': 'boolean',
        'phone': 'boolean',
        'preferredUsername': 'boolean'
      },
      'autoVerify': {
        'email': 'boolean',
        'phone': 'boolean'
      },
      'keepOriginal': {
        'email': 'boolean',
        'phone': 'boolean'
      },
      'standardAttributes': {
        'address': {
          'mutable': 'boolean',
          'required': 'boolean'
        }
      },
      'customAttributes': '*',
      'mfa': 'Mfa',
      'mfaMessage': '*',
      'mfaSecondFactor': {
        'sms': 'boolean',
        'otp': 'boolean',
        'email': 'boolean'
      },
      'passwordPolicy': {
        'tempPasswordValidity': '*',
        'minLength': '*',
        'requireLowercase': 'boolean',
        'requireUppercase': 'boolean',
        'requireDigits': 'boolean',
        'requireSymbols': 'boolean',
        'passwordHistorySize': '*'
      },
      'emailSettings': {
        'from': '*',
        'replyTo': '*'
      },
      'email': '*',
      'lambdaTriggers': {
        'createAuthChallenge': {
          'functionName': '*',
          'functionArn': '*',
          'role': {
            'roleArn': '*',
            'roleName': '*',
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*',
            'grantPrincipal': {
              'assumeRoleAction': '*',
              'principalAccount': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'isBoundToVpc': 'boolean',
          'latestVersion': {
            'version': '*',
            'edgeArn': '*',
            'functionName': '*',
            'functionArn': '*',
            'isBoundToVpc': 'boolean',
            'architecture': '*',
            'resourceArnsForGrantInvoke': '*',
            'connections': '*'
          },
          'resourceArnsForGrantInvoke': '*'
        }
      },
      'signInCaseSensitive': 'boolean',
      'accountRecovery': 'AccountRecovery',
      'removalPolicy': 'RemovalPolicy',
      'deletionProtection': 'boolean',
      'deviceTracking': {
        'challengeRequiredOnNewDevice': 'boolean',
        'deviceOnlyRememberedOnUserPrompt': 'boolean'
      },
      'customSenderKmsKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'advancedSecurityMode': 'AdvancedSecurityMode',
      'featurePlan': 'FeaturePlan',
      'addTrigger': [
        '*',
        {
          'functionName': '*',
          'functionArn': '*',
          'role': {
            'roleArn': '*',
            'roleName': '*',
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*',
            'grantPrincipal': {
              'assumeRoleAction': '*',
              'principalAccount': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'isBoundToVpc': 'boolean',
          'latestVersion': {
            'version': '*',
            'edgeArn': '*',
            'functionName': '*',
            'functionArn': '*',
            'isBoundToVpc': 'boolean',
            'architecture': '*',
            'resourceArnsForGrantInvoke': '*',
            'connections': '*'
          },
          'resourceArnsForGrantInvoke': '*'
        },
        'LambdaVersion'
      ]
    }
  },
  'aws-cdk-lib.aws-config': {
    'AccessKeysRotated': {
      'maxAge': '*',
      'configRuleName': '*',
      'description': '*',
      'inputParameters': '*',
      'maximumExecutionFrequency': 'MaximumExecutionFrequency',
      'ruleScope': '*',
      'evaluationModes': '*'
    },
    'CloudFormationStackDriftDetectionCheck': {
      'ownStackOnly': 'boolean',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'configRuleName': '*',
      'description': '*',
      'inputParameters': '*',
      'maximumExecutionFrequency': 'MaximumExecutionFrequency',
      'ruleScope': '*',
      'evaluationModes': '*'
    },
    'CloudFormationStackNotificationCheck': {
      'topics': {
        'topicArn': '*',
        'topicName': '*',
        'contentBasedDeduplication': 'boolean',
        'fifo': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'configRuleName': '*',
      'description': '*',
      'inputParameters': '*',
      'maximumExecutionFrequency': 'MaximumExecutionFrequency',
      'ruleScope': '*',
      'evaluationModes': '*'
    },
    'ManagedRule': {
      'identifier': '*',
      'configRuleName': '*',
      'description': '*',
      'inputParameters': '*',
      'maximumExecutionFrequency': 'MaximumExecutionFrequency',
      'ruleScope': '*',
      'evaluationModes': '*'
    },
    'CustomRule': {
      'lambdaFunction': {
        'functionName': '*',
        'functionArn': '*',
        'role': {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'isBoundToVpc': 'boolean',
        'latestVersion': {
          'version': '*',
          'edgeArn': '*',
          'functionName': '*',
          'functionArn': '*',
          'isBoundToVpc': 'boolean',
          'architecture': '*',
          'resourceArnsForGrantInvoke': '*',
          'connections': '*'
        },
        'resourceArnsForGrantInvoke': '*'
      },
      'configurationChanges': 'boolean',
      'periodic': 'boolean',
      'configRuleName': '*',
      'description': '*',
      'inputParameters': '*',
      'maximumExecutionFrequency': 'MaximumExecutionFrequency',
      'ruleScope': '*',
      'evaluationModes': '*'
    },
    'CustomPolicy': {
      'policyText': '*',
      'enableDebugLog': 'boolean',
      'configRuleName': '*',
      'description': '*',
      'inputParameters': '*',
      'maximumExecutionFrequency': 'MaximumExecutionFrequency',
      'ruleScope': '*',
      'evaluationModes': '*'
    }
  },
  'aws-cdk-lib.aws-docdb': {
    'DatabaseCluster': {
      'engineVersion': '*',
      'port': '*',
      'masterUser': {
        'username': '*',
        'password': '*',
        'kmsKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'excludeCharacters': '*',
        'secretName': '*'
      },
      'backup': {
        'retention': '*',
        'preferredWindow': '*'
      },
      'kmsKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'storageEncrypted': 'boolean',
      'instances': '*',
      'dbClusterName': '*',
      'instanceIdentifierBase': '*',
      'instanceType': '*',
      'caCertificate': '*',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'securityGroup': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'parameterGroup': {
        'parameterGroupName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'preferredMaintenanceWindow': '*',
      'removalPolicy': 'RemovalPolicy',
      'deletionProtection': 'boolean',
      'exportProfilerLogsToCloudWatch': 'boolean',
      'exportAuditLogsToCloudWatch': 'boolean',
      'cloudWatchLogsRetention': 'RetentionDays',
      'cloudWatchLogsRetentionRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'enablePerformanceInsights': 'boolean',
      'instanceRemovalPolicy': 'RemovalPolicy',
      'securityGroupRemovalPolicy': 'RemovalPolicy',
      'copyTagsToSnapshot': 'boolean',
      'storageType': 'StorageType',
      'addRotationSingleUser': [
        '*'
      ],
      'addRotationMultiUser': [
        '*',
        {
          'secret': {
            'encryptionKey': {
              'keyArn': '*',
              'keyId': '*',
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'secretArn': '*',
            'secretFullArn': '*',
            'secretName': '*',
            'secretValue': '*'
          },
          'automaticallyAfter': '*'
        }
      ],
      'addSecurityGroups': [
        {
          'securityGroupId': '*',
          'allowAllOutbound': 'boolean',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*',
          'canInlineRule': 'boolean',
          'uniqueId': '*',
          'connections': '*'
        }
      ]
    },
    'DatabaseSecret': {
      'username': '*',
      'encryptionKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'secretName': '*',
      'masterSecret': {
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'secretArn': '*',
        'secretFullArn': '*',
        'secretName': '*',
        'secretValue': '*'
      },
      'excludeCharacters': '*'
    },
    'DatabaseInstance': {
      'cluster': {
        'clusterIdentifier': '*',
        'instanceIdentifiers': '*',
        'clusterEndpoint': '*',
        'securityGroupId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'connections': '*'
      },
      'instanceType': '*',
      'availabilityZone': '*',
      'dbInstanceName': '*',
      'autoMinorVersionUpgrade': 'boolean',
      'preferredMaintenanceWindow': '*',
      'removalPolicy': 'RemovalPolicy',
      'enablePerformanceInsights': 'boolean',
      'caCertificate': '*'
    },
    'ClusterParameterGroup': {
      'description': '*',
      'family': '*',
      'dbClusterParameterGroupName': '*',
      'parameters': '*'
    }
  },
  'aws-cdk-lib.aws-dynamodb': {
    'TableV2': {
      'partitionKey': {
        'name': '*',
        'type': 'AttributeType'
      },
      'sortKey': {
        'name': '*',
        'type': 'AttributeType'
      },
      'tableName': '*',
      'timeToLiveAttribute': '*',
      'dynamoStream': 'StreamViewType',
      'removalPolicy': 'RemovalPolicy',
      'billing': '*',
      'replicas': {
        'region': '*',
        'readCapacity': '*',
        'maxReadRequestUnits': '*',
        'globalSecondaryIndexOptions': '*',
        'contributorInsights': 'boolean',
        'deletionProtection': 'boolean',
        'pointInTimeRecovery': 'boolean',
        'pointInTimeRecoverySpecification': {
          'pointInTimeRecoveryEnabled': 'boolean',
          'recoveryPeriodInDays': '*'
        },
        'tableClass': 'TableClass',
        'kinesisStream': {
          'streamArn': '*',
          'streamName': '*',
          'encryptionKey': {
            'keyArn': '*',
            'keyId': '*',
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          }
        },
        'tags': {
          'key': '*',
          'value': '*'
        },
        'resourcePolicy': '*'
      },
      'globalSecondaryIndexes': {
        'partitionKey': {
          'name': '*',
          'type': 'AttributeType'
        },
        'readCapacity': '*',
        'maxReadRequestUnits': '*',
        'maxWriteRequestUnits': '*',
        'warmThroughput': {
          'readUnitsPerSecond': '*',
          'writeUnitsPerSecond': '*'
        },
        'indexName': '*',
        'projectionType': 'ProjectionType',
        'nonKeyAttributes': '*'
      },
      'localSecondaryIndexes': {
        'sortKey': {
          'name': '*',
          'type': 'AttributeType'
        },
        'indexName': '*',
        'projectionType': 'ProjectionType',
        'nonKeyAttributes': '*'
      },
      'encryption': '*',
      'warmThroughput': {
        'readUnitsPerSecond': '*',
        'writeUnitsPerSecond': '*'
      },
      'contributorInsights': 'boolean',
      'deletionProtection': 'boolean',
      'pointInTimeRecovery': 'boolean',
      'pointInTimeRecoverySpecification': {
        'pointInTimeRecoveryEnabled': 'boolean',
        'recoveryPeriodInDays': '*'
      },
      'tableClass': 'TableClass',
      'kinesisStream': {
        'streamArn': '*',
        'streamName': '*',
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'tags': {
        'key': '*',
        'value': '*'
      },
      'resourcePolicy': '*',
      'addReplica': [
        {
          'region': '*',
          'readCapacity': '*',
          'maxReadRequestUnits': '*',
          'globalSecondaryIndexOptions': '*',
          'contributorInsights': 'boolean',
          'deletionProtection': 'boolean',
          'pointInTimeRecovery': 'boolean',
          'pointInTimeRecoverySpecification': {
            'pointInTimeRecoveryEnabled': 'boolean',
            'recoveryPeriodInDays': '*'
          },
          'tableClass': 'TableClass',
          'kinesisStream': {
            'streamArn': '*',
            'streamName': '*',
            'encryptionKey': {
              'keyArn': '*',
              'keyId': '*',
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            }
          },
          'tags': {
            'key': '*',
            'value': '*'
          },
          'resourcePolicy': '*'
        }
      ],
      'addGlobalSecondaryIndex': [
        {
          'partitionKey': {
            'name': '*',
            'type': 'AttributeType'
          },
          'readCapacity': '*',
          'maxReadRequestUnits': '*',
          'maxWriteRequestUnits': '*',
          'warmThroughput': {
            'readUnitsPerSecond': '*',
            'writeUnitsPerSecond': '*'
          },
          'indexName': '*',
          'projectionType': 'ProjectionType',
          'nonKeyAttributes': '*'
        }
      ],
      'addLocalSecondaryIndex': [
        {
          'sortKey': {
            'name': '*',
            'type': 'AttributeType'
          },
          'indexName': '*',
          'projectionType': 'ProjectionType',
          'nonKeyAttributes': '*'
        }
      ],
      'replica': [
        '*'
      ]
    },
    'Table': {
      'tableName': '*',
      'kinesisStream': {
        'streamArn': '*',
        'streamName': '*',
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'kinesisPrecisionTimestamp': 'ApproximateCreationDateTimePrecision',
      'readCapacity': '*',
      'writeCapacity': '*',
      'maxReadRequestUnits': '*',
      'maxWriteRequestUnits': '*',
      'billingMode': 'BillingMode',
      'warmThroughput': {
        'readUnitsPerSecond': '*',
        'writeUnitsPerSecond': '*'
      },
      'pointInTimeRecovery': 'boolean',
      'pointInTimeRecoverySpecification': {
        'pointInTimeRecoveryEnabled': 'boolean',
        'recoveryPeriodInDays': '*'
      },
      'serverSideEncryption': 'boolean',
      'tableClass': 'TableClass',
      'encryption': 'TableEncryption',
      'encryptionKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'timeToLiveAttribute': '*',
      'stream': 'StreamViewType',
      'removalPolicy': 'RemovalPolicy',
      'replicationRegions': '*',
      'replicationTimeout': '*',
      'waitForReplicationToFinish': 'boolean',
      'contributorInsightsEnabled': 'boolean',
      'deletionProtection': 'boolean',
      'importSource': {
        'compressionType': 'InputCompressionType',
        'inputFormat': '*',
        'bucket': {
          'bucketArn': '*',
          'bucketName': '*',
          'bucketWebsiteUrl': '*',
          'bucketWebsiteDomainName': '*',
          'bucketDomainName': '*',
          'bucketDualStackDomainName': '*',
          'bucketRegionalDomainName': '*',
          'isWebsite': 'boolean',
          'encryptionKey': {
            'keyArn': '*',
            'keyId': '*',
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'policy': '*',
          'replicationRoleArn': '*'
        },
        'bucketOwner': '*',
        'keyPrefix': '*'
      },
      'resourcePolicy': '*',
      'partitionKey': {
        'name': '*',
        'type': 'AttributeType'
      },
      'sortKey': {
        'name': '*',
        'type': 'AttributeType'
      },
      'addGlobalSecondaryIndex': [
        {
          'readCapacity': '*',
          'writeCapacity': '*',
          'maxReadRequestUnits': '*',
          'maxWriteRequestUnits': '*',
          'warmThroughput': {
            'readUnitsPerSecond': '*',
            'writeUnitsPerSecond': '*'
          },
          'contributorInsightsEnabled': 'boolean',
          'indexName': '*',
          'projectionType': 'ProjectionType',
          'nonKeyAttributes': '*',
          'partitionKey': {
            'name': '*',
            'type': 'AttributeType'
          }
        }
      ],
      'addLocalSecondaryIndex': [
        {
          'sortKey': {
            'name': '*',
            'type': 'AttributeType'
          },
          'indexName': '*',
          'projectionType': 'ProjectionType',
          'nonKeyAttributes': '*'
        }
      ],
      'autoScaleReadCapacity': [
        {
          'minCapacity': '*',
          'maxCapacity': '*'
        }
      ],
      'autoScaleWriteCapacity': [
        {
          'minCapacity': '*',
          'maxCapacity': '*'
        }
      ],
      'autoScaleGlobalSecondaryIndexReadCapacity': [
        '*',
        {
          'minCapacity': '*',
          'maxCapacity': '*'
        }
      ],
      'autoScaleGlobalSecondaryIndexWriteCapacity': [
        '*',
        {
          'minCapacity': '*',
          'maxCapacity': '*'
        }
      ],
      'schema': [
        '*'
      ]
    }
  },
  'aws-cdk-lib.aws-ec2': {
    'BastionHostLinux': {
      'availabilityZone': '*',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'instanceName': '*',
      'subnetSelection': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'securityGroup': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'instanceType': '*',
      'machineImage': '*',
      'blockDevices': {
        'deviceName': '*',
        'volume': '*',
        'mappingEnabled': 'boolean'
      },
      'init': '*',
      'initOptions': {
        'configSets': '*',
        'timeout': '*',
        'embedFingerprint': 'boolean',
        'printLog': 'boolean',
        'ignoreFailures': 'boolean',
        'includeUrl': 'boolean',
        'includeRole': 'boolean'
      },
      'requireImdsv2': 'boolean',
      'userDataCausesReplacement': 'boolean',
      'allowSshAccessFrom': [
        {
          'canInlineRule': 'boolean',
          'uniqueId': '*',
          'connections': '*'
        }
      ]
    },
    'ClientVpnAuthorizationRule': {
      'clientVpnEndpoint': {
        'endpointId': '*',
        'targetNetworksAssociated': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'connections': '*'
      },
      'clientVpnEndoint': {
        'endpointId': '*',
        'targetNetworksAssociated': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'connections': '*'
      },
      'cidr': '*',
      'groupId': '*',
      'description': '*'
    },
    'ClientVpnEndpoint': {
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'cidr': '*',
      'clientCertificateArn': '*',
      'userBasedAuthentication': '*',
      'logging': 'boolean',
      'logGroup': {
        'logGroupArn': '*',
        'logGroupName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'logStream': {
        'logStreamName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'clientConnectionHandler': {
        'functionName': '*',
        'functionArn': '*'
      },
      'description': '*',
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'selfServicePortal': 'boolean',
      'serverCertificateArn': '*',
      'splitTunnel': 'boolean',
      'transportProtocol': 'TransportProtocol',
      'port': 'VpnPort',
      'dnsServers': '*',
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'authorizeAllUsersToVpcCidr': 'boolean',
      'sessionTimeout': 'ClientVpnSessionTimeout',
      'clientLoginBanner': '*',
      'addAuthorizationRule': [
        '*',
        {
          'cidr': '*',
          'groupId': '*',
          'description': '*'
        }
      ],
      'addRoute': [
        '*',
        {
          'cidr': '*',
          'description': '*',
          'target': '*'
        }
      ]
    },
    'ClientVpnRoute': {
      'clientVpnEndpoint': {
        'endpointId': '*',
        'targetNetworksAssociated': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'connections': '*'
      },
      'clientVpnEndoint': {
        'endpointId': '*',
        'targetNetworksAssociated': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'connections': '*'
      },
      'cidr': '*',
      'description': '*',
      'target': '*'
    },
    'Instance': {
      'keyName': '*',
      'keyPair': {
        'keyPairName': '*',
        'type': 'KeyPairType',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'availabilityZone': '*',
      'allowAllOutbound': 'boolean',
      'allowAllIpv6Outbound': 'boolean',
      'resourceSignalTimeout': '*',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'securityGroup': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'instanceType': '*',
      'machineImage': '*',
      'userData': '*',
      'userDataCausesReplacement': 'boolean',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'instanceProfile': {
        'instanceProfileName': '*',
        'instanceProfileArn': '*',
        'role': {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'instanceName': '*',
      'sourceDestCheck': 'boolean',
      'blockDevices': {
        'deviceName': '*',
        'volume': '*',
        'mappingEnabled': 'boolean'
      },
      'privateIpAddress': '*',
      'propagateTagsToVolumeOnCreation': 'boolean',
      'init': '*',
      'initOptions': {
        'configSets': '*',
        'timeout': '*',
        'embedFingerprint': 'boolean',
        'printLog': 'boolean',
        'ignoreFailures': 'boolean',
        'includeUrl': 'boolean',
        'includeRole': 'boolean'
      },
      'requireImdsv2': 'boolean',
      'detailedMonitoring': 'boolean',
      'ssmSessionPermissions': 'boolean',
      'associatePublicIpAddress': 'boolean',
      'creditSpecification': 'CpuCredits',
      'ebsOptimized': 'boolean',
      'disableApiTermination': 'boolean',
      'instanceInitiatedShutdownBehavior': 'InstanceInitiatedShutdownBehavior',
      'placementGroup': {
        'placementGroupName': '*',
        'partitions': '*',
        'spreadLevel': 'PlacementGroupSpreadLevel',
        'strategy': 'PlacementGroupStrategy',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'enclaveEnabled': 'boolean',
      'hibernationEnabled': 'boolean',
      'ipv6AddressCount': '*',
      'addSecurityGroup': [
        {
          'securityGroupId': '*',
          'allowAllOutbound': 'boolean',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*',
          'canInlineRule': 'boolean',
          'uniqueId': '*',
          'connections': '*'
        }
      ],
      'addUserData': [
        '*'
      ],
      'addToRolePolicy': [
        '*'
      ],
      'applyCloudFormationInit': [
        '*',
        {
          'configSets': '*',
          'timeout': '*',
          'embedFingerprint': 'boolean',
          'printLog': 'boolean',
          'ignoreFailures': 'boolean',
          'includeUrl': 'boolean',
          'includeRole': 'boolean'
        }
      ]
    },
    'KeyPair': {
      '_isOsCompatible': [
        'OperatingSystemType'
      ]
    },
    'LaunchTemplate': {
      'launchTemplateName': '*',
      'versionDescription': '*',
      'instanceType': '*',
      'machineImage': '*',
      'userData': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'blockDevices': {
        'deviceName': '*',
        'volume': '*',
        'mappingEnabled': 'boolean'
      },
      'cpuCredits': 'CpuCredits',
      'disableApiTermination': 'boolean',
      'ebsOptimized': 'boolean',
      'nitroEnclaveEnabled': 'boolean',
      'hibernationConfigured': 'boolean',
      'instanceInitiatedShutdownBehavior': 'InstanceInitiatedShutdownBehavior',
      'spotOptions': {
        'blockDuration': '*',
        'interruptionBehavior': 'SpotInstanceInterruption',
        'maxPrice': '*',
        'requestType': 'SpotRequestType',
        'validUntil': '*'
      },
      'keyName': '*',
      'keyPair': {
        'keyPairName': '*',
        'type': 'KeyPairType',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'detailedMonitoring': 'boolean',
      'securityGroup': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'requireImdsv2': 'boolean',
      'httpEndpoint': 'boolean',
      'httpProtocolIpv6': 'boolean',
      'httpPutResponseHopLimit': '*',
      'httpTokens': 'LaunchTemplateHttpTokens',
      'instanceMetadataTags': 'boolean',
      'associatePublicIpAddress': 'boolean',
      'instanceProfile': {
        'instanceProfileName': '*',
        'instanceProfileArn': '*',
        'role': {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'addSecurityGroup': [
        {
          'securityGroupId': '*',
          'allowAllOutbound': 'boolean',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*',
          'canInlineRule': 'boolean',
          'uniqueId': '*',
          'connections': '*'
        }
      ]
    },
    'NetworkAcl': {
      'networkAclName': '*',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'subnetSelection': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'associateWithSubnet': [
        '*',
        {
          'subnetType': 'SubnetType',
          'availabilityZones': '*',
          'subnetGroupName': '*',
          'subnetName': '*',
          'onePerAz': 'boolean',
          'subnetFilters': '*',
          'subnets': {
            'availabilityZone': '*',
            'subnetId': '*',
            'internetConnectivityEstablished': '*',
            'ipv4CidrBlock': '*',
            'routeTable': {
              'routeTableId': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          }
        }
      ]
    },
    'NetworkAclEntry': {
      'networkAcl': {
        'networkAclId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'networkAclEntryName': '*',
      'cidr': '*',
      'traffic': '*',
      'direction': 'TrafficDirection',
      'ruleAction': 'Action',
      'ruleNumber': '*'
    },
    'SubnetNetworkAclAssociation': {
      'subnetNetworkAclAssociationName': '*',
      'networkAcl': {
        'networkAclId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'subnet': {
        'availabilityZone': '*',
        'subnetId': '*',
        'internetConnectivityEstablished': '*',
        'ipv4CidrBlock': '*',
        'routeTable': {
          'routeTableId': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      }
    },
    'PlacementGroup': {},
    'PrefixList': {},
    'SecurityGroup': {
      'securityGroupName': '*',
      'description': '*',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'allowAllOutbound': 'boolean',
      'allowAllIpv6Outbound': 'boolean',
      'disableInlineRules': 'boolean',
      'addIngressRule': [
        {
          'canInlineRule': 'boolean',
          'uniqueId': '*',
          'connections': '*'
        },
        '*',
        '*',
        'boolean'
      ],
      'addEgressRule': [
        {
          'canInlineRule': 'boolean',
          'uniqueId': '*',
          'connections': '*'
        },
        '*',
        '*',
        'boolean'
      ]
    },
    'Volume': {
      'volumeName': '*',
      'availabilityZone': '*',
      'size': '*',
      'snapshotId': '*',
      'enableMultiAttach': 'boolean',
      'encrypted': 'boolean',
      'encryptionKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'autoEnableIo': 'boolean',
      'volumeType': 'EbsDeviceVolumeType',
      'iops': '*',
      'removalPolicy': 'RemovalPolicy',
      'throughput': '*'
    },
    'VpcEndpointService': {
      'vpcEndpointServiceName': '*',
      'vpcEndpointServiceLoadBalancers': {
        'loadBalancerArn': '*'
      },
      'acceptanceRequired': 'boolean',
      'contributorInsights': 'boolean',
      'whitelistedPrincipals': '*',
      'allowedPrincipals': '*'
    },
    'GatewayVpcEndpoint': {
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'service': {
        'name': '*'
      },
      'subnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      }
    },
    'InterfaceVpcEndpoint': {
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'service': {
        'name': '*',
        'port': '*',
        'privateDnsDefault': 'boolean'
      },
      'privateDnsEnabled': 'boolean',
      'subnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'open': 'boolean',
      'lookupSupportedAzs': 'boolean'
    },
    'FlowLog': {
      'flowLogName': '*',
      'resourceType': '*',
      'trafficType': 'FlowLogTrafficType',
      'destination': '*',
      'logFormat': '*',
      'maxAggregationInterval': 'FlowLogMaxAggregationInterval'
    },
    'Vpc': {
      'ipProtocol': 'IpProtocol',
      'ipAddresses': '*',
      'cidr': '*',
      'enableDnsHostnames': 'boolean',
      'enableDnsSupport': 'boolean',
      'defaultInstanceTenancy': 'DefaultInstanceTenancy',
      'maxAzs': '*',
      'reservedAzs': '*',
      'availabilityZones': '*',
      'natGateways': '*',
      'natGatewaySubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'natGatewayProvider': '*',
      'subnetConfiguration': {
        'cidrMask': '*',
        'subnetType': 'SubnetType',
        'name': '*',
        'reserved': 'boolean',
        'mapPublicIpOnLaunch': 'boolean',
        'ipv6AssignAddressOnCreation': 'boolean'
      },
      'vpnGateway': 'boolean',
      'vpnGatewayAsn': '*',
      'vpnConnections': '*',
      'vpnRoutePropagation': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'gatewayEndpoints': '*',
      'flowLogs': '*',
      'vpcName': '*',
      'restrictDefaultSecurityGroup': 'boolean',
      'createInternetGateway': 'boolean',
      'ipv6Addresses': {
        'amazonProvided': 'boolean'
      },
      'addS3Endpoint': [
        '*',
        {
          'subnetType': 'SubnetType',
          'availabilityZones': '*',
          'subnetGroupName': '*',
          'subnetName': '*',
          'onePerAz': 'boolean',
          'subnetFilters': '*',
          'subnets': {
            'availabilityZone': '*',
            'subnetId': '*',
            'internetConnectivityEstablished': '*',
            'ipv4CidrBlock': '*',
            'routeTable': {
              'routeTableId': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          }
        }
      ],
      'addDynamoDbEndpoint': [
        '*',
        {
          'subnetType': 'SubnetType',
          'availabilityZones': '*',
          'subnetGroupName': '*',
          'subnetName': '*',
          'onePerAz': 'boolean',
          'subnetFilters': '*',
          'subnets': {
            'availabilityZone': '*',
            'subnetId': '*',
            'internetConnectivityEstablished': '*',
            'ipv4CidrBlock': '*',
            'routeTable': {
              'routeTableId': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          }
        }
      ]
    },
    'Subnet': {
      'availabilityZone': '*',
      'vpcId': '*',
      'cidrBlock': '*',
      'mapPublicIpOnLaunch': 'boolean',
      'ipv6CidrBlock': '*',
      'assignIpv6AddressOnCreation': 'boolean',
      'addDefaultInternetRoute': [
        '*',
        '*'
      ],
      'addIpv6DefaultInternetRoute': [
        '*'
      ],
      'addIpv6DefaultEgressOnlyInternetRoute': [
        '*'
      ],
      'addDefaultNatRoute': [
        '*'
      ],
      'addIpv6Nat64Route': [
        '*'
      ],
      'addRoute': [
        '*',
        {
          'destinationCidrBlock': '*',
          'destinationIpv6CidrBlock': '*',
          'routerType': 'RouterType',
          'routerId': '*',
          'enablesInternetConnectivity': 'boolean'
        }
      ],
      'associateNetworkAcl': [
        '*',
        {
          'networkAclId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      ]
    },
    'PublicSubnet': {
      'availabilityZone': '*',
      'vpcId': '*',
      'cidrBlock': '*',
      'mapPublicIpOnLaunch': 'boolean',
      'ipv6CidrBlock': '*',
      'assignIpv6AddressOnCreation': 'boolean',
      'addNatGateway': [
        '*'
      ]
    },
    'PrivateSubnet': {
      'availabilityZone': '*',
      'vpcId': '*',
      'cidrBlock': '*',
      'mapPublicIpOnLaunch': 'boolean',
      'ipv6CidrBlock': '*',
      'assignIpv6AddressOnCreation': 'boolean'
    },
    'ImportedVpc': {
      'vpcId': '*',
      'vpcCidrBlock': '*',
      'availabilityZones': '*',
      'publicSubnetIds': '*',
      'publicSubnetNames': '*',
      'publicSubnetRouteTableIds': '*',
      'publicSubnetIpv4CidrBlocks': '*',
      'privateSubnetIds': '*',
      'privateSubnetNames': '*',
      'privateSubnetRouteTableIds': '*',
      'privateSubnetIpv4CidrBlocks': '*',
      'isolatedSubnetIds': '*',
      'isolatedSubnetNames': '*',
      'isolatedSubnetRouteTableIds': '*',
      'isolatedSubnetIpv4CidrBlocks': '*',
      'vpnGatewayId': '*',
      'region': '*'
    },
    'LookedUpVpc': {
      'vpcId': '*',
      'vpcCidrBlock': '*',
      'availabilityZones': '*',
      'publicSubnetIds': '*',
      'publicSubnetNames': '*',
      'publicSubnetRouteTableIds': '*',
      'privateSubnetIds': '*',
      'privateSubnetNames': '*',
      'privateSubnetRouteTableIds': '*',
      'isolatedSubnetIds': '*',
      'isolatedSubnetNames': '*',
      'isolatedSubnetRouteTableIds': '*',
      'vpnGatewayId': '*',
      'subnetGroups': {
        'name': '*',
        'type': 'VpcSubnetGroupType',
        'subnets': {
          'subnetId': '*',
          'availabilityZone': '*',
          'routeTableId': '*',
          'cidr': '*'
        }
      },
      'region': '*',
      'ownerAccountId': '*'
    },
    'ImportedSubnet': {
      'availabilityZone': '*',
      'ipv4CidrBlock': '*',
      'routeTableId': '*',
      'subnetId': '*',
      'associateNetworkAcl': [
        '*',
        {
          'networkAclId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      ]
    },
    'VpnGateway': {
      'type': '*',
      'amazonSideAsn': '*'
    },
    'VpnConnection': {
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'ip': '*',
      'asn': '*',
      'staticRoutes': '*',
      'tunnelOptions': {
        'preSharedKey': '*',
        'preSharedKeySecret': '*',
        'tunnelInsideCidr': '*'
      }
    }
  },
  'aws-cdk-lib.aws-ecr': {
    'Repository': {
      'repositoryName': '*',
      'encryption': '*',
      'encryptionKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'lifecycleRules': {
        'rulePriority': '*',
        'description': '*',
        'tagStatus': 'TagStatus',
        'tagPrefixList': '*',
        'tagPatternList': '*',
        'maxImageCount': '*',
        'maxImageAge': '*'
      },
      'lifecycleRegistryId': '*',
      'removalPolicy': 'RemovalPolicy',
      'imageScanOnPush': 'boolean',
      'imageTagMutability': 'TagMutability',
      'autoDeleteImages': 'boolean',
      'emptyOnDelete': 'boolean',
      'addToResourcePolicy': [
        '*'
      ],
      'addLifecycleRule': [
        {
          'rulePriority': '*',
          'description': '*',
          'tagStatus': 'TagStatus',
          'tagPrefixList': '*',
          'tagPatternList': '*',
          'maxImageCount': '*',
          'maxImageAge': '*'
        }
      ]
    }
  },
  'aws-cdk-lib.aws-ecs': {
    'Cluster': {
      'clusterName': '*',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'defaultCloudMapNamespace': {
        'name': '*',
        'type': 'NamespaceType',
        'vpc': {
          'vpcId': '*',
          'vpcArn': '*',
          'vpcCidrBlock': '*',
          'publicSubnets': {
            'availabilityZone': '*',
            'subnetId': '*',
            'internetConnectivityEstablished': '*',
            'ipv4CidrBlock': '*',
            'routeTable': {
              'routeTableId': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'availabilityZones': '*',
          'vpnGatewayId': '*'
        },
        'useForServiceConnect': 'boolean'
      },
      'capacity': {
        'instanceType': '*',
        'machineImage': '*',
        'canContainersAccessInstanceRole': 'boolean',
        'taskDrainTime': '*',
        'spotInstanceDraining': 'boolean',
        'topicEncryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'machineImageType': 'MachineImageType',
        'minCapacity': '*',
        'maxCapacity': '*',
        'desiredCapacity': '*',
        'keyName': '*',
        'keyPair': {
          'keyPairName': '*',
          'type': 'KeyPairType'
        },
        'vpcSubnets': {
          'subnetType': 'SubnetType',
          'availabilityZones': '*',
          'subnetGroupName': '*',
          'subnetName': '*',
          'onePerAz': 'boolean',
          'subnetFilters': '*',
          'subnets': {
            'availabilityZone': '*',
            'subnetId': '*',
            'internetConnectivityEstablished': '*',
            'ipv4CidrBlock': '*',
            'routeTable': {
              'routeTableId': '*'
            }
          }
        },
        'notificationsTopic': {
          'topicArn': '*',
          'topicName': '*',
          'contentBasedDeduplication': 'boolean',
          'fifo': 'boolean'
        },
        'notifications': {
          'scalingEvents': '*'
        },
        'allowAllOutbound': 'boolean',
        'updateType': 'UpdateType',
        'rollingUpdateConfiguration': {
          'maxBatchSize': '*',
          'minInstancesInService': '*',
          'minSuccessfulInstancesPercent': '*',
          'waitOnResourceSignals': 'boolean',
          'suspendProcesses': 'ScalingProcess'
        },
        'replacingUpdateMinSuccessfulInstancesPercent': '*',
        'ignoreUnmodifiedSizeProperties': 'boolean',
        'resourceSignalCount': '*',
        'associatePublicIpAddress': 'boolean',
        'spotPrice': '*',
        'healthCheck': '*',
        'blockDevices': {
          'deviceName': '*',
          'volume': '*',
          'mappingEnabled': 'boolean'
        },
        'instanceMonitoring': 'Monitoring',
        'groupMetrics': '*',
        'signals': '*',
        'updatePolicy': '*',
        'newInstancesProtectedFromScaleIn': 'boolean',
        'autoScalingGroupName': '*',
        'terminationPolicies': 'TerminationPolicy',
        'terminationPolicyCustomLambdaFunctionArn': '*',
        'capacityRebalance': 'boolean',
        'ssmSessionPermissions': 'boolean',
        'azCapacityDistributionStrategy': 'CapacityDistributionStrategy'
      },
      'capacityProviders': '*',
      'enableFargateCapacityProviders': [],
      'containerInsights': 'boolean',
      'containerInsightsV2': 'ContainerInsights',
      'executeCommandConfiguration': {
        'kmsKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'logConfiguration': {
          'cloudWatchEncryptionEnabled': 'boolean',
          'cloudWatchLogGroup': {
            'logGroupArn': '*',
            'logGroupName': '*'
          },
          's3Bucket': {
            'bucketArn': '*',
            'bucketName': '*',
            'bucketWebsiteUrl': '*',
            'bucketWebsiteDomainName': '*',
            'bucketDomainName': '*',
            'bucketDualStackDomainName': '*',
            'bucketRegionalDomainName': '*',
            'isWebsite': 'boolean',
            'policy': '*',
            'replicationRoleArn': '*'
          },
          's3EncryptionEnabled': 'boolean',
          's3KeyPrefix': '*'
        },
        'logging': 'ExecuteCommandLogging'
      },
      'managedStorageConfiguration': {
        'fargateEphemeralStorageKmsKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'addDefaultCapacityProviderStrategy': [
        {
          'capacityProvider': '*',
          'base': '*',
          'weight': '*'
        }
      ],
      'addDefaultCloudMapNamespace': [
        {
          'name': '*',
          'type': 'NamespaceType',
          'vpc': {
            'vpcId': '*',
            'vpcArn': '*',
            'vpcCidrBlock': '*',
            'publicSubnets': {
              'availabilityZone': '*',
              'subnetId': '*',
              'internetConnectivityEstablished': '*',
              'ipv4CidrBlock': '*',
              'routeTable': {
                'routeTableId': '*'
              },
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'availabilityZones': '*',
            'vpnGatewayId': '*'
          },
          'useForServiceConnect': 'boolean'
        }
      ],
      'addCapacity': [
        '*',
        {
          'instanceType': '*',
          'machineImage': '*',
          'canContainersAccessInstanceRole': 'boolean',
          'taskDrainTime': '*',
          'spotInstanceDraining': 'boolean',
          'topicEncryptionKey': {
            'keyArn': '*',
            'keyId': '*',
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'machineImageType': 'MachineImageType',
          'minCapacity': '*',
          'maxCapacity': '*',
          'desiredCapacity': '*',
          'keyName': '*',
          'keyPair': {
            'keyPairName': '*',
            'type': 'KeyPairType'
          },
          'vpcSubnets': {
            'subnetType': 'SubnetType',
            'availabilityZones': '*',
            'subnetGroupName': '*',
            'subnetName': '*',
            'onePerAz': 'boolean',
            'subnetFilters': '*',
            'subnets': {
              'availabilityZone': '*',
              'subnetId': '*',
              'internetConnectivityEstablished': '*',
              'ipv4CidrBlock': '*',
              'routeTable': {
                'routeTableId': '*'
              }
            }
          },
          'notificationsTopic': {
            'topicArn': '*',
            'topicName': '*',
            'contentBasedDeduplication': 'boolean',
            'fifo': 'boolean'
          },
          'notifications': {
            'scalingEvents': '*'
          },
          'allowAllOutbound': 'boolean',
          'updateType': 'UpdateType',
          'rollingUpdateConfiguration': {
            'maxBatchSize': '*',
            'minInstancesInService': '*',
            'minSuccessfulInstancesPercent': '*',
            'waitOnResourceSignals': 'boolean',
            'suspendProcesses': 'ScalingProcess'
          },
          'replacingUpdateMinSuccessfulInstancesPercent': '*',
          'ignoreUnmodifiedSizeProperties': 'boolean',
          'resourceSignalCount': '*',
          'associatePublicIpAddress': 'boolean',
          'spotPrice': '*',
          'healthCheck': '*',
          'blockDevices': {
            'deviceName': '*',
            'volume': '*',
            'mappingEnabled': 'boolean'
          },
          'instanceMonitoring': 'Monitoring',
          'groupMetrics': '*',
          'signals': '*',
          'updatePolicy': '*',
          'newInstancesProtectedFromScaleIn': 'boolean',
          'autoScalingGroupName': '*',
          'terminationPolicies': 'TerminationPolicy',
          'terminationPolicyCustomLambdaFunctionArn': '*',
          'capacityRebalance': 'boolean',
          'ssmSessionPermissions': 'boolean',
          'azCapacityDistributionStrategy': 'CapacityDistributionStrategy'
        }
      ],
      'addAsgCapacityProvider': [
        '*',
        {
          'canContainersAccessInstanceRole': 'boolean',
          'taskDrainTime': '*',
          'spotInstanceDraining': 'boolean',
          'topicEncryptionKey': {
            'keyArn': '*',
            'keyId': '*',
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'machineImageType': 'MachineImageType'
        }
      ],
      'addAutoScalingGroup': [
        '*',
        {
          'canContainersAccessInstanceRole': 'boolean',
          'taskDrainTime': '*',
          'spotInstanceDraining': 'boolean',
          'topicEncryptionKey': {
            'keyArn': '*',
            'keyId': '*',
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'machineImageType': 'MachineImageType'
        }
      ],
      'addCapacityProvider': [
        '*'
      ],
      'arnForTasks': [
        '*'
      ],
      'grantTaskProtection': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        }
      ],
      'metricCpuReservation': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricCpuUtilization': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricMemoryReservation': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricMemoryUtilization': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metric': [
        '*',
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ]
    },
    'ImportedCluster': {
      'clusterName': '*',
      'clusterArn': '*',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'hasEc2Capacity': 'boolean',
      'defaultCloudMapNamespace': {
        'namespaceName': '*',
        'namespaceId': '*',
        'namespaceArn': '*',
        'type': 'NamespaceType',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'autoscalingGroup': {
        'autoScalingGroupName': '*',
        'autoScalingGroupArn': '*',
        'osType': 'OperatingSystemType',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*'
        }
      },
      'executeCommandConfiguration': {
        'kmsKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'logConfiguration': {
          'cloudWatchEncryptionEnabled': 'boolean',
          'cloudWatchLogGroup': {
            'logGroupArn': '*',
            'logGroupName': '*'
          },
          's3Bucket': {
            'bucketArn': '*',
            'bucketName': '*',
            'bucketWebsiteUrl': '*',
            'bucketWebsiteDomainName': '*',
            'bucketDomainName': '*',
            'bucketDualStackDomainName': '*',
            'bucketRegionalDomainName': '*',
            'isWebsite': 'boolean',
            'policy': '*',
            'replicationRoleArn': '*'
          },
          's3EncryptionEnabled': 'boolean',
          's3KeyPrefix': '*'
        },
        'logging': 'ExecuteCommandLogging'
      }
    }
  },
  'aws-cdk-lib.aws-efs': {
    'AccessPoint': {
      'fileSystem': {
        'fileSystemId': '*',
        'fileSystemArn': '*',
        'mountTargetsAvailable': '*',
        'connections': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'createAcl': {
        'ownerUid': '*',
        'ownerGid': '*',
        'permissions': '*'
      },
      'path': '*',
      'posixUser': {
        'uid': '*',
        'gid': '*',
        'secondaryGids': '*'
      },
      'clientToken': '*'
    },
    'ImportedAccessPoint': {
      'accessPointId': '*',
      'accessPointArn': '*',
      'fileSystem': {
        'fileSystemId': '*',
        'fileSystemArn': '*',
        'mountTargetsAvailable': '*',
        'connections': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      }
    },
    'FileSystem': {
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'securityGroup': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'encrypted': 'boolean',
      'fileSystemName': '*',
      'kmsKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'lifecyclePolicy': 'LifecyclePolicy',
      'outOfInfrequentAccessPolicy': 'OutOfInfrequentAccessPolicy',
      'transitionToArchivePolicy': 'LifecyclePolicy',
      'performanceMode': 'PerformanceMode',
      'throughputMode': 'ThroughputMode',
      'provisionedThroughputPerSecond': '*',
      'removalPolicy': 'RemovalPolicy',
      'enableAutomaticBackups': 'boolean',
      'fileSystemPolicy': '*',
      'allowAnonymousAccess': 'boolean',
      'oneZone': 'boolean',
      'replicationOverwriteProtection': 'ReplicationOverwriteProtection',
      'replicationConfiguration': '*',
      'addAccessPoint': [
        '*',
        {
          'createAcl': {
            'ownerUid': '*',
            'ownerGid': '*',
            'permissions': '*'
          },
          'path': '*',
          'posixUser': {
            'uid': '*',
            'gid': '*',
            'secondaryGids': '*'
          },
          'clientToken': '*'
        }
      ]
    },
    'ImportedFileSystem': {
      'securityGroup': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'fileSystemId': '*',
      'fileSystemArn': '*'
    }
  },
  'aws-cdk-lib.aws-eks': {
    'AccessEntry': {
      'accessEntryName': '*',
      'accessEntryType': 'AccessEntryType',
      'cluster': {
        'vpc': {
          'vpcId': '*',
          'vpcArn': '*',
          'vpcCidrBlock': '*',
          'publicSubnets': {
            'availabilityZone': '*',
            'subnetId': '*',
            'internetConnectivityEstablished': '*',
            'ipv4CidrBlock': '*',
            'routeTable': {
              'routeTableId': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'availabilityZones': '*',
          'vpnGatewayId': '*'
        },
        'clusterName': '*',
        'clusterArn': '*',
        'clusterEndpoint': '*',
        'clusterCertificateAuthorityData': '*',
        'clusterSecurityGroupId': '*',
        'clusterSecurityGroup': {
          'securityGroupId': '*',
          'allowAllOutbound': 'boolean',
          'canInlineRule': 'boolean',
          'uniqueId': '*',
          'connections': '*'
        },
        'clusterEncryptionConfigKeyArn': '*',
        'openIdConnectProvider': {
          'openIdConnectProviderArn': '*',
          'openIdConnectProviderIssuer': '*'
        },
        'eksPodIdentityAgent': {
          'addonName': '*',
          'addonArn': '*'
        },
        'kubectlRole': {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          }
        },
        'kubectlEnvironment': '*',
        'kubectlLayer': {
          'layerVersionArn': '*',
          'compatibleRuntimes': '*'
        },
        'ipFamily': 'IpFamily',
        'kubectlProvider': {
          'serviceToken': '*',
          'roleArn': '*'
        },
        'kubectlMemory': '*',
        'prune': 'boolean',
        'authenticationMode': 'AuthenticationMode'
      },
      'accessPolicies': {
        'accessScope': {
          'namespaces': '*',
          'type': 'AccessScopeType'
        },
        'policy': '*'
      },
      'principal': '*',
      'addAccessPolicies': [
        {
          'accessScope': {
            'namespaces': '*',
            'type': 'AccessScopeType'
          },
          'policy': '*'
        }
      ]
    },
    'Addon': {
      'addonName': '*',
      'addonVersion': '*',
      'cluster': {
        'vpc': {
          'vpcId': '*',
          'vpcArn': '*',
          'vpcCidrBlock': '*',
          'publicSubnets': {
            'availabilityZone': '*',
            'subnetId': '*',
            'internetConnectivityEstablished': '*',
            'ipv4CidrBlock': '*',
            'routeTable': {
              'routeTableId': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'availabilityZones': '*',
          'vpnGatewayId': '*'
        },
        'clusterName': '*',
        'clusterArn': '*',
        'clusterEndpoint': '*',
        'clusterCertificateAuthorityData': '*',
        'clusterSecurityGroupId': '*',
        'clusterSecurityGroup': {
          'securityGroupId': '*',
          'allowAllOutbound': 'boolean',
          'canInlineRule': 'boolean',
          'uniqueId': '*',
          'connections': '*'
        },
        'clusterEncryptionConfigKeyArn': '*',
        'openIdConnectProvider': {
          'openIdConnectProviderArn': '*',
          'openIdConnectProviderIssuer': '*'
        },
        'eksPodIdentityAgent': {
          'addonName': '*',
          'addonArn': '*'
        },
        'kubectlRole': {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          }
        },
        'kubectlEnvironment': '*',
        'kubectlLayer': {
          'layerVersionArn': '*',
          'compatibleRuntimes': '*'
        },
        'ipFamily': 'IpFamily',
        'kubectlProvider': {
          'serviceToken': '*',
          'roleArn': '*'
        },
        'kubectlMemory': '*',
        'prune': 'boolean',
        'authenticationMode': 'AuthenticationMode'
      },
      'preserveOnDelete': 'boolean'
    },
    'Cluster': {
      'defaultCapacity': '*',
      'defaultCapacityInstance': '*',
      'defaultCapacityType': 'DefaultCapacityType',
      'kubectlLambdaRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'bootstrapClusterCreatorAdminPermissions': 'boolean',
      'tags': '*',
      'mastersRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'coreDnsComputeType': 'CoreDnsComputeType',
      'outputMastersRoleArn': 'boolean',
      'endpointAccess': '*',
      'kubectlEnvironment': '*',
      'kubectlLayer': {
        'layerVersionArn': '*',
        'compatibleRuntimes': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'awscliLayer': {
        'layerVersionArn': '*',
        'compatibleRuntimes': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'kubectlMemory': '*',
      'clusterHandlerEnvironment': '*',
      'clusterHandlerSecurityGroup': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'onEventLayer': {
        'layerVersionArn': '*',
        'compatibleRuntimes': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'prune': 'boolean',
      'placeClusterHandlerInVpc': 'boolean',
      'secretsEncryptionKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'ipFamily': 'IpFamily',
      'serviceIpv4Cidr': '*',
      'albController': {
        'version': '*',
        'repository': '*',
        'policy': '*'
      },
      'clusterLogging': 'ClusterLoggingTypes',
      'authenticationMode': 'AuthenticationMode',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'clusterName': '*',
      'securityGroup': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'version': '*',
      'outputClusterName': 'boolean',
      'outputConfigCommand': 'boolean',
      'grantAccess': [
        '*',
        '*',
        {
          'accessScope': {
            'namespaces': '*',
            'type': 'AccessScopeType'
          },
          'policy': '*'
        }
      ],
      'getServiceLoadBalancerAddress': [
        '*',
        {
          'timeout': '*',
          'namespace': '*'
        }
      ],
      'getIngressLoadBalancerAddress': [
        '*',
        {
          'timeout': '*',
          'namespace': '*'
        }
      ],
      'addAutoScalingGroupCapacity': [
        '*',
        {
          'instanceType': '*',
          'mapRole': 'boolean',
          'bootstrapEnabled': 'boolean',
          'bootstrapOptions': {
            'useMaxPods': 'boolean',
            'enableDockerBridge': 'boolean',
            'awsApiRetryAttempts': '*',
            'dockerConfigJson': '*',
            'dnsClusterIp': '*',
            'kubeletExtraArgs': '*',
            'additionalArgs': '*'
          },
          'machineImageType': 'MachineImageType',
          'spotInterruptHandler': 'boolean',
          'minCapacity': '*',
          'maxCapacity': '*',
          'desiredCapacity': '*',
          'keyName': '*',
          'keyPair': {
            'keyPairName': '*',
            'type': 'KeyPairType',
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'vpcSubnets': {
            'subnetType': 'SubnetType',
            'availabilityZones': '*',
            'subnetGroupName': '*',
            'subnetName': '*',
            'onePerAz': 'boolean',
            'subnetFilters': '*',
            'subnets': {
              'availabilityZone': '*',
              'subnetId': '*',
              'internetConnectivityEstablished': '*',
              'ipv4CidrBlock': '*',
              'routeTable': {
                'routeTableId': '*'
              }
            }
          },
          'notificationsTopic': {
            'topicArn': '*',
            'topicName': '*',
            'contentBasedDeduplication': 'boolean',
            'fifo': 'boolean'
          },
          'notifications': {
            'scalingEvents': '*'
          },
          'allowAllOutbound': 'boolean',
          'updateType': 'UpdateType',
          'rollingUpdateConfiguration': {
            'maxBatchSize': '*',
            'minInstancesInService': '*',
            'minSuccessfulInstancesPercent': '*',
            'pauseTime': '*',
            'waitOnResourceSignals': 'boolean',
            'suspendProcesses': 'ScalingProcess'
          },
          'replacingUpdateMinSuccessfulInstancesPercent': '*',
          'ignoreUnmodifiedSizeProperties': 'boolean',
          'resourceSignalCount': '*',
          'associatePublicIpAddress': 'boolean',
          'spotPrice': '*',
          'healthCheck': '*',
          'blockDevices': {
            'deviceName': '*',
            'volume': '*',
            'mappingEnabled': 'boolean'
          },
          'instanceMonitoring': 'Monitoring',
          'groupMetrics': '*',
          'signals': '*',
          'updatePolicy': '*',
          'newInstancesProtectedFromScaleIn': 'boolean',
          'autoScalingGroupName': '*',
          'terminationPolicies': 'TerminationPolicy',
          'terminationPolicyCustomLambdaFunctionArn': '*',
          'capacityRebalance': 'boolean',
          'ssmSessionPermissions': 'boolean',
          'azCapacityDistributionStrategy': 'CapacityDistributionStrategy'
        }
      ],
      'addNodegroupCapacity': [
        '*',
        {
          'nodegroupName': '*',
          'subnets': {
            'subnetType': 'SubnetType',
            'availabilityZones': '*',
            'subnetGroupName': '*',
            'subnetName': '*',
            'onePerAz': 'boolean',
            'subnetFilters': '*',
            'subnets': {
              'availabilityZone': '*',
              'subnetId': '*',
              'internetConnectivityEstablished': '*',
              'ipv4CidrBlock': '*',
              'routeTable': {
                'routeTableId': '*'
              },
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            }
          },
          'amiType': 'NodegroupAmiType',
          'diskSize': '*',
          'desiredSize': '*',
          'maxSize': '*',
          'minSize': '*',
          'forceUpdate': 'boolean',
          'instanceType': '*',
          'labels': '*',
          'taints': {
            'effect': 'TaintEffect',
            'key': '*',
            'value': '*'
          },
          'nodeRole': {
            'roleArn': '*',
            'roleName': '*',
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*',
            'grantPrincipal': {
              'assumeRoleAction': '*',
              'principalAccount': '*'
            }
          },
          'releaseVersion': '*',
          'remoteAccess': {
            'sshKeyName': '*',
            'sourceSecurityGroups': {
              'securityGroupId': '*',
              'allowAllOutbound': 'boolean',
              'canInlineRule': 'boolean',
              'uniqueId': '*',
              'connections': '*'
            }
          },
          'tags': '*',
          'launchTemplateSpec': {
            'id': '*',
            'version': '*'
          },
          'capacityType': 'CapacityType',
          'maxUnavailable': '*',
          'maxUnavailablePercentage': '*'
        }
      ],
      'addFargateProfile': [
        '*',
        {
          'fargateProfileName': '*',
          'podExecutionRole': {
            'roleArn': '*',
            'roleName': '*',
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*',
            'grantPrincipal': {
              'assumeRoleAction': '*',
              'principalAccount': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'selectors': {
            'namespace': '*',
            'labels': '*'
          },
          'vpc': {
            'vpcId': '*',
            'vpcArn': '*',
            'vpcCidrBlock': '*',
            'publicSubnets': {
              'availabilityZone': '*',
              'subnetId': '*',
              'internetConnectivityEstablished': '*',
              'ipv4CidrBlock': '*',
              'routeTable': {
                'routeTableId': '*'
              }
            },
            'availabilityZones': '*',
            'vpnGatewayId': '*'
          },
          'subnetSelection': {
            'subnetType': 'SubnetType',
            'availabilityZones': '*',
            'subnetGroupName': '*',
            'subnetName': '*',
            'onePerAz': 'boolean',
            'subnetFilters': '*'
          }
        }
      ],
      '_attachFargateProfile': [
        '*'
      ],
      '_attachKubectlResourceScope': [
        '*'
      ]
    },
    'ImportedCluster': {
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'clusterName': '*',
      'clusterEndpoint': '*',
      'clusterCertificateAuthorityData': '*',
      'clusterSecurityGroupId': '*',
      'clusterEncryptionConfigKeyArn': '*',
      'ipFamily': 'IpFamily',
      'securityGroupIds': '*',
      'kubectlRoleArn': '*',
      'kubectlLambdaRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'kubectlEnvironment': '*',
      'kubectlSecurityGroupId': '*',
      'kubectlPrivateSubnetIds': '*',
      'openIdConnectProvider': {
        'openIdConnectProviderArn': '*',
        'openIdConnectProviderIssuer': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'kubectlLayer': {
        'layerVersionArn': '*',
        'compatibleRuntimes': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'awscliLayer': {
        'layerVersionArn': '*',
        'compatibleRuntimes': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'kubectlProvider': {
        'serviceToken': '*',
        'roleArn': '*',
        'handlerRole': {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'kubectlMemory': '*',
      'clusterHandlerSecurityGroupId': '*',
      'onEventLayer': {
        'layerVersionArn': '*',
        'compatibleRuntimes': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'prune': 'boolean'
    },
    'FargateCluster': {
      'defaultProfile': {
        'fargateProfileName': '*',
        'podExecutionRole': {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'selectors': {
          'namespace': '*',
          'labels': '*'
        },
        'vpc': {
          'vpcId': '*',
          'vpcArn': '*',
          'vpcCidrBlock': '*',
          'publicSubnets': {
            'availabilityZone': '*',
            'subnetId': '*',
            'internetConnectivityEstablished': '*',
            'ipv4CidrBlock': '*',
            'routeTable': {
              'routeTableId': '*'
            }
          },
          'availabilityZones': '*',
          'vpnGatewayId': '*'
        },
        'subnetSelection': {
          'subnetType': 'SubnetType',
          'availabilityZones': '*',
          'subnetGroupName': '*',
          'subnetName': '*',
          'onePerAz': 'boolean',
          'subnetFilters': '*'
        }
      },
      'mastersRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'coreDnsComputeType': 'CoreDnsComputeType',
      'outputMastersRoleArn': 'boolean',
      'endpointAccess': '*',
      'kubectlEnvironment': '*',
      'kubectlLayer': {
        'layerVersionArn': '*',
        'compatibleRuntimes': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'awscliLayer': {
        'layerVersionArn': '*',
        'compatibleRuntimes': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'kubectlMemory': '*',
      'clusterHandlerEnvironment': '*',
      'clusterHandlerSecurityGroup': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'onEventLayer': {
        'layerVersionArn': '*',
        'compatibleRuntimes': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'prune': 'boolean',
      'placeClusterHandlerInVpc': 'boolean',
      'secretsEncryptionKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'ipFamily': 'IpFamily',
      'serviceIpv4Cidr': '*',
      'albController': {
        'version': '*',
        'repository': '*',
        'policy': '*'
      },
      'clusterLogging': 'ClusterLoggingTypes',
      'authenticationMode': 'AuthenticationMode',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'clusterName': '*',
      'securityGroup': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'version': '*',
      'outputClusterName': 'boolean',
      'outputConfigCommand': 'boolean'
    },
    'Nodegroup': {
      'cluster': {
        'vpc': {
          'vpcId': '*',
          'vpcArn': '*',
          'vpcCidrBlock': '*',
          'publicSubnets': {
            'availabilityZone': '*',
            'subnetId': '*',
            'internetConnectivityEstablished': '*',
            'ipv4CidrBlock': '*',
            'routeTable': {
              'routeTableId': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'availabilityZones': '*',
          'vpnGatewayId': '*'
        },
        'clusterName': '*',
        'clusterArn': '*',
        'clusterEndpoint': '*',
        'clusterCertificateAuthorityData': '*',
        'clusterSecurityGroupId': '*',
        'clusterSecurityGroup': {
          'securityGroupId': '*',
          'allowAllOutbound': 'boolean',
          'canInlineRule': 'boolean',
          'uniqueId': '*',
          'connections': '*'
        },
        'clusterEncryptionConfigKeyArn': '*',
        'openIdConnectProvider': {
          'openIdConnectProviderArn': '*',
          'openIdConnectProviderIssuer': '*'
        },
        'eksPodIdentityAgent': {
          'addonName': '*',
          'addonArn': '*'
        },
        'kubectlRole': {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          }
        },
        'kubectlEnvironment': '*',
        'kubectlLayer': {
          'layerVersionArn': '*',
          'compatibleRuntimes': '*'
        },
        'ipFamily': 'IpFamily',
        'kubectlProvider': {
          'serviceToken': '*',
          'roleArn': '*'
        },
        'kubectlMemory': '*',
        'prune': 'boolean',
        'authenticationMode': 'AuthenticationMode'
      },
      'nodegroupName': '*',
      'subnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'amiType': 'NodegroupAmiType',
      'diskSize': '*',
      'desiredSize': '*',
      'maxSize': '*',
      'minSize': '*',
      'forceUpdate': 'boolean',
      'instanceType': '*',
      'instanceTypes': '*',
      'labels': '*',
      'taints': {
        'effect': 'TaintEffect',
        'key': '*',
        'value': '*'
      },
      'nodeRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'releaseVersion': '*',
      'remoteAccess': {
        'sshKeyName': '*',
        'sourceSecurityGroups': {
          'securityGroupId': '*',
          'allowAllOutbound': 'boolean',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*',
          'canInlineRule': 'boolean',
          'uniqueId': '*',
          'connections': '*'
        }
      },
      'tags': '*',
      'launchTemplateSpec': {
        'id': '*',
        'version': '*'
      },
      'capacityType': 'CapacityType',
      'maxUnavailable': '*',
      'maxUnavailablePercentage': '*'
    },
    'OpenIdConnectProvider': {
      'url': '*'
    }
  },
  'aws-cdk-lib.aws-elasticloadbalancing': {
    'LoadBalancer': {
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'internetFacing': 'boolean',
      'listeners': {
        'externalPort': '*',
        'externalProtocol': 'LoadBalancingProtocol',
        'internalPort': '*',
        'internalProtocol': 'LoadBalancingProtocol',
        'policyNames': '*',
        'sslCertificateId': '*',
        'sslCertificateArn': '*',
        'allowConnectionsFrom': {
          'connections': '*'
        }
      },
      'targets': {
        'connections': '*'
      },
      'healthCheck': {
        'port': '*',
        'protocol': 'LoadBalancingProtocol',
        'path': '*',
        'healthyThreshold': '*',
        'unhealthyThreshold': '*',
        'interval': '*'
      },
      'crossZone': 'boolean',
      'subnetSelection': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'accessLoggingPolicy': '*',
      'addListener': [
        {
          'externalPort': '*',
          'externalProtocol': 'LoadBalancingProtocol',
          'internalPort': '*',
          'internalProtocol': 'LoadBalancingProtocol',
          'policyNames': '*',
          'sslCertificateId': '*',
          'sslCertificateArn': '*',
          'allowConnectionsFrom': {
            'connections': '*'
          }
        }
      ],
      'addTarget': [
        {
          'connections': '*'
        }
      ],
      '_addInstanceId': [
        '*'
      ]
    }
  },
  'aws-cdk-lib.aws-elasticsearch': {
    'Domain': {
      'accessPolicies': '*',
      'advancedOptions': '*',
      'cognitoKibanaAuth': {
        'identityPoolId': '*',
        'role': {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'userPoolId': '*'
      },
      'domainName': '*',
      'ebs': {
        'enabled': 'boolean',
        'iops': '*',
        'volumeSize': '*',
        'volumeType': 'EbsDeviceVolumeType'
      },
      'capacity': {
        'masterNodes': '*',
        'masterNodeInstanceType': '*',
        'dataNodes': '*',
        'dataNodeInstanceType': '*',
        'warmNodes': '*',
        'warmInstanceType': '*'
      },
      'zoneAwareness': {
        'enabled': 'boolean',
        'availabilityZoneCount': '*'
      },
      'version': '*',
      'encryptionAtRest': {
        'enabled': 'boolean',
        'kmsKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'logging': {
        'slowSearchLogEnabled': 'boolean',
        'slowSearchLogGroup': {
          'logGroupArn': '*',
          'logGroupName': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'slowIndexLogEnabled': 'boolean',
        'appLogEnabled': 'boolean',
        'auditLogEnabled': 'boolean'
      },
      'nodeToNodeEncryption': 'boolean',
      'automatedSnapshotStartHour': '*',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'enforceHttps': 'boolean',
      'tlsSecurityPolicy': 'TLSSecurityPolicy',
      'fineGrainedAccessControl': {
        'masterUserArn': '*',
        'masterUserName': '*',
        'masterUserPassword': '*'
      },
      'useUnsignedBasicAuth': 'boolean',
      'enableVersionUpgrade': 'boolean',
      'removalPolicy': 'RemovalPolicy',
      'customEndpoint': {
        'domainName': '*',
        'certificate': {
          'certificateArn': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'hostedZone': {
          'hostedZoneId': '*',
          'zoneName': '*',
          'hostedZoneArn': '*',
          'hostedZoneNameServers': '*'
        }
      },
      'addAccessPolicies': [
        '*'
      ]
    }
  },
  'aws-cdk-lib.aws-events': {
    'ApiDestination': {
      'apiDestinationName': '*',
      'description': '*',
      'connection': {
        'connectionName': '*',
        'connectionArn': '*',
        'connectionSecretArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'endpoint': '*',
      'httpMethod': 'HttpMethod',
      'rateLimitPerSecond': '*'
    },
    'Archive': {
      'sourceEventBus': {
        'eventBusName': '*',
        'eventBusArn': '*',
        'eventBusPolicy': '*',
        'eventSourceName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'archiveName': '*',
      'description': '*',
      'eventPattern': {
        'version': '*',
        'id': '*',
        'detailType': '*',
        'source': '*',
        'account': '*',
        'time': '*',
        'region': '*',
        'resources': '*',
        'detail': '*'
      },
      'retention': '*'
    },
    'Connection': {
      'connectionName': '*',
      'description': '*',
      'authorization': '*',
      'bodyParameters': '*',
      'headerParameters': '*',
      'queryStringParameters': '*'
    },
    'ImportedConnection': {
      'connectionName': '*',
      'connectionArn': '*',
      'connectionSecretArn': '*'
    },
    'EventBus': {
      'addToResourcePolicy': [
        '*'
      ]
    },
    'ImportedEventBus': {
      'eventBusName': '*',
      'eventBusArn': '*',
      'eventBusPolicy': '*',
      'eventSourceName': '*'
    },
    'EventBusPolicy': {
      'eventBus': {
        'eventBusName': '*',
        'eventBusArn': '*',
        'eventBusPolicy': '*',
        'eventSourceName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'statement': '*',
      'statementId': '*'
    },
    'Rule': {
      'enabled': 'boolean',
      'schedule': '*',
      'targets': '*',
      'eventBus': {
        'eventBusName': '*',
        'eventBusArn': '*',
        'eventBusPolicy': '*',
        'eventSourceName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'description': '*',
      'ruleName': '*',
      'eventPattern': {
        'version': '*',
        'id': '*',
        'detailType': '*',
        'source': '*',
        'account': '*',
        'time': '*',
        'region': '*',
        'resources': '*',
        'detail': '*'
      },
      'crossStackScope': '*',
      'addTarget': [
        '*'
      ],
      'addEventPattern': [
        {
          'version': '*',
          'id': '*',
          'detailType': '*',
          'source': '*',
          'account': '*',
          'time': '*',
          'region': '*',
          'resources': '*',
          'detail': '*'
        }
      ],
      '_renderEventPattern': []
    },
    'MirrorRule': {
      'enabled': 'boolean',
      'schedule': '*',
      'targets': '*',
      'eventBus': {
        'eventBusName': '*',
        'eventBusArn': '*',
        'eventBusPolicy': '*',
        'eventSourceName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'description': '*',
      'ruleName': '*',
      'eventPattern': {
        'version': '*',
        'id': '*',
        'detailType': '*',
        'source': '*',
        'account': '*',
        'time': '*',
        'region': '*',
        'resources': '*',
        'detail': '*'
      },
      'crossStackScope': '*',
      '_renderEventPattern': []
    }
  },
  'aws-cdk-lib.aws-fsx': {
    'LustreFileSystem': {
      'lustreConfiguration': {
        'deploymentType': 'LustreDeploymentType',
        'exportPath': '*',
        'importedFileChunkSizeMiB': '*',
        'importPath': '*',
        'autoImportPolicy': 'LustreAutoImportPolicy',
        'dataCompressionType': 'LustreDataCompressionType',
        'perUnitStorageThroughput': '*',
        'weeklyMaintenanceStartTime': '*',
        'automaticBackupRetention': '*',
        'copyTagsToBackups': 'boolean',
        'dailyAutomaticBackupStartTime': '*',
        'driveCacheType': 'DriveCacheType'
      },
      'fileSystemTypeVersion': 'FileSystemTypeVersion',
      'vpcSubnet': {
        'availabilityZone': '*',
        'subnetId': '*',
        'internetConnectivityEstablished': '*',
        'ipv4CidrBlock': '*',
        'routeTable': {
          'routeTableId': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'backupId': '*',
      'kmsKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'securityGroup': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'storageCapacityGiB': '*',
      'removalPolicy': 'RemovalPolicy',
      'storageType': 'StorageType'
    }
  },
  'aws-cdk-lib.aws-globalaccelerator': {
    'Accelerator': {
      'acceleratorName': '*',
      'enabled': 'boolean',
      'ipAddresses': '*',
      'ipAddressType': 'IpAddressType',
      'addListener': [
        '*',
        {
          'listenerName': '*',
          'portRanges': {
            'fromPort': '*',
            'toPort': '*'
          },
          'protocol': 'ConnectionProtocol',
          'clientAffinity': 'ClientAffinity'
        }
      ]
    },
    'EndpointGroup': {
      'listener': {
        'listenerArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'endpointGroupName': '*',
      'region': '*',
      'healthCheckInterval': '*',
      'healthCheckPath': '*',
      'healthCheckPort': '*',
      'healthCheckProtocol': 'HealthCheckProtocol',
      'healthCheckThreshold': '*',
      'trafficDialPercentage': '*',
      'portOverrides': {
        'listenerPort': '*',
        'endpointPort': '*'
      },
      'endpoints': {
        'region': '*'
      },
      'addEndpoint': [
        {
          'region': '*'
        }
      ],
      'connectionsPeer': [
        '*',
        {
          'vpcId': '*',
          'vpcArn': '*',
          'vpcCidrBlock': '*',
          'publicSubnets': {
            'availabilityZone': '*',
            'subnetId': '*',
            'internetConnectivityEstablished': '*',
            'ipv4CidrBlock': '*',
            'routeTable': {
              'routeTableId': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'availabilityZones': '*',
          'vpnGatewayId': '*'
        }
      ]
    },
    'Listener': {
      'accelerator': {
        'acceleratorArn': '*',
        'dnsName': '*',
        'dualStackDnsName': '*',
        'ipv4Addresses': '*',
        'ipv6Addresses': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'listenerName': '*',
      'portRanges': {
        'fromPort': '*',
        'toPort': '*'
      },
      'protocol': 'ConnectionProtocol',
      'clientAffinity': 'ClientAffinity',
      'addEndpointGroup': [
        '*',
        {
          'endpointGroupName': '*',
          'region': '*',
          'healthCheckInterval': '*',
          'healthCheckPath': '*',
          'healthCheckPort': '*',
          'healthCheckProtocol': 'HealthCheckProtocol',
          'healthCheckThreshold': '*',
          'trafficDialPercentage': '*',
          'portOverrides': {
            'listenerPort': '*',
            'endpointPort': '*'
          },
          'endpoints': {
            'region': '*'
          }
        }
      ]
    }
  },
  'aws-cdk-lib.aws-iam': {
    'AccessKey': {
      'serial': '*',
      'status': 'AccessKeyStatus',
      'user': {
        'userName': '*',
        'userArn': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      }
    },
    'Group': {
      'groupName': '*',
      'managedPolicies': {
        'managedPolicyArn': '*'
      },
      'path': '*',
      'addManagedPolicy': [
        {
          'managedPolicyArn': '*'
        }
      ]
    },
    'InstanceProfile': {
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'instanceProfileName': '*',
      'path': '*'
    },
    'LazyRole': {
      'assumedBy': {
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*'
      },
      'externalId': '*',
      'externalIds': '*',
      'managedPolicies': {
        'managedPolicyArn': '*'
      },
      'inlinePolicies': '*',
      'path': '*',
      'permissionsBoundary': {
        'managedPolicyArn': '*'
      },
      'roleName': '*',
      'maxSessionDuration': '*',
      'description': '*',
      'addToPrincipalPolicy': [
        '*'
      ],
      'addToPolicy': [
        '*'
      ],
      'attachInlinePolicy': [
        '*'
      ],
      'addManagedPolicy': [
        {
          'managedPolicyArn': '*'
        }
      ],
      'grant': [
        {
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*'
        },
        '*'
      ],
      'grantPassRole': [
        {
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*'
        }
      ],
      'grantAssumeRole': [
        {
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*'
        }
      ]
    },
    'ManagedPolicy': {
      'managedPolicyName': '*',
      'description': '*',
      'path': '*',
      'users': {
        'userName': '*',
        'userArn': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'roles': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'groups': {
        'groupName': '*',
        'groupArn': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'statements': '*',
      'document': '*',
      'addStatements': [
        '*'
      ],
      'attachToUser': [
        {
          'userName': '*',
          'userArn': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      ],
      'attachToRole': [
        {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      ],
      'attachToGroup': [
        {
          'groupName': '*',
          'groupArn': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      ]
    },
    'OpenIdConnectProvider': {
      'url': '*',
      'clientIds': '*',
      'thumbprints': '*'
    },
    'Policy': {
      'policyName': '*',
      'users': {
        'userName': '*',
        'userArn': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'roles': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'groups': {
        'groupName': '*',
        'groupArn': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'statements': '*',
      'force': 'boolean',
      'document': '*',
      'addStatements': [
        '*'
      ],
      'attachToUser': [
        {
          'userName': '*',
          'userArn': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      ],
      'attachToRole': [
        {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      ],
      'attachToGroup': [
        {
          'groupName': '*',
          'groupArn': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      ]
    },
    'Role': {
      'assumedBy': {
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*'
      },
      'externalId': '*',
      'externalIds': '*',
      'managedPolicies': {
        'managedPolicyArn': '*'
      },
      'inlinePolicies': '*',
      'path': '*',
      'permissionsBoundary': {
        'managedPolicyArn': '*'
      },
      'roleName': '*',
      'maxSessionDuration': '*',
      'description': '*',
      'addToPrincipalPolicy': [
        '*'
      ],
      'addToPolicy': [
        '*'
      ],
      'addManagedPolicy': [
        {
          'managedPolicyArn': '*'
        }
      ],
      'attachInlinePolicy': [
        '*'
      ],
      'grant': [
        {
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*'
        },
        '*'
      ],
      'grantPassRole': [
        {
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*'
        }
      ],
      'grantAssumeRole': [
        {
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*'
        }
      ],
      'withoutPolicyUpdates': [
        {
          'addGrantsToResources': 'boolean'
        }
      ],
      'applyRemovalPolicy': [
        'RemovalPolicy'
      ]
    },
    'SamlProvider': {
      'name': '*',
      'metadataDocument': '*'
    },
    'User': {
      'groups': {
        'groupName': '*',
        'groupArn': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'managedPolicies': {
        'managedPolicyArn': '*'
      },
      'path': '*',
      'permissionsBoundary': {
        'managedPolicyArn': '*'
      },
      'userName': '*',
      'password': '*',
      'passwordResetRequired': 'boolean',
      'addToGroup': [
        {
          'groupName': '*',
          'groupArn': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      ],
      'addManagedPolicy': [
        {
          'managedPolicyArn': '*'
        }
      ],
      'attachInlinePolicy': [
        '*'
      ],
      'addToPrincipalPolicy': [
        '*'
      ],
      'addToPolicy': [
        '*'
      ]
    }
  },
  'aws-cdk-lib.aws-kinesis': {
    'ResourcePolicy': {
      'stream': {
        'streamArn': '*',
        'streamName': '*',
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'policyDocument': '*'
    },
    'Stream': {
      'streamName': '*',
      'retentionPeriod': '*',
      'shardCount': '*',
      'encryption': 'StreamEncryption',
      'encryptionKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'streamMode': 'StreamMode',
      'removalPolicy': 'RemovalPolicy'
    }
  },
  'aws-cdk-lib.aws-kinesisfirehose': {
    'DeliveryStream': {
      'destination': '*',
      'deliveryStreamName': '*',
      'source': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'encryption': '*'
    }
  },
  'aws-cdk-lib.aws-kms': {
    'Alias': {
      'aliasName': '*',
      'targetKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'removalPolicy': 'RemovalPolicy'
    },
    'Key': {
      'description': '*',
      'alias': '*',
      'enableKeyRotation': 'boolean',
      'rotationPeriod': '*',
      'enabled': 'boolean',
      'keySpec': 'KeySpec',
      'keyUsage': 'KeyUsage',
      'multiRegion': 'boolean',
      'policy': '*',
      'admins': {
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*'
      },
      'removalPolicy': 'RemovalPolicy',
      'trustAccountIdentities': 'boolean',
      'pendingWindow': '*',
      'grantAdmin': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        }
      ]
    }
  },
  'aws-cdk-lib.aws-lambda': {
    'Alias': {
      'aliasName': '*',
      'version': {
        'version': '*',
        'lambda': {
          'functionName': '*',
          'functionArn': '*',
          'role': {
            'roleArn': '*',
            'roleName': '*',
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*',
            'grantPrincipal': {
              'assumeRoleAction': '*',
              'principalAccount': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'isBoundToVpc': 'boolean',
          'architecture': '*',
          'resourceArnsForGrantInvoke': '*',
          'connections': '*'
        },
        'edgeArn': '*',
        'functionName': '*',
        'functionArn': '*',
        'isBoundToVpc': 'boolean',
        'resourceArnsForGrantInvoke': '*'
      },
      'description': '*',
      'additionalVersions': {
        'version': {
          'version': '*',
          'lambda': {
            'functionName': '*',
            'functionArn': '*',
            'role': {
              'roleArn': '*',
              'roleName': '*',
              'assumeRoleAction': '*',
              'policyFragment': '*',
              'principalAccount': '*',
              'grantPrincipal': {
                'assumeRoleAction': '*',
                'principalAccount': '*'
              },
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'isBoundToVpc': 'boolean',
            'architecture': '*',
            'resourceArnsForGrantInvoke': '*',
            'connections': '*'
          },
          'edgeArn': '*',
          'functionName': '*',
          'functionArn': '*',
          'isBoundToVpc': 'boolean',
          'resourceArnsForGrantInvoke': '*'
        },
        'weight': '*'
      },
      'provisionedConcurrentExecutions': '*',
      'onFailure': '*',
      'onSuccess': '*',
      'maxEventAge': '*',
      'retryAttempts': '*',
      'metric': [
        '*',
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'addAutoScaling': [
        {
          'minCapacity': '*',
          'maxCapacity': '*'
        }
      ]
    },
    'CodeSigningConfig': {
      'signingProfiles': {
        'signingProfileArn': '*',
        'signingProfileName': '*',
        'signingProfileVersion': '*',
        'signingProfileVersionArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'untrustedArtifactOnDeployment': 'UntrustedArtifactOnDeployment',
      'description': '*'
    },
    'EventInvokeConfig': {
      'function': {
        'functionName': '*',
        'functionArn': '*',
        'role': {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'isBoundToVpc': 'boolean',
        'latestVersion': {
          'version': '*',
          'edgeArn': '*',
          'functionName': '*',
          'functionArn': '*',
          'isBoundToVpc': 'boolean',
          'architecture': '*',
          'resourceArnsForGrantInvoke': '*',
          'connections': '*'
        },
        'resourceArnsForGrantInvoke': '*'
      },
      'qualifier': '*',
      'onFailure': '*',
      'onSuccess': '*',
      'maxEventAge': '*',
      'retryAttempts': '*'
    },
    'EventSourceMapping': {
      'target': {
        'functionName': '*',
        'functionArn': '*',
        'role': {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'isBoundToVpc': 'boolean',
        'latestVersion': {
          'version': '*',
          'edgeArn': '*',
          'functionName': '*',
          'functionArn': '*',
          'isBoundToVpc': 'boolean',
          'architecture': '*',
          'resourceArnsForGrantInvoke': '*',
          'connections': '*'
        },
        'resourceArnsForGrantInvoke': '*'
      },
      'eventSourceArn': '*',
      'batchSize': '*',
      'bisectBatchOnError': 'boolean',
      'onFailure': '*',
      'enabled': 'boolean',
      'startingPosition': 'StartingPosition',
      'startingPositionTimestamp': '*',
      'reportBatchItemFailures': 'boolean',
      'maxBatchingWindow': '*',
      'maxConcurrency': '*',
      'maxRecordAge': '*',
      'retryAttempts': '*',
      'parallelizationFactor': '*',
      'kafkaTopic': '*',
      'tumblingWindow': '*',
      'kafkaBootstrapServers': '*',
      'kafkaConsumerGroupId': '*',
      'sourceAccessConfigurations': {
        'type': '*',
        'uri': '*'
      },
      'filters': '*',
      'filterEncryption': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'supportS3OnFailureDestination': 'boolean',
      'provisionedPollerConfig': {
        'minimumPollers': '*',
        'maximumPollers': '*'
      },
      'metricsConfig': {
        'metrics': 'MetricType'
      }
    },
    'LatestVersion': {
      'addAlias': [
        '*',
        {
          'description': '*',
          'additionalVersions': {
            'version': {
              'version': '*',
              'lambda': {
                'functionName': '*',
                'functionArn': '*',
                'role': {
                  'roleArn': '*',
                  'roleName': '*',
                  'assumeRoleAction': '*',
                  'policyFragment': '*',
                  'principalAccount': '*',
                  'grantPrincipal': {
                    'assumeRoleAction': '*',
                    'principalAccount': '*'
                  },
                  'stack': '*',
                  'env': {
                    'account': '*',
                    'region': '*'
                  },
                  'node': '*'
                },
                'isBoundToVpc': 'boolean',
                'architecture': '*',
                'resourceArnsForGrantInvoke': '*',
                'connections': '*'
              },
              'edgeArn': '*',
              'functionName': '*',
              'functionArn': '*',
              'isBoundToVpc': 'boolean',
              'resourceArnsForGrantInvoke': '*'
            },
            'weight': '*'
          },
          'provisionedConcurrentExecutions': '*',
          'onFailure': '*',
          'maxEventAge': '*',
          'retryAttempts': '*'
        }
      ]
    },
    'FunctionUrl': {
      'function': {
        'functionName': '*',
        'functionArn': '*',
        'role': {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'isBoundToVpc': 'boolean',
        'latestVersion': {
          'version': '*',
          'edgeArn': '*',
          'functionName': '*',
          'functionArn': '*',
          'isBoundToVpc': 'boolean',
          'architecture': '*',
          'resourceArnsForGrantInvoke': '*',
          'connections': '*'
        },
        'resourceArnsForGrantInvoke': '*'
      },
      'authType': 'FunctionUrlAuthType',
      'cors': {
        'allowCredentials': 'boolean',
        'allowedHeaders': '*',
        'allowedMethods': 'HttpMethod',
        'allowedOrigins': '*',
        'exposedHeaders': '*',
        'maxAge': '*'
      },
      'invokeMode': 'InvokeMode',
      'grantInvokeUrl': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        }
      ]
    },
    'Function': {
      'runtime': '*',
      'code': '*',
      'handler': '*',
      'description': '*',
      'timeout': '*',
      'environment': '*',
      'functionName': '*',
      'memorySize': '*',
      'ephemeralStorageSize': '*',
      'initialPolicy': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'ipv6AllowedForDualStack': 'boolean',
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'securityGroup': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'allowAllOutbound': 'boolean',
      'allowAllIpv6Outbound': 'boolean',
      'deadLetterQueueEnabled': 'boolean',
      'deadLetterQueue': {
        'queueArn': '*',
        'queueUrl': '*',
        'queueName': '*',
        'encryptionMasterKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'fifo': 'boolean',
        'encryptionType': 'QueueEncryption'
      },
      'deadLetterTopic': {
        'topicArn': '*',
        'topicName': '*',
        'contentBasedDeduplication': 'boolean',
        'fifo': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'tracing': 'Tracing',
      'snapStart': '*',
      'profiling': 'boolean',
      'profilingGroup': {
        'profilingGroupName': '*',
        'profilingGroupArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'insightsVersion': '*',
      'adotInstrumentation': {
        'layerVersion': '*',
        'execWrapper': 'AdotLambdaExecWrapper'
      },
      'paramsAndSecrets': '*',
      'layers': {
        'layerVersionArn': '*',
        'compatibleRuntimes': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'reservedConcurrentExecutions': '*',
      'events': '*',
      'logRetention': 'RetentionDays',
      'logRetentionRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'logRetentionRetryOptions': {
        'maxRetries': '*',
        'base': '*'
      },
      'currentVersionOptions': {
        'codeSha256': '*',
        'description': '*',
        'provisionedConcurrentExecutions': '*',
        'removalPolicy': 'RemovalPolicy',
        'onFailure': '*',
        'maxEventAge': '*',
        'retryAttempts': '*'
      },
      'filesystem': '*',
      'allowPublicSubnet': 'boolean',
      'environmentEncryption': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'codeSigningConfig': {
        'codeSigningConfigArn': '*',
        'codeSigningConfigId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'architectures': '*',
      'architecture': '*',
      'runtimeManagementMode': '*',
      'logGroup': {
        'logGroupArn': '*',
        'logGroupName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'logFormat': '*',
      'loggingFormat': 'LoggingFormat',
      'recursiveLoop': 'RecursiveLoop',
      'applicationLogLevel': '*',
      'applicationLogLevelV2': 'ApplicationLogLevel',
      'systemLogLevel': '*',
      'systemLogLevelV2': 'SystemLogLevel',
      'onFailure': '*',
      'onSuccess': '*',
      'maxEventAge': '*',
      'retryAttempts': '*',
      'addEnvironment': [
        '*',
        '*',
        {
          'removeInEdge': 'boolean'
        }
      ],
      'invalidateVersionBasedOn': [
        '*'
      ],
      'addLayers': [
        {
          'layerVersionArn': '*',
          'compatibleRuntimes': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      ],
      'addVersion': [
        '*',
        '*',
        '*',
        '*',
        {
          'onFailure': '*',
          'maxEventAge': '*',
          'retryAttempts': '*'
        }
      ],
      'addAlias': [
        '*',
        {
          'description': '*',
          'additionalVersions': {
            'version': {
              'version': '*',
              'lambda': {
                'functionName': '*',
                'functionArn': '*',
                'role': {
                  'roleArn': '*',
                  'roleName': '*',
                  'assumeRoleAction': '*',
                  'policyFragment': '*',
                  'principalAccount': '*',
                  'grantPrincipal': {
                    'assumeRoleAction': '*',
                    'principalAccount': '*'
                  },
                  'stack': '*',
                  'env': {
                    'account': '*',
                    'region': '*'
                  },
                  'node': '*'
                },
                'isBoundToVpc': 'boolean',
                'architecture': '*',
                'resourceArnsForGrantInvoke': '*',
                'connections': '*'
              },
              'edgeArn': '*',
              'functionName': '*',
              'functionArn': '*',
              'isBoundToVpc': 'boolean',
              'resourceArnsForGrantInvoke': '*'
            },
            'weight': '*'
          },
          'provisionedConcurrentExecutions': '*',
          'onFailure': '*',
          'maxEventAge': '*',
          'retryAttempts': '*'
        }
      ],
      '_checkEdgeCompatibility': []
    },
    'DockerImageFunction': {
      'code': '*',
      'description': '*',
      'timeout': '*',
      'environment': '*',
      'functionName': '*',
      'memorySize': '*',
      'ephemeralStorageSize': '*',
      'initialPolicy': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'ipv6AllowedForDualStack': 'boolean',
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'securityGroup': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'allowAllOutbound': 'boolean',
      'allowAllIpv6Outbound': 'boolean',
      'deadLetterQueueEnabled': 'boolean',
      'deadLetterQueue': {
        'queueArn': '*',
        'queueUrl': '*',
        'queueName': '*',
        'encryptionMasterKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'fifo': 'boolean',
        'encryptionType': 'QueueEncryption'
      },
      'deadLetterTopic': {
        'topicArn': '*',
        'topicName': '*',
        'contentBasedDeduplication': 'boolean',
        'fifo': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'tracing': 'Tracing',
      'snapStart': '*',
      'profiling': 'boolean',
      'profilingGroup': {
        'profilingGroupName': '*',
        'profilingGroupArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'insightsVersion': '*',
      'adotInstrumentation': {
        'layerVersion': '*',
        'execWrapper': 'AdotLambdaExecWrapper'
      },
      'paramsAndSecrets': '*',
      'layers': {
        'layerVersionArn': '*',
        'compatibleRuntimes': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'reservedConcurrentExecutions': '*',
      'events': '*',
      'logRetention': 'RetentionDays',
      'logRetentionRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'logRetentionRetryOptions': {
        'maxRetries': '*',
        'base': '*'
      },
      'currentVersionOptions': {
        'codeSha256': '*',
        'description': '*',
        'provisionedConcurrentExecutions': '*',
        'removalPolicy': 'RemovalPolicy',
        'onFailure': '*',
        'maxEventAge': '*',
        'retryAttempts': '*'
      },
      'filesystem': '*',
      'allowPublicSubnet': 'boolean',
      'environmentEncryption': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'codeSigningConfig': {
        'codeSigningConfigArn': '*',
        'codeSigningConfigId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'architectures': '*',
      'architecture': '*',
      'runtimeManagementMode': '*',
      'logGroup': {
        'logGroupArn': '*',
        'logGroupName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'logFormat': '*',
      'loggingFormat': 'LoggingFormat',
      'recursiveLoop': 'RecursiveLoop',
      'applicationLogLevel': '*',
      'applicationLogLevelV2': 'ApplicationLogLevel',
      'systemLogLevel': '*',
      'systemLogLevelV2': 'SystemLogLevel',
      'onFailure': '*',
      'onSuccess': '*',
      'maxEventAge': '*',
      'retryAttempts': '*'
    },
    'Version': {
      'lambda': {
        'functionName': '*',
        'functionArn': '*',
        'role': {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'isBoundToVpc': 'boolean',
        'latestVersion': {
          'version': '*',
          'edgeArn': '*',
          'functionName': '*',
          'functionArn': '*',
          'isBoundToVpc': 'boolean',
          'architecture': '*',
          'resourceArnsForGrantInvoke': '*',
          'connections': '*'
        },
        'resourceArnsForGrantInvoke': '*'
      },
      'codeSha256': '*',
      'description': '*',
      'provisionedConcurrentExecutions': '*',
      'removalPolicy': 'RemovalPolicy',
      'onFailure': '*',
      'onSuccess': '*',
      'maxEventAge': '*',
      'retryAttempts': '*',
      'metric': [
        '*',
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'addAlias': [
        '*',
        {
          'description': '*',
          'additionalVersions': {
            'version': {
              'version': '*',
              'lambda': {
                'functionName': '*',
                'functionArn': '*',
                'role': {
                  'roleArn': '*',
                  'roleName': '*',
                  'assumeRoleAction': '*',
                  'policyFragment': '*',
                  'principalAccount': '*',
                  'grantPrincipal': {
                    'assumeRoleAction': '*',
                    'principalAccount': '*'
                  },
                  'stack': '*',
                  'env': {
                    'account': '*',
                    'region': '*'
                  },
                  'node': '*'
                },
                'isBoundToVpc': 'boolean',
                'architecture': '*',
                'resourceArnsForGrantInvoke': '*',
                'connections': '*'
              },
              'edgeArn': '*',
              'functionName': '*',
              'functionArn': '*',
              'isBoundToVpc': 'boolean',
              'resourceArnsForGrantInvoke': '*'
            },
            'weight': '*'
          },
          'provisionedConcurrentExecutions': '*',
          'onFailure': '*',
          'maxEventAge': '*',
          'retryAttempts': '*'
        }
      ]
    },
    'LayerVersion': {
      'compatibleRuntimes': '*',
      'compatibleArchitectures': '*',
      'code': '*',
      'description': '*',
      'license': '*',
      'layerVersionName': '*',
      'removalPolicy': 'RemovalPolicy'
    },
    'SingletonFunction': {
      'uuid': '*',
      'lambdaPurpose': '*',
      'runtime': '*',
      'code': '*',
      'handler': '*',
      'description': '*',
      'timeout': '*',
      'environment': '*',
      'functionName': '*',
      'memorySize': '*',
      'ephemeralStorageSize': '*',
      'initialPolicy': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'ipv6AllowedForDualStack': 'boolean',
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'securityGroup': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'allowAllOutbound': 'boolean',
      'allowAllIpv6Outbound': 'boolean',
      'deadLetterQueueEnabled': 'boolean',
      'deadLetterQueue': {
        'queueArn': '*',
        'queueUrl': '*',
        'queueName': '*',
        'encryptionMasterKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'fifo': 'boolean',
        'encryptionType': 'QueueEncryption'
      },
      'deadLetterTopic': {
        'topicArn': '*',
        'topicName': '*',
        'contentBasedDeduplication': 'boolean',
        'fifo': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'tracing': 'Tracing',
      'snapStart': '*',
      'profiling': 'boolean',
      'profilingGroup': {
        'profilingGroupName': '*',
        'profilingGroupArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'insightsVersion': '*',
      'adotInstrumentation': {
        'layerVersion': '*',
        'execWrapper': 'AdotLambdaExecWrapper'
      },
      'paramsAndSecrets': '*',
      'layers': {
        'layerVersionArn': '*',
        'compatibleRuntimes': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'reservedConcurrentExecutions': '*',
      'events': '*',
      'logRetention': 'RetentionDays',
      'logRetentionRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'logRetentionRetryOptions': {
        'maxRetries': '*',
        'base': '*'
      },
      'currentVersionOptions': {
        'codeSha256': '*',
        'description': '*',
        'provisionedConcurrentExecutions': '*',
        'removalPolicy': 'RemovalPolicy',
        'onFailure': '*',
        'maxEventAge': '*',
        'retryAttempts': '*'
      },
      'filesystem': '*',
      'allowPublicSubnet': 'boolean',
      'environmentEncryption': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'codeSigningConfig': {
        'codeSigningConfigArn': '*',
        'codeSigningConfigId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'architectures': '*',
      'architecture': '*',
      'runtimeManagementMode': '*',
      'logGroup': {
        'logGroupArn': '*',
        'logGroupName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'logFormat': '*',
      'loggingFormat': 'LoggingFormat',
      'recursiveLoop': 'RecursiveLoop',
      'applicationLogLevel': '*',
      'applicationLogLevelV2': 'ApplicationLogLevel',
      'systemLogLevel': '*',
      'systemLogLevelV2': 'SystemLogLevel',
      'onFailure': '*',
      'onSuccess': '*',
      'maxEventAge': '*',
      'retryAttempts': '*',
      'addEnvironment': [
        '*',
        '*',
        {
          'removeInEdge': 'boolean'
        }
      ],
      'addLayers': [
        {
          'layerVersionArn': '*',
          'compatibleRuntimes': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      ],
      'addPermission': [
        '*',
        {
          'action': '*',
          'eventSourceToken': '*',
          'principal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          },
          'scope': '*',
          'sourceAccount': '*',
          'sourceArn': '*',
          'organizationId': '*',
          'functionUrlAuthType': 'FunctionUrlAuthType'
        }
      ],
      'addDependency': [
        '*'
      ],
      'addMetadata': [
        '*',
        '*',
        {
          'stackTrace': 'boolean',
          'traceFromFunction': '*'
        }
      ],
      'dependOn': [
        {
          'node': '*'
        }
      ],
      '_checkEdgeCompatibility': []
    }
  },
  'aws-cdk-lib.aws-lambda-nodejs': {
    'NodejsFunction': {
      'entry': '*',
      'handler': '*',
      'runtime': '*',
      'awsSdkConnectionReuse': 'boolean',
      'depsLockFilePath': '*',
      'bundling': {
        'minify': 'boolean',
        'sourceMap': 'boolean',
        'sourceMapMode': 'SourceMapMode',
        'sourcesContent': 'boolean',
        'target': '*',
        'loader': '*',
        'logLevel': 'LogLevel',
        'keepNames': 'boolean',
        'tsconfig': '*',
        'metafile': 'boolean',
        'banner': '*',
        'footer': '*',
        'charset': 'Charset',
        'define': '*',
        'externalModules': '*',
        'bundleAwsSDK': 'boolean',
        'nodeModules': '*',
        'esbuildVersion': '*',
        'esbuildArgs': '*',
        'buildArgs': '*',
        'forceDockerBundling': 'boolean',
        'preCompilation': 'boolean',
        'dockerImage': '*',
        'commandHooks': '*',
        'assetHash': '*',
        'format': 'OutputFormat',
        'mainFields': '*',
        'inject': '*',
        'bundlingFileAccess': 'BundlingFileAccess',
        'entrypoint': '*',
        'command': '*',
        'volumes': {
          'hostPath': '*',
          'containerPath': '*',
          'consistency': 'DockerVolumeConsistency'
        },
        'volumesFrom': '*',
        'environment': '*',
        'workingDirectory': '*',
        'user': '*',
        'securityOpt': '*',
        'network': '*',
        'platform': '*'
      },
      'projectRoot': '*',
      'code': '*',
      'description': '*',
      'timeout': '*',
      'environment': '*',
      'functionName': '*',
      'memorySize': '*',
      'ephemeralStorageSize': '*',
      'initialPolicy': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'ipv6AllowedForDualStack': 'boolean',
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'securityGroup': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'allowAllOutbound': 'boolean',
      'allowAllIpv6Outbound': 'boolean',
      'deadLetterQueueEnabled': 'boolean',
      'deadLetterQueue': {
        'queueArn': '*',
        'queueUrl': '*',
        'queueName': '*',
        'encryptionMasterKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'fifo': 'boolean',
        'encryptionType': 'QueueEncryption'
      },
      'deadLetterTopic': {
        'topicArn': '*',
        'topicName': '*',
        'contentBasedDeduplication': 'boolean',
        'fifo': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'tracing': 'Tracing',
      'snapStart': '*',
      'profiling': 'boolean',
      'profilingGroup': {
        'profilingGroupName': '*',
        'profilingGroupArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'insightsVersion': '*',
      'adotInstrumentation': {
        'layerVersion': '*',
        'execWrapper': 'AdotLambdaExecWrapper'
      },
      'paramsAndSecrets': '*',
      'layers': {
        'layerVersionArn': '*',
        'compatibleRuntimes': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'reservedConcurrentExecutions': '*',
      'events': '*',
      'logRetention': 'RetentionDays',
      'logRetentionRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'logRetentionRetryOptions': {
        'maxRetries': '*',
        'base': '*'
      },
      'currentVersionOptions': {
        'codeSha256': '*',
        'description': '*',
        'provisionedConcurrentExecutions': '*',
        'removalPolicy': 'RemovalPolicy',
        'onFailure': '*',
        'maxEventAge': '*',
        'retryAttempts': '*'
      },
      'filesystem': '*',
      'allowPublicSubnet': 'boolean',
      'environmentEncryption': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'codeSigningConfig': {
        'codeSigningConfigArn': '*',
        'codeSigningConfigId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'architectures': '*',
      'architecture': '*',
      'runtimeManagementMode': '*',
      'logGroup': {
        'logGroupArn': '*',
        'logGroupName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'logFormat': '*',
      'loggingFormat': 'LoggingFormat',
      'recursiveLoop': 'RecursiveLoop',
      'applicationLogLevel': '*',
      'applicationLogLevelV2': 'ApplicationLogLevel',
      'systemLogLevel': '*',
      'systemLogLevelV2': 'SystemLogLevel',
      'onFailure': '*',
      'onSuccess': '*',
      'maxEventAge': '*',
      'retryAttempts': '*'
    }
  },
  'aws-cdk-lib.aws-logs': {
    'CrossAccountDestination': {
      'destinationName': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'targetArn': '*',
      'addToPolicy': [
        '*'
      ],
      'bind': [
        '*',
        {
          'logGroupArn': '*',
          'logGroupName': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      ]
    },
    'LogGroup': {
      'encryptionKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'logGroupName': '*',
      'dataProtectionPolicy': '*',
      'retention': 'RetentionDays',
      'logGroupClass': 'LogGroupClass',
      'removalPolicy': 'RemovalPolicy'
    },
    'LogStream': {
      'logGroup': {
        'logGroupArn': '*',
        'logGroupName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'logStreamName': '*',
      'removalPolicy': 'RemovalPolicy'
    },
    'MetricFilter': {
      'logGroup': {
        'logGroupArn': '*',
        'logGroupName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'filterPattern': {
        'logPatternString': '*'
      },
      'metricNamespace': '*',
      'metricName': '*',
      'metricValue': '*',
      'defaultValue': '*',
      'dimensions': '*',
      'unit': 'Unit',
      'filterName': '*',
      'metric': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ]
    },
    'ResourcePolicy': {},
    'QueryDefinition': {
      'queryDefinitionName': '*',
      'queryString': '*',
      'logGroups': {
        'logGroupArn': '*',
        'logGroupName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      }
    },
    'SubscriptionFilter': {
      'logGroup': {
        'logGroupArn': '*',
        'logGroupName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'destination': '*',
      'filterPattern': {
        'logPatternString': '*'
      },
      'filterName': '*',
      'distribution': 'Distribution'
    }
  },
  'aws-cdk-lib.aws-opensearchservice': {
    'Domain': {
      'accessPolicies': '*',
      'advancedOptions': '*',
      'cognitoDashboardsAuth': {
        'identityPoolId': '*',
        'role': {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'userPoolId': '*'
      },
      'domainName': '*',
      'ebs': {
        'enabled': 'boolean',
        'iops': '*',
        'throughput': '*',
        'volumeSize': '*',
        'volumeType': 'EbsDeviceVolumeType'
      },
      'capacity': {
        'masterNodes': '*',
        'masterNodeInstanceType': '*',
        'dataNodes': '*',
        'dataNodeInstanceType': '*',
        'warmNodes': '*',
        'warmInstanceType': '*',
        'multiAzWithStandbyEnabled': 'boolean'
      },
      'zoneAwareness': {
        'enabled': 'boolean',
        'availabilityZoneCount': '*'
      },
      'version': '*',
      'encryptionAtRest': {
        'enabled': 'boolean',
        'kmsKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'logging': {
        'slowSearchLogEnabled': 'boolean',
        'slowSearchLogGroup': {
          'logGroupArn': '*',
          'logGroupName': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'slowIndexLogEnabled': 'boolean',
        'appLogEnabled': 'boolean',
        'auditLogEnabled': 'boolean'
      },
      'nodeToNodeEncryption': 'boolean',
      'automatedSnapshotStartHour': '*',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'enforceHttps': 'boolean',
      'tlsSecurityPolicy': 'TLSSecurityPolicy',
      'fineGrainedAccessControl': {
        'masterUserArn': '*',
        'masterUserName': '*',
        'masterUserPassword': '*',
        'samlAuthenticationEnabled': 'boolean',
        'samlAuthenticationOptions': {
          'idpEntityId': '*',
          'idpMetadataContent': '*',
          'masterUserName': '*',
          'masterBackendRole': '*',
          'rolesKey': '*',
          'subjectKey': '*',
          'sessionTimeoutMinutes': '*'
        }
      },
      'useUnsignedBasicAuth': 'boolean',
      'enableVersionUpgrade': 'boolean',
      'removalPolicy': 'RemovalPolicy',
      'customEndpoint': {
        'domainName': '*',
        'certificate': {
          'certificateArn': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'hostedZone': {
          'hostedZoneId': '*',
          'zoneName': '*',
          'hostedZoneArn': '*',
          'hostedZoneNameServers': '*'
        }
      },
      'offPeakWindowEnabled': 'boolean',
      'offPeakWindowStart': {
        'hours': '*',
        'minutes': '*'
      },
      'enableAutoSoftwareUpdate': 'boolean',
      'ipAddressType': 'IpAddressType',
      'suppressLogsResourcePolicy': 'boolean',
      'coldStorageEnabled': 'boolean',
      'addAccessPolicies': [
        '*'
      ]
    }
  },
  'aws-cdk-lib.aws-rds': {
    'AuroraClusterInstance': {
      'cluster': {
        'clusterIdentifier': '*',
        'clusterResourceIdentifier': '*',
        'instanceIdentifiers': '*',
        'clusterEndpoint': '*',
        'engine': {
          'singleUserRotationApplication': '*',
          'supportedLogTypes': '*',
          'combineImportAndExportRoles': 'boolean',
          'engineType': '*',
          'engineVersion': {
            'fullVersion': '*',
            'majorVersion': '*'
          },
          'parameterGroupFamily': '*',
          'engineFamily': '*',
          'defaultUsername': '*'
        },
        'clusterArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'connections': '*'
      },
      'instanceType': '*',
      'promotionTier': '*',
      'instanceIdentifier': '*',
      'autoMinorVersionUpgrade': 'boolean',
      'enablePerformanceInsights': 'boolean',
      'performanceInsightRetention': 'PerformanceInsightRetention',
      'performanceInsightEncryptionKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'publiclyAccessible': 'boolean',
      'preferredMaintenanceWindow': '*',
      'parameters': '*',
      'allowMajorVersionUpgrade': 'boolean',
      'parameterGroup': {
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'isFromLegacyInstanceProps': 'boolean',
      'caCertificate': '*',
      'monitoringInterval': '*',
      'monitoringRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'removalPolicy': 'RemovalPolicy',
      'subnetGroup': {
        'subnetGroupName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      }
    },
    'ImportedDatabaseCluster': {
      'clusterIdentifier': '*',
      'clusterResourceIdentifier': '*',
      'port': '*',
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'instanceIdentifiers': '*',
      'clusterEndpointAddress': '*',
      'readerEndpointAddress': '*',
      'instanceEndpointAddresses': '*',
      'engine': {
        'singleUserRotationApplication': '*',
        'supportedLogTypes': '*',
        'combineImportAndExportRoles': 'boolean',
        'engineType': '*',
        'engineVersion': {
          'fullVersion': '*',
          'majorVersion': '*'
        },
        'parameterGroupFamily': '*',
        'engineFamily': '*',
        'defaultUsername': '*'
      },
      'secret': {
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'secretArn': '*',
        'secretFullArn': '*',
        'secretName': '*',
        'secretValue': '*'
      },
      'dataApiEnabled': 'boolean'
    },
    'DatabaseCluster': {
      'credentials': '*',
      'engine': {
        'singleUserRotationApplication': '*',
        'supportedLogTypes': '*',
        'combineImportAndExportRoles': 'boolean',
        'engineType': '*',
        'engineVersion': {
          'fullVersion': '*',
          'majorVersion': '*'
        },
        'parameterGroupFamily': '*',
        'engineFamily': '*',
        'defaultUsername': '*'
      },
      'instances': '*',
      'instanceProps': {
        'instanceType': '*',
        'vpc': {
          'vpcId': '*',
          'vpcArn': '*',
          'vpcCidrBlock': '*',
          'publicSubnets': {
            'availabilityZone': '*',
            'subnetId': '*',
            'internetConnectivityEstablished': '*',
            'ipv4CidrBlock': '*',
            'routeTable': {
              'routeTableId': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'availabilityZones': '*',
          'vpnGatewayId': '*'
        },
        'vpcSubnets': {
          'subnetType': 'SubnetType',
          'availabilityZones': '*',
          'subnetGroupName': '*',
          'subnetName': '*',
          'onePerAz': 'boolean',
          'subnetFilters': '*'
        },
        'securityGroups': {
          'securityGroupId': '*',
          'allowAllOutbound': 'boolean',
          'canInlineRule': 'boolean',
          'uniqueId': '*',
          'connections': '*'
        },
        'parameterGroup': '*',
        'parameters': '*',
        'enablePerformanceInsights': 'boolean',
        'performanceInsightRetention': 'PerformanceInsightRetention',
        'performanceInsightEncryptionKey': {
          'keyArn': '*',
          'keyId': '*'
        },
        'autoMinorVersionUpgrade': 'boolean',
        'allowMajorVersionUpgrade': 'boolean',
        'deleteAutomatedBackups': 'boolean',
        'publiclyAccessible': 'boolean',
        'preferredMaintenanceWindow': '*'
      },
      'writer': '*',
      'readers': '*',
      'serverlessV2MaxCapacity': '*',
      'serverlessV2MinCapacity': '*',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'instanceUpdateBehaviour': 'InstanceUpdateBehaviour',
      'backtrackWindow': '*',
      'backup': {
        'retention': '*',
        'preferredWindow': '*'
      },
      'port': '*',
      'clusterIdentifier': '*',
      'instanceIdentifierBase': '*',
      'defaultDatabaseName': '*',
      'deletionProtection': 'boolean',
      'preferredMaintenanceWindow': '*',
      'parameterGroup': {
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'parameters': '*',
      'removalPolicy': 'RemovalPolicy',
      'cloudwatchLogsExports': '*',
      'cloudwatchLogsRetention': 'RetentionDays',
      'cloudwatchLogsRetentionRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'monitoringInterval': '*',
      'monitoringRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'enableClusterLevelEnhancedMonitoring': 'boolean',
      's3ImportRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      's3ImportBuckets': {
        'bucketArn': '*',
        'bucketName': '*',
        'bucketWebsiteUrl': '*',
        'bucketWebsiteDomainName': '*',
        'bucketDomainName': '*',
        'bucketDualStackDomainName': '*',
        'bucketRegionalDomainName': '*',
        'isWebsite': 'boolean',
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'policy': '*',
        'replicationRoleArn': '*'
      },
      's3ExportRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      's3ExportBuckets': {
        'bucketArn': '*',
        'bucketName': '*',
        'bucketWebsiteUrl': '*',
        'bucketWebsiteDomainName': '*',
        'bucketDomainName': '*',
        'bucketDualStackDomainName': '*',
        'bucketRegionalDomainName': '*',
        'isWebsite': 'boolean',
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'policy': '*',
        'replicationRoleArn': '*'
      },
      'subnetGroup': {
        'subnetGroupName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'iamAuthentication': 'boolean',
      'storageEncrypted': 'boolean',
      'storageEncryptionKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'storageType': 'DBClusterStorageType',
      'copyTagsToSnapshot': 'boolean',
      'networkType': 'NetworkType',
      'domain': '*',
      'domainRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'enableDataApi': 'boolean',
      'enableLocalWriteForwarding': 'boolean',
      'enablePerformanceInsights': 'boolean',
      'performanceInsightRetention': 'PerformanceInsightRetention',
      'performanceInsightEncryptionKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'autoMinorVersionUpgrade': 'boolean',
      'clusterScalabilityType': 'ClusterScalabilityType',
      'clusterScailabilityType': 'ClusterScailabilityType'
    },
    'DatabaseClusterFromSnapshot': {
      'snapshotIdentifier': '*',
      'credentials': '*',
      'snapshotCredentials': '*',
      'engine': {
        'singleUserRotationApplication': '*',
        'supportedLogTypes': '*',
        'combineImportAndExportRoles': 'boolean',
        'engineType': '*',
        'engineVersion': {
          'fullVersion': '*',
          'majorVersion': '*'
        },
        'parameterGroupFamily': '*',
        'engineFamily': '*',
        'defaultUsername': '*'
      },
      'instances': '*',
      'instanceProps': {
        'instanceType': '*',
        'vpc': {
          'vpcId': '*',
          'vpcArn': '*',
          'vpcCidrBlock': '*',
          'publicSubnets': {
            'availabilityZone': '*',
            'subnetId': '*',
            'internetConnectivityEstablished': '*',
            'ipv4CidrBlock': '*',
            'routeTable': {
              'routeTableId': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'availabilityZones': '*',
          'vpnGatewayId': '*'
        },
        'vpcSubnets': {
          'subnetType': 'SubnetType',
          'availabilityZones': '*',
          'subnetGroupName': '*',
          'subnetName': '*',
          'onePerAz': 'boolean',
          'subnetFilters': '*'
        },
        'securityGroups': {
          'securityGroupId': '*',
          'allowAllOutbound': 'boolean',
          'canInlineRule': 'boolean',
          'uniqueId': '*',
          'connections': '*'
        },
        'parameterGroup': '*',
        'parameters': '*',
        'enablePerformanceInsights': 'boolean',
        'performanceInsightRetention': 'PerformanceInsightRetention',
        'performanceInsightEncryptionKey': {
          'keyArn': '*',
          'keyId': '*'
        },
        'autoMinorVersionUpgrade': 'boolean',
        'allowMajorVersionUpgrade': 'boolean',
        'deleteAutomatedBackups': 'boolean',
        'publiclyAccessible': 'boolean',
        'preferredMaintenanceWindow': '*'
      },
      'writer': '*',
      'readers': '*',
      'serverlessV2MaxCapacity': '*',
      'serverlessV2MinCapacity': '*',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'instanceUpdateBehaviour': 'InstanceUpdateBehaviour',
      'backtrackWindow': '*',
      'backup': {
        'retention': '*',
        'preferredWindow': '*'
      },
      'port': '*',
      'clusterIdentifier': '*',
      'instanceIdentifierBase': '*',
      'defaultDatabaseName': '*',
      'deletionProtection': 'boolean',
      'preferredMaintenanceWindow': '*',
      'parameterGroup': {
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'parameters': '*',
      'removalPolicy': 'RemovalPolicy',
      'cloudwatchLogsExports': '*',
      'cloudwatchLogsRetention': 'RetentionDays',
      'cloudwatchLogsRetentionRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'monitoringInterval': '*',
      'monitoringRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'enableClusterLevelEnhancedMonitoring': 'boolean',
      's3ImportRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      's3ImportBuckets': {
        'bucketArn': '*',
        'bucketName': '*',
        'bucketWebsiteUrl': '*',
        'bucketWebsiteDomainName': '*',
        'bucketDomainName': '*',
        'bucketDualStackDomainName': '*',
        'bucketRegionalDomainName': '*',
        'isWebsite': 'boolean',
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'policy': '*',
        'replicationRoleArn': '*'
      },
      's3ExportRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      's3ExportBuckets': {
        'bucketArn': '*',
        'bucketName': '*',
        'bucketWebsiteUrl': '*',
        'bucketWebsiteDomainName': '*',
        'bucketDomainName': '*',
        'bucketDualStackDomainName': '*',
        'bucketRegionalDomainName': '*',
        'isWebsite': 'boolean',
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'policy': '*',
        'replicationRoleArn': '*'
      },
      'subnetGroup': {
        'subnetGroupName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'iamAuthentication': 'boolean',
      'storageEncrypted': 'boolean',
      'storageEncryptionKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'storageType': 'DBClusterStorageType',
      'copyTagsToSnapshot': 'boolean',
      'networkType': 'NetworkType',
      'domain': '*',
      'domainRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'enableDataApi': 'boolean',
      'enableLocalWriteForwarding': 'boolean',
      'enablePerformanceInsights': 'boolean',
      'performanceInsightRetention': 'PerformanceInsightRetention',
      'performanceInsightEncryptionKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'autoMinorVersionUpgrade': 'boolean',
      'clusterScalabilityType': 'ClusterScalabilityType',
      'clusterScailabilityType': 'ClusterScailabilityType'
    },
    'DatabaseSecret': {
      'username': '*',
      'dbname': '*',
      'secretName': '*',
      'encryptionKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'masterSecret': {
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'secretArn': '*',
        'secretFullArn': '*',
        'secretName': '*',
        'secretValue': '*'
      },
      'excludeCharacters': '*',
      'replaceOnPasswordCriteriaChanges': 'boolean',
      'replicaRegions': {
        'region': '*',
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      }
    },
    'DatabaseInstance': {
      'credentials': '*',
      'characterSetName': '*',
      'storageEncrypted': 'boolean',
      'storageEncryptionKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'engine': {
        'singleUserRotationApplication': '*',
        'supportsReadReplicaBackups': 'boolean',
        'engineType': '*',
        'engineVersion': {
          'fullVersion': '*',
          'majorVersion': '*'
        },
        'parameterGroupFamily': '*',
        'engineFamily': '*',
        'defaultUsername': '*'
      },
      'instanceType': '*',
      'licenseModel': 'LicenseModel',
      'allowMajorVersionUpgrade': 'boolean',
      'timezone': '*',
      'allocatedStorage': '*',
      'databaseName': '*',
      'parameters': '*',
      'multiAz': 'boolean',
      'availabilityZone': '*',
      'storageType': 'StorageType',
      'storageThroughput': '*',
      'iops': '*',
      'processorFeatures': {
        'coreCount': '*',
        'threadsPerCore': '*'
      },
      'instanceIdentifier': '*',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'vpcPlacement': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'port': '*',
      'parameterGroup': {
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'optionGroup': {
        'optionGroupName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'iamAuthentication': 'boolean',
      'backupRetention': '*',
      'preferredBackupWindow': '*',
      'copyTagsToSnapshot': 'boolean',
      'deleteAutomatedBackups': 'boolean',
      'monitoringInterval': '*',
      'monitoringRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'enablePerformanceInsights': 'boolean',
      'performanceInsightRetention': 'PerformanceInsightRetention',
      'performanceInsightEncryptionKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'cloudwatchLogsExports': '*',
      'cloudwatchLogsRetention': 'RetentionDays',
      'cloudwatchLogsRetentionRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'autoMinorVersionUpgrade': 'boolean',
      'preferredMaintenanceWindow': '*',
      'deletionProtection': 'boolean',
      'removalPolicy': 'RemovalPolicy',
      'maxAllocatedStorage': '*',
      'domain': '*',
      'domainRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'subnetGroup': {
        'subnetGroupName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      's3ImportRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      's3ImportBuckets': {
        'bucketArn': '*',
        'bucketName': '*',
        'bucketWebsiteUrl': '*',
        'bucketWebsiteDomainName': '*',
        'bucketDomainName': '*',
        'bucketDualStackDomainName': '*',
        'bucketRegionalDomainName': '*',
        'isWebsite': 'boolean',
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'policy': '*',
        'replicationRoleArn': '*'
      },
      's3ExportRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      's3ExportBuckets': {
        'bucketArn': '*',
        'bucketName': '*',
        'bucketWebsiteUrl': '*',
        'bucketWebsiteDomainName': '*',
        'bucketDomainName': '*',
        'bucketDualStackDomainName': '*',
        'bucketRegionalDomainName': '*',
        'isWebsite': 'boolean',
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'policy': '*',
        'replicationRoleArn': '*'
      },
      'publiclyAccessible': 'boolean',
      'networkType': 'NetworkType',
      'caCertificate': '*'
    },
    'DatabaseInstanceFromSnapshot': {
      'snapshotIdentifier': '*',
      'credentials': '*',
      'engine': {
        'singleUserRotationApplication': '*',
        'supportsReadReplicaBackups': 'boolean',
        'engineType': '*',
        'engineVersion': {
          'fullVersion': '*',
          'majorVersion': '*'
        },
        'parameterGroupFamily': '*',
        'engineFamily': '*',
        'defaultUsername': '*'
      },
      'instanceType': '*',
      'licenseModel': 'LicenseModel',
      'allowMajorVersionUpgrade': 'boolean',
      'timezone': '*',
      'allocatedStorage': '*',
      'databaseName': '*',
      'parameters': '*',
      'multiAz': 'boolean',
      'availabilityZone': '*',
      'storageType': 'StorageType',
      'storageThroughput': '*',
      'iops': '*',
      'processorFeatures': {
        'coreCount': '*',
        'threadsPerCore': '*'
      },
      'instanceIdentifier': '*',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'vpcPlacement': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'port': '*',
      'parameterGroup': {
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'optionGroup': {
        'optionGroupName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'iamAuthentication': 'boolean',
      'backupRetention': '*',
      'preferredBackupWindow': '*',
      'copyTagsToSnapshot': 'boolean',
      'deleteAutomatedBackups': 'boolean',
      'monitoringInterval': '*',
      'monitoringRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'enablePerformanceInsights': 'boolean',
      'performanceInsightRetention': 'PerformanceInsightRetention',
      'performanceInsightEncryptionKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'cloudwatchLogsExports': '*',
      'cloudwatchLogsRetention': 'RetentionDays',
      'cloudwatchLogsRetentionRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'autoMinorVersionUpgrade': 'boolean',
      'preferredMaintenanceWindow': '*',
      'deletionProtection': 'boolean',
      'removalPolicy': 'RemovalPolicy',
      'maxAllocatedStorage': '*',
      'domain': '*',
      'domainRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'subnetGroup': {
        'subnetGroupName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      's3ImportRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      's3ImportBuckets': {
        'bucketArn': '*',
        'bucketName': '*',
        'bucketWebsiteUrl': '*',
        'bucketWebsiteDomainName': '*',
        'bucketDomainName': '*',
        'bucketDualStackDomainName': '*',
        'bucketRegionalDomainName': '*',
        'isWebsite': 'boolean',
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'policy': '*',
        'replicationRoleArn': '*'
      },
      's3ExportRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      's3ExportBuckets': {
        'bucketArn': '*',
        'bucketName': '*',
        'bucketWebsiteUrl': '*',
        'bucketWebsiteDomainName': '*',
        'bucketDomainName': '*',
        'bucketDualStackDomainName': '*',
        'bucketRegionalDomainName': '*',
        'isWebsite': 'boolean',
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'policy': '*',
        'replicationRoleArn': '*'
      },
      'publiclyAccessible': 'boolean',
      'networkType': 'NetworkType',
      'caCertificate': '*'
    },
    'DatabaseInstanceReadReplica': {
      'instanceType': '*',
      'sourceDatabaseInstance': {
        'instanceIdentifier': '*',
        'instanceArn': '*',
        'dbInstanceEndpointAddress': '*',
        'dbInstanceEndpointPort': '*',
        'instanceResourceId': '*',
        'instanceEndpoint': '*',
        'engine': {
          'singleUserRotationApplication': '*',
          'supportsReadReplicaBackups': 'boolean',
          'engineType': '*',
          'engineVersion': {
            'fullVersion': '*',
            'majorVersion': '*'
          },
          'parameterGroupFamily': '*',
          'engineFamily': '*',
          'defaultUsername': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'connections': '*'
      },
      'storageEncrypted': 'boolean',
      'storageEncryptionKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'allocatedStorage': '*',
      'multiAz': 'boolean',
      'availabilityZone': '*',
      'storageType': 'StorageType',
      'storageThroughput': '*',
      'iops': '*',
      'processorFeatures': {
        'coreCount': '*',
        'threadsPerCore': '*'
      },
      'instanceIdentifier': '*',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'vpcPlacement': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'port': '*',
      'parameterGroup': {
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'optionGroup': {
        'optionGroupName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'iamAuthentication': 'boolean',
      'backupRetention': '*',
      'preferredBackupWindow': '*',
      'copyTagsToSnapshot': 'boolean',
      'deleteAutomatedBackups': 'boolean',
      'monitoringInterval': '*',
      'monitoringRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'enablePerformanceInsights': 'boolean',
      'performanceInsightRetention': 'PerformanceInsightRetention',
      'performanceInsightEncryptionKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'cloudwatchLogsExports': '*',
      'cloudwatchLogsRetention': 'RetentionDays',
      'cloudwatchLogsRetentionRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'autoMinorVersionUpgrade': 'boolean',
      'preferredMaintenanceWindow': '*',
      'deletionProtection': 'boolean',
      'removalPolicy': 'RemovalPolicy',
      'maxAllocatedStorage': '*',
      'domain': '*',
      'domainRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'subnetGroup': {
        'subnetGroupName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      's3ImportRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      's3ImportBuckets': {
        'bucketArn': '*',
        'bucketName': '*',
        'bucketWebsiteUrl': '*',
        'bucketWebsiteDomainName': '*',
        'bucketDomainName': '*',
        'bucketDualStackDomainName': '*',
        'bucketRegionalDomainName': '*',
        'isWebsite': 'boolean',
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'policy': '*',
        'replicationRoleArn': '*'
      },
      's3ExportRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      's3ExportBuckets': {
        'bucketArn': '*',
        'bucketName': '*',
        'bucketWebsiteUrl': '*',
        'bucketWebsiteDomainName': '*',
        'bucketDomainName': '*',
        'bucketDualStackDomainName': '*',
        'bucketRegionalDomainName': '*',
        'isWebsite': 'boolean',
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'policy': '*',
        'replicationRoleArn': '*'
      },
      'publiclyAccessible': 'boolean',
      'networkType': 'NetworkType',
      'caCertificate': '*'
    },
    'OptionGroup': {
      'engine': {
        'singleUserRotationApplication': '*',
        'supportsReadReplicaBackups': 'boolean',
        'engineType': '*',
        'engineVersion': {
          'fullVersion': '*',
          'majorVersion': '*'
        },
        'parameterGroupFamily': '*',
        'engineFamily': '*',
        'defaultUsername': '*'
      },
      'description': '*',
      'configurations': {
        'name': '*',
        'settings': '*',
        'version': '*',
        'port': '*',
        'vpc': {
          'vpcId': '*',
          'vpcArn': '*',
          'vpcCidrBlock': '*',
          'publicSubnets': {
            'availabilityZone': '*',
            'subnetId': '*',
            'internetConnectivityEstablished': '*',
            'ipv4CidrBlock': '*',
            'routeTable': {
              'routeTableId': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'availabilityZones': '*',
          'vpnGatewayId': '*'
        },
        'securityGroups': {
          'securityGroupId': '*',
          'allowAllOutbound': 'boolean',
          'canInlineRule': 'boolean',
          'uniqueId': '*',
          'connections': '*'
        }
      },
      'addConfiguration': [
        {
          'name': '*',
          'settings': '*',
          'version': '*',
          'port': '*',
          'vpc': {
            'vpcId': '*',
            'vpcArn': '*',
            'vpcCidrBlock': '*',
            'publicSubnets': {
              'availabilityZone': '*',
              'subnetId': '*',
              'internetConnectivityEstablished': '*',
              'ipv4CidrBlock': '*',
              'routeTable': {
                'routeTableId': '*'
              },
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'availabilityZones': '*',
            'vpnGatewayId': '*'
          },
          'securityGroups': {
            'securityGroupId': '*',
            'allowAllOutbound': 'boolean',
            'canInlineRule': 'boolean',
            'uniqueId': '*',
            'connections': '*'
          }
        }
      ]
    },
    'ParameterGroup': {
      'engine': {
        'engineType': '*',
        'engineVersion': {
          'fullVersion': '*',
          'majorVersion': '*'
        },
        'parameterGroupFamily': '*',
        'engineFamily': '*',
        'defaultUsername': '*'
      },
      'name': '*',
      'description': '*',
      'parameters': '*',
      'removalPolicy': 'RemovalPolicy',
      'bindToCluster': [
        '*'
      ],
      'bindToInstance': [
        '*'
      ],
      'addParameter': [
        '*',
        '*'
      ]
    },
    'DatabaseProxy': {
      'proxyTarget': '*',
      'dbProxyName': '*',
      'borrowTimeout': '*',
      'initQuery': '*',
      'maxConnectionsPercent': '*',
      'maxIdleConnectionsPercent': '*',
      'sessionPinningFilters': '*',
      'debugLogging': 'boolean',
      'iamAuth': 'boolean',
      'idleClientTimeout': '*',
      'requireTLS': 'boolean',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'secrets': {
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'secretArn': '*',
        'secretFullArn': '*',
        'secretName': '*',
        'secretValue': '*'
      },
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'clientPasswordAuthType': 'ClientPasswordAuthType',
      'asSecretAttachmentTarget': [],
      'grantConnect': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        },
        '*'
      ]
    },
    'ServerlessCluster': {
      'credentials': '*',
      'storageEncryptionKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'engine': {
        'singleUserRotationApplication': '*',
        'supportedLogTypes': '*',
        'combineImportAndExportRoles': 'boolean',
        'engineType': '*',
        'engineVersion': {
          'fullVersion': '*',
          'majorVersion': '*'
        },
        'parameterGroupFamily': '*',
        'engineFamily': '*',
        'defaultUsername': '*'
      },
      'clusterIdentifier': '*',
      'backupRetention': '*',
      'defaultDatabaseName': '*',
      'deletionProtection': 'boolean',
      'enableDataApi': 'boolean',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'scaling': {
        'minCapacity': 'AuroraCapacityUnit',
        'maxCapacity': 'AuroraCapacityUnit',
        'autoPause': '*',
        'timeoutAction': 'TimeoutAction'
      },
      'removalPolicy': 'RemovalPolicy',
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'parameterGroup': {
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'subnetGroup': {
        'subnetGroupName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'copyTagsToSnapshot': 'boolean',
      'addRotationSingleUser': [
        {
          'automaticallyAfter': '*',
          'excludeCharacters': '*',
          'vpcSubnets': {
            'subnetType': 'SubnetType',
            'availabilityZones': '*',
            'subnetGroupName': '*',
            'subnetName': '*',
            'onePerAz': 'boolean',
            'subnetFilters': '*',
            'subnets': {
              'availabilityZone': '*',
              'subnetId': '*',
              'internetConnectivityEstablished': '*',
              'ipv4CidrBlock': '*',
              'routeTable': {
                'routeTableId': '*'
              },
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            }
          },
          'endpoint': {
            'vpcEndpointId': '*',
            'connections': '*'
          },
          'securityGroup': {
            'securityGroupId': '*',
            'allowAllOutbound': 'boolean',
            'canInlineRule': 'boolean',
            'uniqueId': '*'
          },
          'rotateImmediatelyOnUpdate': 'boolean'
        }
      ],
      'addRotationMultiUser': [
        '*',
        {
          'secret': {
            'encryptionKey': {
              'keyArn': '*',
              'keyId': '*',
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'secretArn': '*',
            'secretFullArn': '*',
            'secretName': '*',
            'secretValue': '*'
          },
          'automaticallyAfter': '*',
          'excludeCharacters': '*',
          'vpcSubnets': {
            'subnetType': 'SubnetType',
            'availabilityZones': '*',
            'subnetGroupName': '*',
            'subnetName': '*',
            'onePerAz': 'boolean',
            'subnetFilters': '*',
            'subnets': {
              'availabilityZone': '*',
              'subnetId': '*',
              'internetConnectivityEstablished': '*',
              'ipv4CidrBlock': '*',
              'routeTable': {
                'routeTableId': '*'
              }
            }
          },
          'endpoint': {
            'vpcEndpointId': '*',
            'connections': '*'
          },
          'securityGroup': {
            'securityGroupId': '*',
            'allowAllOutbound': 'boolean',
            'canInlineRule': 'boolean',
            'uniqueId': '*'
          },
          'rotateImmediatelyOnUpdate': 'boolean'
        }
      ]
    },
    'ImportedServerlessCluster': {
      'clusterIdentifier': '*',
      'port': '*',
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'clusterEndpointAddress': '*',
      'readerEndpointAddress': '*',
      'secret': {
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'secretArn': '*',
        'secretFullArn': '*',
        'secretName': '*',
        'secretValue': '*'
      }
    },
    'ServerlessClusterFromSnapshot': {
      'snapshotIdentifier': '*',
      'credentials': '*',
      'engine': {
        'singleUserRotationApplication': '*',
        'supportedLogTypes': '*',
        'combineImportAndExportRoles': 'boolean',
        'engineType': '*',
        'engineVersion': {
          'fullVersion': '*',
          'majorVersion': '*'
        },
        'parameterGroupFamily': '*',
        'engineFamily': '*',
        'defaultUsername': '*'
      },
      'clusterIdentifier': '*',
      'backupRetention': '*',
      'defaultDatabaseName': '*',
      'deletionProtection': 'boolean',
      'enableDataApi': 'boolean',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'scaling': {
        'minCapacity': 'AuroraCapacityUnit',
        'maxCapacity': 'AuroraCapacityUnit',
        'autoPause': '*',
        'timeoutAction': 'TimeoutAction'
      },
      'removalPolicy': 'RemovalPolicy',
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'parameterGroup': {
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'subnetGroup': {
        'subnetGroupName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'copyTagsToSnapshot': 'boolean'
    },
    'SubnetGroup': {
      'description': '*',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'subnetGroupName': '*',
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'removalPolicy': 'RemovalPolicy'
    }
  },
  'aws-cdk-lib.aws-route53': {
    'HealthCheck': {
      'type': 'HealthCheckType',
      'alarmIdentifier': {
        'region': '*',
        'name': '*'
      },
      'childHealthChecks': {
        'healthCheckId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'enableSNI': 'boolean',
      'failureThreshold': '*',
      'fqdn': '*',
      'healthThreshold': '*',
      'insufficientDataHealthStatus': 'InsufficientDataHealthStatusEnum',
      'inverted': 'boolean',
      'ipAddress': '*',
      'measureLatency': 'boolean',
      'port': '*',
      'regions': '*',
      'requestInterval': '*',
      'resourcePath': '*',
      'routingControl': '*',
      'searchString': '*'
    },
    'HostedZone': {
      'vpcs': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'zoneName': '*',
      'addTrailingDot': 'boolean',
      'comment': '*',
      'queryLogsLogGroupArn': '*',
      'addVpc': [
        {
          'vpcId': '*',
          'vpcArn': '*',
          'vpcCidrBlock': '*',
          'publicSubnets': {
            'availabilityZone': '*',
            'subnetId': '*',
            'internetConnectivityEstablished': '*',
            'ipv4CidrBlock': '*',
            'routeTable': {
              'routeTableId': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'availabilityZones': '*',
          'vpnGatewayId': '*'
        }
      ],
      'grantDelegation': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        }
      ],
      'enableDnssec': [
        {
          'kmsKey': {
            'keyArn': '*',
            'keyId': '*',
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'keySigningKeyName': '*'
        }
      ]
    },
    'PublicHostedZone': {
      'caaAmazon': 'boolean',
      'crossAccountZoneDelegationPrincipal': {
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*'
      },
      'crossAccountZoneDelegationRoleName': '*',
      'zoneName': '*',
      'addTrailingDot': 'boolean',
      'comment': '*',
      'queryLogsLogGroupArn': '*',
      'addVpc': [
        {
          'vpcId': '*',
          'vpcArn': '*',
          'vpcCidrBlock': '*',
          'publicSubnets': {
            'availabilityZone': '*',
            'subnetId': '*',
            'internetConnectivityEstablished': '*',
            'ipv4CidrBlock': '*',
            'routeTable': {
              'routeTableId': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'availabilityZones': '*',
          'vpnGatewayId': '*'
        }
      ],
      'addDelegation': [
        {
          'hostedZoneId': '*',
          'zoneName': '*',
          'hostedZoneArn': '*',
          'hostedZoneNameServers': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        {
          'comment': '*',
          'ttl': '*'
        }
      ]
    },
    'PrivateHostedZone': {
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'zoneName': '*',
      'addTrailingDot': 'boolean',
      'comment': '*',
      'queryLogsLogGroupArn': '*'
    },
    'KeySigningKey': {
      'hostedZone': {
        'hostedZoneId': '*',
        'zoneName': '*',
        'hostedZoneArn': '*',
        'hostedZoneNameServers': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'kmsKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'keySigningKeyName': '*',
      'status': 'KeySigningKeyStatus'
    },
    'RecordSet': {
      'recordType': 'RecordType',
      'target': '*',
      'zone': {
        'hostedZoneId': '*',
        'zoneName': '*',
        'hostedZoneArn': '*',
        'hostedZoneNameServers': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'geoLocation': '*',
      'recordName': '*',
      'ttl': '*',
      'comment': '*',
      'deleteExisting': 'boolean',
      'weight': '*',
      'region': '*',
      'multiValueAnswer': 'boolean',
      'setIdentifier': '*',
      'healthCheck': {
        'healthCheckId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      }
    },
    'ARecord': {
      'target': '*',
      'zone': {
        'hostedZoneId': '*',
        'zoneName': '*',
        'hostedZoneArn': '*',
        'hostedZoneNameServers': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'geoLocation': '*',
      'recordName': '*',
      'ttl': '*',
      'comment': '*',
      'deleteExisting': 'boolean',
      'weight': '*',
      'region': '*',
      'multiValueAnswer': 'boolean',
      'setIdentifier': '*',
      'healthCheck': {
        'healthCheckId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      }
    },
    'AaaaRecord': {
      'target': '*',
      'zone': {
        'hostedZoneId': '*',
        'zoneName': '*',
        'hostedZoneArn': '*',
        'hostedZoneNameServers': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'geoLocation': '*',
      'recordName': '*',
      'ttl': '*',
      'comment': '*',
      'deleteExisting': 'boolean',
      'weight': '*',
      'region': '*',
      'multiValueAnswer': 'boolean',
      'setIdentifier': '*',
      'healthCheck': {
        'healthCheckId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      }
    },
    'CnameRecord': {
      'domainName': '*',
      'zone': {
        'hostedZoneId': '*',
        'zoneName': '*',
        'hostedZoneArn': '*',
        'hostedZoneNameServers': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'geoLocation': '*',
      'recordName': '*',
      'ttl': '*',
      'comment': '*',
      'deleteExisting': 'boolean',
      'weight': '*',
      'region': '*',
      'multiValueAnswer': 'boolean',
      'setIdentifier': '*',
      'healthCheck': {
        'healthCheckId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      }
    },
    'TxtRecord': {
      'values': '*',
      'zone': {
        'hostedZoneId': '*',
        'zoneName': '*',
        'hostedZoneArn': '*',
        'hostedZoneNameServers': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'geoLocation': '*',
      'recordName': '*',
      'ttl': '*',
      'comment': '*',
      'deleteExisting': 'boolean',
      'weight': '*',
      'region': '*',
      'multiValueAnswer': 'boolean',
      'setIdentifier': '*',
      'healthCheck': {
        'healthCheckId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      }
    },
    'SrvRecord': {
      'values': {
        'priority': '*',
        'weight': '*',
        'port': '*',
        'hostName': '*'
      },
      'zone': {
        'hostedZoneId': '*',
        'zoneName': '*',
        'hostedZoneArn': '*',
        'hostedZoneNameServers': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'geoLocation': '*',
      'recordName': '*',
      'ttl': '*',
      'comment': '*',
      'deleteExisting': 'boolean',
      'weight': '*',
      'region': '*',
      'multiValueAnswer': 'boolean',
      'setIdentifier': '*',
      'healthCheck': {
        'healthCheckId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      }
    },
    'CaaRecord': {
      'values': {
        'flag': '*',
        'tag': 'CaaTag',
        'value': '*'
      },
      'zone': {
        'hostedZoneId': '*',
        'zoneName': '*',
        'hostedZoneArn': '*',
        'hostedZoneNameServers': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'geoLocation': '*',
      'recordName': '*',
      'ttl': '*',
      'comment': '*',
      'deleteExisting': 'boolean',
      'weight': '*',
      'region': '*',
      'multiValueAnswer': 'boolean',
      'setIdentifier': '*',
      'healthCheck': {
        'healthCheckId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      }
    },
    'CaaAmazonRecord': {
      'zone': {
        'hostedZoneId': '*',
        'zoneName': '*',
        'hostedZoneArn': '*',
        'hostedZoneNameServers': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'geoLocation': '*',
      'recordName': '*',
      'ttl': '*',
      'comment': '*',
      'deleteExisting': 'boolean',
      'weight': '*',
      'region': '*',
      'multiValueAnswer': 'boolean',
      'setIdentifier': '*',
      'healthCheck': {
        'healthCheckId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      }
    },
    'MxRecord': {
      'values': {
        'priority': '*',
        'hostName': '*'
      },
      'zone': {
        'hostedZoneId': '*',
        'zoneName': '*',
        'hostedZoneArn': '*',
        'hostedZoneNameServers': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'geoLocation': '*',
      'recordName': '*',
      'ttl': '*',
      'comment': '*',
      'deleteExisting': 'boolean',
      'weight': '*',
      'region': '*',
      'multiValueAnswer': 'boolean',
      'setIdentifier': '*',
      'healthCheck': {
        'healthCheckId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      }
    },
    'NsRecord': {
      'values': '*',
      'zone': {
        'hostedZoneId': '*',
        'zoneName': '*',
        'hostedZoneArn': '*',
        'hostedZoneNameServers': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'geoLocation': '*',
      'recordName': '*',
      'ttl': '*',
      'comment': '*',
      'deleteExisting': 'boolean',
      'weight': '*',
      'region': '*',
      'multiValueAnswer': 'boolean',
      'setIdentifier': '*',
      'healthCheck': {
        'healthCheckId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      }
    },
    'DsRecord': {
      'values': '*',
      'zone': {
        'hostedZoneId': '*',
        'zoneName': '*',
        'hostedZoneArn': '*',
        'hostedZoneNameServers': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'geoLocation': '*',
      'recordName': '*',
      'ttl': '*',
      'comment': '*',
      'deleteExisting': 'boolean',
      'weight': '*',
      'region': '*',
      'multiValueAnswer': 'boolean',
      'setIdentifier': '*',
      'healthCheck': {
        'healthCheckId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      }
    },
    'ZoneDelegationRecord': {
      'nameServers': '*',
      'zone': {
        'hostedZoneId': '*',
        'zoneName': '*',
        'hostedZoneArn': '*',
        'hostedZoneNameServers': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'geoLocation': '*',
      'recordName': '*',
      'ttl': '*',
      'comment': '*',
      'deleteExisting': 'boolean',
      'weight': '*',
      'region': '*',
      'multiValueAnswer': 'boolean',
      'setIdentifier': '*',
      'healthCheck': {
        'healthCheckId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      }
    }
  },
  'aws-cdk-lib.aws-s3': {
    'BucketPolicy': {
      'bucket': {
        'bucketArn': '*',
        'bucketName': '*',
        'bucketWebsiteUrl': '*',
        'bucketWebsiteDomainName': '*',
        'bucketDomainName': '*',
        'bucketDualStackDomainName': '*',
        'bucketRegionalDomainName': '*',
        'isWebsite': 'boolean',
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'policy': '*',
        'replicationRoleArn': '*'
      },
      'removalPolicy': 'RemovalPolicy',
      'applyRemovalPolicy': [
        'RemovalPolicy'
      ]
    },
    'Bucket': {
      'encryption': 'BucketEncryption',
      'encryptionKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'enforceSSL': 'boolean',
      'bucketKeyEnabled': 'boolean',
      'bucketName': '*',
      'removalPolicy': 'RemovalPolicy',
      'autoDeleteObjects': 'boolean',
      'versioned': 'boolean',
      'objectLockEnabled': 'boolean',
      'objectLockDefaultRetention': '*',
      'eventBridgeEnabled': 'boolean',
      'lifecycleRules': {
        'id': '*',
        'enabled': 'boolean',
        'abortIncompleteMultipartUploadAfter': '*',
        'expirationDate': '*',
        'noncurrentVersionsToRetain': '*',
        'noncurrentVersionTransitions': {
          'storageClass': '*',
          'noncurrentVersionsToRetain': '*'
        },
        'transitions': '*',
        'prefix': '*',
        'tagFilters': '*',
        'expiredObjectDeleteMarker': 'boolean',
        'objectSizeLessThan': '*',
        'objectSizeGreaterThan': '*'
      },
      'transitionDefaultMinimumObjectSize': 'TransitionDefaultMinimumObjectSize',
      'websiteIndexDocument': '*',
      'websiteErrorDocument': '*',
      'websiteRedirect': {
        'hostName': '*',
        'protocol': 'RedirectProtocol'
      },
      'websiteRoutingRules': {
        'hostName': '*',
        'httpRedirectCode': '*',
        'protocol': 'RedirectProtocol',
        'replaceKey': '*',
        'condition': {
          'httpErrorCodeReturnedEquals': '*',
          'keyPrefixEquals': '*'
        }
      },
      'accessControl': 'BucketAccessControl',
      'publicReadAccess': 'boolean',
      'blockPublicAccess': '*',
      'metrics': {
        'id': '*',
        'prefix': '*',
        'tagFilters': '*'
      },
      'cors': {
        'id': '*',
        'maxAge': '*',
        'allowedHeaders': '*',
        'allowedMethods': 'HttpMethods',
        'allowedOrigins': '*',
        'exposedHeaders': '*'
      },
      'serverAccessLogsBucket': {
        'bucketArn': '*',
        'bucketName': '*',
        'bucketWebsiteUrl': '*',
        'bucketWebsiteDomainName': '*',
        'bucketDomainName': '*',
        'bucketDualStackDomainName': '*',
        'bucketRegionalDomainName': '*',
        'isWebsite': 'boolean',
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'policy': '*',
        'replicationRoleArn': '*'
      },
      'serverAccessLogsPrefix': '*',
      'targetObjectKeyFormat': '*',
      'inventories': {
        'destination': {
          'bucket': {
            'bucketArn': '*',
            'bucketName': '*',
            'bucketWebsiteUrl': '*',
            'bucketWebsiteDomainName': '*',
            'bucketDomainName': '*',
            'bucketDualStackDomainName': '*',
            'bucketRegionalDomainName': '*',
            'isWebsite': 'boolean',
            'encryptionKey': {
              'keyArn': '*',
              'keyId': '*',
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'policy': '*',
            'replicationRoleArn': '*'
          },
          'prefix': '*',
          'bucketOwner': '*'
        },
        'objectsPrefix': '*',
        'format': 'InventoryFormat',
        'enabled': 'boolean',
        'inventoryId': '*',
        'frequency': 'InventoryFrequency',
        'includeObjectVersions': 'InventoryObjectVersion',
        'optionalFields': '*'
      },
      'objectOwnership': 'ObjectOwnership',
      'transferAcceleration': 'boolean',
      'notificationsHandlerRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'notificationsSkipDestinationValidation': 'boolean',
      'intelligentTieringConfigurations': {
        'name': '*',
        'prefix': '*',
        'tags': {
          'key': '*',
          'value': '*'
        },
        'archiveAccessTierTime': '*'
      },
      'minimumTLSVersion': '*',
      'replicationRules': {
        'destination': {
          'bucketArn': '*',
          'bucketName': '*',
          'bucketWebsiteUrl': '*',
          'bucketWebsiteDomainName': '*',
          'bucketDomainName': '*',
          'bucketDualStackDomainName': '*',
          'bucketRegionalDomainName': '*',
          'isWebsite': 'boolean',
          'encryptionKey': {
            'keyArn': '*',
            'keyId': '*',
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'policy': '*',
          'replicationRoleArn': '*'
        },
        'accessControlTransition': 'boolean',
        'replicationTimeControl': '*',
        'storageClass': '*',
        'sseKmsEncryptedObjects': 'boolean',
        'replicaModifications': 'boolean',
        'priority': '*',
        'deleteMarkerReplication': 'boolean',
        'id': '*',
        'filter': {
          'prefix': '*',
          'tags': {
            'key': '*',
            'value': '*'
          }
        }
      },
      'addLifecycleRule': [
        {
          'id': '*',
          'enabled': 'boolean',
          'abortIncompleteMultipartUploadAfter': '*',
          'expirationDate': '*',
          'noncurrentVersionsToRetain': '*',
          'noncurrentVersionTransitions': {
            'storageClass': '*',
            'noncurrentVersionsToRetain': '*'
          },
          'transitions': '*',
          'prefix': '*',
          'tagFilters': '*',
          'expiredObjectDeleteMarker': 'boolean',
          'objectSizeLessThan': '*',
          'objectSizeGreaterThan': '*'
        }
      ],
      'addMetric': [
        {
          'id': '*',
          'prefix': '*',
          'tagFilters': '*'
        }
      ],
      'addCorsRule': [
        {
          'id': '*',
          'maxAge': '*',
          'allowedHeaders': '*',
          'allowedMethods': 'HttpMethods',
          'allowedOrigins': '*',
          'exposedHeaders': '*'
        }
      ],
      'addInventory': [
        {
          'destination': {
            'bucket': {
              'bucketArn': '*',
              'bucketName': '*',
              'bucketWebsiteUrl': '*',
              'bucketWebsiteDomainName': '*',
              'bucketDomainName': '*',
              'bucketDualStackDomainName': '*',
              'bucketRegionalDomainName': '*',
              'isWebsite': 'boolean',
              'encryptionKey': {
                'keyArn': '*',
                'keyId': '*',
                'stack': '*',
                'env': {
                  'account': '*',
                  'region': '*'
                },
                'node': '*'
              },
              'policy': '*',
              'replicationRoleArn': '*'
            },
            'prefix': '*',
            'bucketOwner': '*'
          },
          'objectsPrefix': '*',
          'format': 'InventoryFormat',
          'enabled': 'boolean',
          'inventoryId': '*',
          'frequency': 'InventoryFrequency',
          'includeObjectVersions': 'InventoryObjectVersion',
          'optionalFields': '*'
        }
      ]
    }
  },
  'aws-cdk-lib.aws-secretsmanager': {
    'ResourcePolicy': {
      'secret': {
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'secretArn': '*',
        'secretFullArn': '*',
        'secretName': '*',
        'secretValue': '*'
      }
    },
    'RotationSchedule': {
      'secret': {
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'secretArn': '*',
        'secretFullArn': '*',
        'secretName': '*',
        'secretValue': '*'
      },
      'rotationLambda': {
        'functionName': '*',
        'functionArn': '*',
        'role': {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'isBoundToVpc': 'boolean',
        'latestVersion': {
          'version': '*',
          'edgeArn': '*',
          'functionName': '*',
          'functionArn': '*',
          'isBoundToVpc': 'boolean',
          'architecture': '*',
          'resourceArnsForGrantInvoke': '*',
          'connections': '*'
        },
        'resourceArnsForGrantInvoke': '*'
      },
      'hostedRotation': '*',
      'automaticallyAfter': '*',
      'rotateImmediatelyOnUpdate': 'boolean'
    },
    'Secret': {
      'description': '*',
      'encryptionKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'generateSecretString': {
        'excludeUppercase': 'boolean',
        'requireEachIncludedType': 'boolean',
        'includeSpace': 'boolean',
        'excludeCharacters': '*',
        'passwordLength': '*',
        'excludePunctuation': 'boolean',
        'excludeLowercase': 'boolean',
        'excludeNumbers': 'boolean',
        'secretStringTemplate': '*',
        'generateStringKey': '*'
      },
      'secretName': '*',
      'secretStringBeta1': '*',
      'secretStringValue': '*',
      'secretObjectValue': '*',
      'removalPolicy': 'RemovalPolicy',
      'replicaRegions': {
        'region': '*',
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'addTargetAttachment': [
        '*',
        {
          'target': '*'
        }
      ],
      'addReplicaRegion': [
        '*',
        {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      ]
    },
    'SecretTargetAttachment': {
      'secret': {
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'secretArn': '*',
        'secretFullArn': '*',
        'secretName': '*',
        'secretValue': '*'
      },
      'target': '*',
      'addToResourcePolicy': [
        '*'
      ]
    }
  },
  'aws-cdk-lib.aws-servicecatalog': {
    'Portfolio': {
      'displayName': '*',
      'providerName': '*',
      'messageLanguage': 'MessageLanguage',
      'description': '*',
      'tagOptions': '*'
    },
    'CloudFormationProduct': {
      'owner': '*',
      'productName': '*',
      'productVersions': {
        'description': '*',
        'validateTemplate': 'boolean',
        'cloudFormationTemplate': '*',
        'productVersionName': '*'
      },
      'messageLanguage': 'MessageLanguage',
      'description': '*',
      'distributor': '*',
      'replaceProductVersionIds': 'boolean',
      'supportDescription': '*',
      'supportEmail': '*',
      'supportUrl': '*',
      'tagOptions': '*'
    },
    'TagOptions': {
      'allowedValuesForTags': '*'
    }
  },
  'aws-cdk-lib.aws-servicediscovery': {
    'AliasTargetInstance': {
      'dnsName': '*',
      'service': {
        'serviceName': '*',
        'namespace': {
          'namespaceName': '*',
          'namespaceId': '*',
          'namespaceArn': '*',
          'type': 'NamespaceType',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'serviceId': '*',
        'serviceArn': '*',
        'dnsRecordType': 'DnsRecordType',
        'routingPolicy': 'RoutingPolicy',
        'discoveryType': 'DiscoveryType'
      },
      'instanceId': '*',
      'customAttributes': '*'
    },
    'CnameInstance': {
      'service': {
        'serviceName': '*',
        'namespace': {
          'namespaceName': '*',
          'namespaceId': '*',
          'namespaceArn': '*',
          'type': 'NamespaceType',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'serviceId': '*',
        'serviceArn': '*',
        'dnsRecordType': 'DnsRecordType',
        'routingPolicy': 'RoutingPolicy',
        'discoveryType': 'DiscoveryType'
      },
      'instanceCname': '*',
      'instanceId': '*',
      'customAttributes': '*'
    },
    'HttpNamespace': {
      'name': '*',
      'description': '*',
      'createService': [
        '*',
        {
          'name': '*',
          'description': '*',
          'healthCheck': {
            'type': 'HealthCheckType',
            'resourcePath': '*',
            'failureThreshold': '*'
          },
          'customHealthCheck': {
            'failureThreshold': '*'
          }
        }
      ]
    },
    'IpInstance': {
      'service': {
        'serviceName': '*',
        'namespace': {
          'namespaceName': '*',
          'namespaceId': '*',
          'namespaceArn': '*',
          'type': 'NamespaceType',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'serviceId': '*',
        'serviceArn': '*',
        'dnsRecordType': 'DnsRecordType',
        'routingPolicy': 'RoutingPolicy',
        'discoveryType': 'DiscoveryType'
      },
      'port': '*',
      'ipv4': '*',
      'ipv6': '*',
      'instanceId': '*',
      'customAttributes': '*'
    },
    'NonIpInstance': {
      'service': {
        'serviceName': '*',
        'namespace': {
          'namespaceName': '*',
          'namespaceId': '*',
          'namespaceArn': '*',
          'type': 'NamespaceType',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'serviceId': '*',
        'serviceArn': '*',
        'dnsRecordType': 'DnsRecordType',
        'routingPolicy': 'RoutingPolicy',
        'discoveryType': 'DiscoveryType'
      },
      'instanceId': '*',
      'customAttributes': '*'
    },
    'PrivateDnsNamespace': {
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'name': '*',
      'description': '*',
      'createService': [
        '*',
        {
          'discoveryType': 'DiscoveryType',
          'dnsRecordType': 'DnsRecordType',
          'dnsTtl': '*',
          'routingPolicy': 'RoutingPolicy',
          'loadBalancer': 'boolean',
          'name': '*',
          'description': '*',
          'healthCheck': {
            'type': 'HealthCheckType',
            'resourcePath': '*',
            'failureThreshold': '*'
          },
          'customHealthCheck': {
            'failureThreshold': '*'
          }
        }
      ]
    },
    'PublicDnsNamespace': {
      'name': '*',
      'description': '*',
      'createService': [
        '*',
        {
          'discoveryType': 'DiscoveryType',
          'dnsRecordType': 'DnsRecordType',
          'dnsTtl': '*',
          'routingPolicy': 'RoutingPolicy',
          'loadBalancer': 'boolean',
          'name': '*',
          'description': '*',
          'healthCheck': {
            'type': 'HealthCheckType',
            'resourcePath': '*',
            'failureThreshold': '*'
          },
          'customHealthCheck': {
            'failureThreshold': '*'
          }
        }
      ]
    },
    'Service': {
      'namespace': {
        'namespaceName': '*',
        'namespaceId': '*',
        'namespaceArn': '*',
        'type': 'NamespaceType',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'discoveryType': 'DiscoveryType',
      'dnsRecordType': 'DnsRecordType',
      'dnsTtl': '*',
      'routingPolicy': 'RoutingPolicy',
      'loadBalancer': 'boolean',
      'name': '*',
      'description': '*',
      'healthCheck': {
        'type': 'HealthCheckType',
        'resourcePath': '*',
        'failureThreshold': '*'
      },
      'customHealthCheck': {
        'failureThreshold': '*'
      },
      'registerLoadBalancer': [
        '*',
        {
          'loadBalancerCanonicalHostedZoneId': '*',
          'loadBalancerDnsName': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        '*'
      ],
      'registerNonIpInstance': [
        '*',
        {
          'instanceId': '*',
          'customAttributes': '*'
        }
      ],
      'registerIpInstance': [
        '*',
        {
          'port': '*',
          'ipv4': '*',
          'ipv6': '*',
          'instanceId': '*',
          'customAttributes': '*'
        }
      ],
      'registerCnameInstance': [
        '*',
        {
          'instanceCname': '*',
          'instanceId': '*',
          'customAttributes': '*'
        }
      ]
    }
  },
  'aws-cdk-lib.aws-ses': {
    'ConfigurationSetEventDestination': {
      'configurationSet': {
        'configurationSetName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'configurationSetEventDestinationName': '*',
      'enabled': 'boolean',
      'destination': '*',
      'events': 'EmailSendingEvent'
    },
    'ConfigurationSet': {
      'configurationSetName': '*',
      'dedicatedIpPool': {
        'dedicatedIpPoolName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'tlsPolicy': 'ConfigurationSetTlsPolicy',
      'reputationMetrics': 'boolean',
      'sendingEnabled': 'boolean',
      'suppressionReasons': 'SuppressionReasons',
      'disableSuppressionList': 'boolean',
      'customTrackingRedirectDomain': '*',
      'vdmOptions': {
        'engagementMetrics': 'boolean',
        'optimizedSharedDelivery': 'boolean'
      },
      'maxDeliveryDuration': '*',
      'addEventDestination': [
        '*',
        {
          'configurationSetEventDestinationName': '*',
          'enabled': 'boolean',
          'destination': '*',
          'events': 'EmailSendingEvent'
        }
      ]
    },
    'DedicatedIpPool': {
      'dedicatedIpPoolName': '*',
      'scalingMode': 'ScalingMode'
    },
    'EmailIdentity': {
      'identity': '*',
      'configurationSet': {
        'configurationSetName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'dkimSigning': 'boolean',
      'dkimIdentity': '*',
      'feedbackForwarding': 'boolean',
      'mailFromDomain': '*',
      'mailFromBehaviorOnMxFailure': 'MailFromBehaviorOnMxFailure'
    },
    'ReceiptFilter': {
      'receiptFilterName': '*',
      'ip': '*',
      'policy': 'ReceiptFilterPolicy'
    },
    'ReceiptRuleSet': {
      'receiptRuleSetName': '*',
      'rules': {
        'actions': '*',
        'after': {
          'receiptRuleName': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'enabled': 'boolean',
        'receiptRuleName': '*',
        'recipients': '*',
        'scanEnabled': 'boolean',
        'tlsPolicy': 'TlsPolicy'
      },
      'dropSpam': 'boolean'
    },
    'ReceiptRule': {
      'ruleSet': {
        'receiptRuleSetName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'actions': '*',
      'after': {
        'receiptRuleName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'enabled': 'boolean',
      'receiptRuleName': '*',
      'recipients': '*',
      'scanEnabled': 'boolean',
      'tlsPolicy': 'TlsPolicy',
      'addAction': [
        '*'
      ]
    },
    'VdmAttributes': {
      'engagementMetrics': 'boolean',
      'optimizedSharedDelivery': 'boolean'
    }
  },
  'aws-cdk-lib.aws-signer': {
    'SigningProfile': {
      'platform': '*',
      'signatureValidity': '*',
      'signingProfileName': '*'
    }
  },
  'aws-cdk-lib.aws-sns': {
    'TopicPolicy': {
      'topics': {
        'topicArn': '*',
        'topicName': '*',
        'contentBasedDeduplication': 'boolean',
        'fifo': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'policyDocument': '*',
      'enforceSSL': 'boolean'
    },
    'Subscription': {
      'topic': {
        'topicArn': '*',
        'topicName': '*',
        'contentBasedDeduplication': 'boolean',
        'fifo': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'protocol': 'SubscriptionProtocol',
      'endpoint': '*',
      'rawMessageDelivery': 'boolean',
      'filterPolicy': '*',
      'filterPolicyWithMessageBody': '*',
      'region': '*',
      'deadLetterQueue': {
        'queueArn': '*',
        'queueUrl': '*',
        'queueName': '*',
        'encryptionMasterKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'fifo': 'boolean',
        'encryptionType': 'QueueEncryption'
      },
      'subscriptionRoleArn': '*',
      'deliveryPolicy': {
        'healthyRetryPolicy': {
          'minDelayTarget': '*',
          'numRetries': '*',
          'numNoDelayRetries': '*',
          'numMinDelayRetries': '*',
          'numMaxDelayRetries': '*',
          'backoffFunction': 'BackoffFunction'
        },
        'throttlePolicy': {
          'maxReceivesPerSecond': '*'
        },
        'requestPolicy': {
          'headerContentType': '*'
        }
      }
    },
    'Topic': {
      'displayName': '*',
      'topicName': '*',
      'masterKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'contentBasedDeduplication': 'boolean',
      'fifo': 'boolean',
      'loggingConfigs': {
        'protocol': 'LoggingProtocol',
        'failureFeedbackRole': {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'successFeedbackSampleRate': '*'
      },
      'messageRetentionPeriodInDays': '*',
      'enforceSSL': 'boolean',
      'signatureVersion': '*',
      'tracingConfig': 'TracingConfig',
      'fifoThroughputScope': 'FifoThroughputScope',
      'addLoggingConfig': [
        {
          'protocol': 'LoggingProtocol',
          'failureFeedbackRole': {
            'roleArn': '*',
            'roleName': '*',
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*',
            'grantPrincipal': {
              'assumeRoleAction': '*',
              'principalAccount': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'successFeedbackSampleRate': '*'
        }
      ]
    }
  },
  'aws-cdk-lib.aws-sqs': {
    'QueuePolicy': {
      'queues': {
        'queueArn': '*',
        'queueUrl': '*',
        'queueName': '*',
        'encryptionMasterKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'fifo': 'boolean',
        'encryptionType': 'QueueEncryption'
      }
    },
    'Queue': {
      'queueName': '*',
      'retentionPeriod': '*',
      'deliveryDelay': '*',
      'maxMessageSizeBytes': '*',
      'receiveMessageWaitTime': '*',
      'visibilityTimeout': '*',
      'deadLetterQueue': {
        'queue': {
          'queueArn': '*',
          'queueUrl': '*',
          'queueName': '*',
          'encryptionMasterKey': {
            'keyArn': '*',
            'keyId': '*',
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'fifo': 'boolean',
          'encryptionType': 'QueueEncryption'
        },
        'maxReceiveCount': '*'
      },
      'encryption': 'QueueEncryption',
      'encryptionMasterKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'dataKeyReuse': '*',
      'fifo': 'boolean',
      'contentBasedDeduplication': 'boolean',
      'deduplicationScope': 'DeduplicationScope',
      'fifoThroughputLimit': 'FifoThroughputLimit',
      'removalPolicy': 'RemovalPolicy',
      'enforceSSL': 'boolean',
      'redriveAllowPolicy': {
        'redrivePermission': 'RedrivePermission',
        'sourceQueues': {
          'queueArn': '*',
          'queueUrl': '*',
          'queueName': '*',
          'encryptionMasterKey': {
            'keyArn': '*',
            'keyId': '*',
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'fifo': 'boolean',
          'encryptionType': 'QueueEncryption'
        }
      }
    }
  },
  'aws-cdk-lib.aws-ssm': {
    'StringParameter': {
      'stringValue': '*',
      'type': 'ParameterType',
      'dataType': 'ParameterDataType',
      'allowedPattern': '*',
      'description': '*',
      'parameterName': '*',
      'simpleName': 'boolean',
      'tier': 'ParameterTier'
    },
    'StringListParameter': {
      'stringListValue': '*',
      'allowedPattern': '*',
      'description': '*',
      'parameterName': '*',
      'simpleName': 'boolean',
      'tier': 'ParameterTier'
    }
  },
  'aws-cdk-lib.aws-stepfunctions': {
    'Activity': {
      'activityName': '*',
      'encryptionConfiguration': '*',
      'grant': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        },
        '*'
      ],
      'metric': [
        '*',
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricRunTime': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricScheduleTime': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricTime': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricScheduled': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricTimedOut': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricStarted': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricSucceeded': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricFailed': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricHeartbeatTimedOut': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ]
    },
    'StateMachine': {
      'stateMachineName': '*',
      'definition': {
        'id': '*',
        'startState': '*',
        'endStates': '*'
      },
      'definitionBody': '*',
      'definitionSubstitutions': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'timeout': '*',
      'comment': '*',
      'queryLanguage': 'QueryLanguage',
      'stateMachineType': 'StateMachineType',
      'logs': {
        'destination': {
          'logGroupArn': '*',
          'logGroupName': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'includeExecutionData': 'boolean',
        'level': 'LogLevel'
      },
      'tracingEnabled': 'boolean',
      'removalPolicy': 'RemovalPolicy',
      'encryptionConfiguration': '*',
      'addToRolePolicy': [
        '*'
      ]
    }
  },
  'aws-cdk-lib.aws-synthetics': {
    'Canary': {
      'artifactsBucketLocation': {
        'bucket': {
          'bucketArn': '*',
          'bucketName': '*',
          'bucketWebsiteUrl': '*',
          'bucketWebsiteDomainName': '*',
          'bucketDomainName': '*',
          'bucketDualStackDomainName': '*',
          'bucketRegionalDomainName': '*',
          'isWebsite': 'boolean',
          'encryptionKey': {
            'keyArn': '*',
            'keyId': '*',
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'policy': '*',
          'replicationRoleArn': '*'
        },
        'prefix': '*'
      },
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'timeToLive': '*',
      'schedule': '*',
      'startAfterCreation': 'boolean',
      'successRetentionPeriod': '*',
      'failureRetentionPeriod': '*',
      'canaryName': '*',
      'runtime': '*',
      'test': '*',
      'activeTracing': 'boolean',
      'environmentVariables': '*',
      'memory': '*',
      'timeout': '*',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'cleanup': 'Cleanup',
      'provisionedResourceCleanup': 'boolean',
      'artifactsBucketLifecycleRules': {
        'id': '*',
        'enabled': 'boolean',
        'abortIncompleteMultipartUploadAfter': '*',
        'expirationDate': '*',
        'noncurrentVersionsToRetain': '*',
        'noncurrentVersionTransitions': {
          'storageClass': '*',
          'noncurrentVersionsToRetain': '*'
        },
        'transitions': '*',
        'prefix': '*',
        'tagFilters': '*',
        'expiredObjectDeleteMarker': 'boolean',
        'objectSizeLessThan': '*',
        'objectSizeGreaterThan': '*'
      },
      'artifactS3EncryptionMode': 'ArtifactsEncryptionMode',
      'artifactS3KmsKey': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'metricDuration': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricSuccessPercent': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricFailed': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ]
    }
  },
  'aws-cdk-lib.core': {
    'CustomResource': {
      'serviceToken': '*',
      'serviceTimeout': '*',
      'properties': '*',
      'resourceType': '*',
      'removalPolicy': 'RemovalPolicy',
      'pascalCaseProperties': 'boolean',
      'getAtt': [
        '*'
      ],
      'getAttString': [
        '*'
      ]
    }
  },
  'aws-cdk-lib.lambda-layer-awscli': {
    'AwsCliLayer': {}
  },
  'aws-cdk-lib.lambda-layer-kubectl': {
    'KubectlLayer': {}
  },
  'aws-cdk-lib.lambda-layer-node-proxy-agent': {
    'NodeProxyAgentLayer': {}
  },
  'aws-cdk-lib.triggers': {
    'TriggerFunction': {
      'runtime': '*',
      'code': '*',
      'handler': '*',
      'description': '*',
      'timeout': '*',
      'environment': '*',
      'functionName': '*',
      'memorySize': '*',
      'ephemeralStorageSize': '*',
      'initialPolicy': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'ipv6AllowedForDualStack': 'boolean',
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'securityGroup': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'allowAllOutbound': 'boolean',
      'allowAllIpv6Outbound': 'boolean',
      'deadLetterQueueEnabled': 'boolean',
      'deadLetterQueue': {
        'queueArn': '*',
        'queueUrl': '*',
        'queueName': '*',
        'encryptionMasterKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'fifo': 'boolean',
        'encryptionType': 'QueueEncryption'
      },
      'deadLetterTopic': {
        'topicArn': '*',
        'topicName': '*',
        'contentBasedDeduplication': 'boolean',
        'fifo': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'tracing': 'Tracing',
      'snapStart': '*',
      'profiling': 'boolean',
      'profilingGroup': {
        'profilingGroupName': '*',
        'profilingGroupArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'insightsVersion': '*',
      'adotInstrumentation': {
        'layerVersion': '*',
        'execWrapper': 'AdotLambdaExecWrapper'
      },
      'paramsAndSecrets': '*',
      'layers': {
        'layerVersionArn': '*',
        'compatibleRuntimes': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'reservedConcurrentExecutions': '*',
      'events': '*',
      'logRetention': 'RetentionDays',
      'logRetentionRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'logRetentionRetryOptions': {
        'maxRetries': '*',
        'base': '*'
      },
      'currentVersionOptions': {
        'codeSha256': '*',
        'description': '*',
        'provisionedConcurrentExecutions': '*',
        'removalPolicy': 'RemovalPolicy',
        'onFailure': '*',
        'maxEventAge': '*',
        'retryAttempts': '*'
      },
      'filesystem': '*',
      'allowPublicSubnet': 'boolean',
      'environmentEncryption': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'codeSigningConfig': {
        'codeSigningConfigArn': '*',
        'codeSigningConfigId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'architectures': '*',
      'architecture': '*',
      'runtimeManagementMode': '*',
      'logGroup': {
        'logGroupArn': '*',
        'logGroupName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'logFormat': '*',
      'loggingFormat': 'LoggingFormat',
      'recursiveLoop': 'RecursiveLoop',
      'applicationLogLevel': '*',
      'applicationLogLevelV2': 'ApplicationLogLevel',
      'systemLogLevel': '*',
      'systemLogLevelV2': 'SystemLogLevel',
      'onFailure': '*',
      'onSuccess': '*',
      'maxEventAge': '*',
      'retryAttempts': '*',
      'executeAfter': [
        '*'
      ],
      'executeBefore': [
        '*'
      ],
      'executeOnHandlerChange': 'boolean'
    }
  },
  'aws-glue-alpha.lib': {
    'PySparkEtlJob': {
      'sparkUI': {
        'bucket': {
          'bucketArn': '*',
          'bucketName': '*',
          'bucketWebsiteUrl': '*',
          'bucketWebsiteDomainName': '*',
          'bucketDomainName': '*',
          'bucketDualStackDomainName': '*',
          'bucketRegionalDomainName': '*',
          'isWebsite': 'boolean',
          'encryptionKey': {
            'keyArn': '*',
            'keyId': '*',
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'policy': '*',
          'replicationRoleArn': '*'
        },
        'prefix': '*',
        'jobRunQueuingEnabled': 'boolean'
      },
      'extraPythonFiles': '*',
      'extraFiles': '*',
      'jobRunQueuingEnabled': 'boolean',
      'script': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'jobName': '*',
      'description': '*',
      'numberOfWorkers': '*',
      'workerType': 'WorkerType',
      'maxConcurrentRuns': '*',
      'defaultArguments': '*',
      'connections': {
        'connectionName': '*',
        'connectionArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'maxRetries': '*',
      'timeout': '*',
      'securityConfiguration': {
        'securityConfigurationName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'tags': '*',
      'glueVersion': 'GlueVersion',
      'enableProfilingMetrics': 'boolean',
      'continuousLogging': {
        'enabled': 'boolean',
        'logGroup': {
          'logGroupArn': '*',
          'logGroupName': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'logStreamPrefix': '*',
        'quiet': 'boolean',
        'conversionPattern': '*'
      }
    },
    'PySparkFlexEtlJob': {
      'sparkUI': {
        'bucket': {
          'bucketArn': '*',
          'bucketName': '*',
          'bucketWebsiteUrl': '*',
          'bucketWebsiteDomainName': '*',
          'bucketDomainName': '*',
          'bucketDualStackDomainName': '*',
          'bucketRegionalDomainName': '*',
          'isWebsite': 'boolean',
          'encryptionKey': {
            'keyArn': '*',
            'keyId': '*',
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'policy': '*',
          'replicationRoleArn': '*'
        },
        'prefix': '*',
        'jobRunQueuingEnabled': 'boolean'
      },
      'notifyDelayAfter': '*',
      'extraPythonFiles': '*',
      'extraFiles': '*',
      'script': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'jobName': '*',
      'description': '*',
      'numberOfWorkers': '*',
      'workerType': 'WorkerType',
      'maxConcurrentRuns': '*',
      'defaultArguments': '*',
      'connections': {
        'connectionName': '*',
        'connectionArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'maxRetries': '*',
      'timeout': '*',
      'securityConfiguration': {
        'securityConfigurationName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'tags': '*',
      'glueVersion': 'GlueVersion',
      'enableProfilingMetrics': 'boolean',
      'continuousLogging': {
        'enabled': 'boolean',
        'logGroup': {
          'logGroupArn': '*',
          'logGroupName': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'logStreamPrefix': '*',
        'quiet': 'boolean',
        'conversionPattern': '*'
      }
    },
    'PySparkStreamingJob': {
      'sparkUI': {
        'bucket': {
          'bucketArn': '*',
          'bucketName': '*',
          'bucketWebsiteUrl': '*',
          'bucketWebsiteDomainName': '*',
          'bucketDomainName': '*',
          'bucketDualStackDomainName': '*',
          'bucketRegionalDomainName': '*',
          'isWebsite': 'boolean',
          'encryptionKey': {
            'keyArn': '*',
            'keyId': '*',
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'policy': '*',
          'replicationRoleArn': '*'
        },
        'prefix': '*',
        'jobRunQueuingEnabled': 'boolean'
      },
      'extraPythonFiles': '*',
      'extraFiles': '*',
      'jobRunQueuingEnabled': 'boolean',
      'script': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'jobName': '*',
      'description': '*',
      'numberOfWorkers': '*',
      'workerType': 'WorkerType',
      'maxConcurrentRuns': '*',
      'defaultArguments': '*',
      'connections': {
        'connectionName': '*',
        'connectionArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'maxRetries': '*',
      'timeout': '*',
      'securityConfiguration': {
        'securityConfigurationName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'tags': '*',
      'glueVersion': 'GlueVersion',
      'enableProfilingMetrics': 'boolean',
      'continuousLogging': {
        'enabled': 'boolean',
        'logGroup': {
          'logGroupArn': '*',
          'logGroupName': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'logStreamPrefix': '*',
        'quiet': 'boolean',
        'conversionPattern': '*'
      }
    },
    'PythonShellJob': {
      'pythonVersion': 'PythonVersion',
      'maxCapacity': 'MaxCapacity',
      'jobRunQueuingEnabled': 'boolean',
      'script': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'jobName': '*',
      'description': '*',
      'numberOfWorkers': '*',
      'workerType': 'WorkerType',
      'maxConcurrentRuns': '*',
      'defaultArguments': '*',
      'connections': {
        'connectionName': '*',
        'connectionArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'maxRetries': '*',
      'timeout': '*',
      'securityConfiguration': {
        'securityConfigurationName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'tags': '*',
      'glueVersion': 'GlueVersion',
      'enableProfilingMetrics': 'boolean',
      'continuousLogging': {
        'enabled': 'boolean',
        'logGroup': {
          'logGroupArn': '*',
          'logGroupName': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'logStreamPrefix': '*',
        'quiet': 'boolean',
        'conversionPattern': '*'
      }
    },
    'RayJob': {
      'runtime': 'Runtime',
      'jobRunQueuingEnabled': 'boolean',
      'script': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'jobName': '*',
      'description': '*',
      'numberOfWorkers': '*',
      'workerType': 'WorkerType',
      'maxConcurrentRuns': '*',
      'defaultArguments': '*',
      'connections': {
        'connectionName': '*',
        'connectionArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'maxRetries': '*',
      'timeout': '*',
      'securityConfiguration': {
        'securityConfigurationName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'tags': '*',
      'glueVersion': 'GlueVersion',
      'enableProfilingMetrics': 'boolean',
      'continuousLogging': {
        'enabled': 'boolean',
        'logGroup': {
          'logGroupArn': '*',
          'logGroupName': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'logStreamPrefix': '*',
        'quiet': 'boolean',
        'conversionPattern': '*'
      }
    },
    'ScalaSparkEtlJob': {
      'sparkUI': {
        'bucket': {
          'bucketArn': '*',
          'bucketName': '*',
          'bucketWebsiteUrl': '*',
          'bucketWebsiteDomainName': '*',
          'bucketDomainName': '*',
          'bucketDualStackDomainName': '*',
          'bucketRegionalDomainName': '*',
          'isWebsite': 'boolean',
          'encryptionKey': {
            'keyArn': '*',
            'keyId': '*',
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'policy': '*',
          'replicationRoleArn': '*'
        },
        'prefix': '*',
        'jobRunQueuingEnabled': 'boolean'
      },
      'className': '*',
      'extraJars': '*',
      'jobRunQueuingEnabled': 'boolean',
      'script': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'jobName': '*',
      'description': '*',
      'numberOfWorkers': '*',
      'workerType': 'WorkerType',
      'maxConcurrentRuns': '*',
      'defaultArguments': '*',
      'connections': {
        'connectionName': '*',
        'connectionArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'maxRetries': '*',
      'timeout': '*',
      'securityConfiguration': {
        'securityConfigurationName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'tags': '*',
      'glueVersion': 'GlueVersion',
      'enableProfilingMetrics': 'boolean',
      'continuousLogging': {
        'enabled': 'boolean',
        'logGroup': {
          'logGroupArn': '*',
          'logGroupName': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'logStreamPrefix': '*',
        'quiet': 'boolean',
        'conversionPattern': '*'
      }
    },
    'ScalaSparkFlexEtlJob': {
      'sparkUI': {
        'bucket': {
          'bucketArn': '*',
          'bucketName': '*',
          'bucketWebsiteUrl': '*',
          'bucketWebsiteDomainName': '*',
          'bucketDomainName': '*',
          'bucketDualStackDomainName': '*',
          'bucketRegionalDomainName': '*',
          'isWebsite': 'boolean',
          'encryptionKey': {
            'keyArn': '*',
            'keyId': '*',
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'policy': '*',
          'replicationRoleArn': '*'
        },
        'prefix': '*',
        'jobRunQueuingEnabled': 'boolean'
      },
      'notifyDelayAfter': '*',
      'className': '*',
      'extraJars': '*',
      'extraJarsFirst': 'boolean',
      'extraFiles': '*',
      'script': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'jobName': '*',
      'description': '*',
      'numberOfWorkers': '*',
      'workerType': 'WorkerType',
      'maxConcurrentRuns': '*',
      'defaultArguments': '*',
      'connections': {
        'connectionName': '*',
        'connectionArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'maxRetries': '*',
      'timeout': '*',
      'securityConfiguration': {
        'securityConfigurationName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'tags': '*',
      'glueVersion': 'GlueVersion',
      'enableProfilingMetrics': 'boolean',
      'continuousLogging': {
        'enabled': 'boolean',
        'logGroup': {
          'logGroupArn': '*',
          'logGroupName': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'logStreamPrefix': '*',
        'quiet': 'boolean',
        'conversionPattern': '*'
      }
    },
    'ScalaSparkStreamingJob': {
      'sparkUI': {
        'bucket': {
          'bucketArn': '*',
          'bucketName': '*',
          'bucketWebsiteUrl': '*',
          'bucketWebsiteDomainName': '*',
          'bucketDomainName': '*',
          'bucketDualStackDomainName': '*',
          'bucketRegionalDomainName': '*',
          'isWebsite': 'boolean',
          'encryptionKey': {
            'keyArn': '*',
            'keyId': '*',
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'policy': '*',
          'replicationRoleArn': '*'
        },
        'prefix': '*',
        'jobRunQueuingEnabled': 'boolean'
      },
      'className': '*',
      'extraJars': '*',
      'jobRunQueuingEnabled': 'boolean',
      'script': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'jobName': '*',
      'description': '*',
      'numberOfWorkers': '*',
      'workerType': 'WorkerType',
      'maxConcurrentRuns': '*',
      'defaultArguments': '*',
      'connections': {
        'connectionName': '*',
        'connectionArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'maxRetries': '*',
      'timeout': '*',
      'securityConfiguration': {
        'securityConfigurationName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'tags': '*',
      'glueVersion': 'GlueVersion',
      'enableProfilingMetrics': 'boolean',
      'continuousLogging': {
        'enabled': 'boolean',
        'logGroup': {
          'logGroupArn': '*',
          'logGroupName': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'logStreamPrefix': '*',
        'quiet': 'boolean',
        'conversionPattern': '*'
      }
    },
    'Workflow': {}
  },
  'aws-apigateway.lib': {
    'CognitoUserPoolsAuthorizer': {
      'authorizerName': '*',
      'cognitoUserPools': {
        'userPoolId': '*',
        'userPoolArn': '*',
        'userPoolProviderName': '*',
        'identityProviders': {
          'providerName': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'resultsCacheTtl': '*',
      'identitySource': '*',
      '_attachToApi': [
        {
          'restApiId': '*',
          'restApiName': '*',
          'restApiRootResourceId': '*',
          'latestDeployment': '*',
          'deploymentStage': '*',
          'root': {
            'restApi': '*',
            'resourceId': '*',
            'path': '*',
            'defaultIntegration': '*',
            'defaultMethodOptions': {
              'operationName': '*',
              'authorizationType': 'AuthorizationType',
              'authorizer': {
                'authorizerId': '*',
                'authorizationType': 'AuthorizationType'
              },
              'apiKeyRequired': 'boolean',
              'methodResponses': {
                'statusCode': '*',
                'responseParameters': '*',
                'responseModels': '*'
              },
              'requestParameters': '*',
              'requestModels': '*',
              'requestValidator': {
                'requestValidatorId': '*',
                'stack': '*',
                'env': {
                  'account': '*',
                  'region': '*'
                },
                'node': '*'
              },
              'authorizationScopes': '*',
              'requestValidatorOptions': {
                'requestValidatorName': '*',
                'validateRequestBody': 'boolean',
                'validateRequestParameters': 'boolean'
              }
            },
            'defaultCorsPreflightOptions': {
              'statusCode': '*',
              'allowOrigins': '*',
              'allowHeaders': '*',
              'allowMethods': '*',
              'allowCredentials': 'boolean',
              'maxAge': '*',
              'disableCache': 'boolean',
              'exposeHeaders': '*'
            }
          }
        }
      ]
    },
    'TokenAuthorizer': {
      'validationRegex': '*',
      'identitySource': '*',
      'authorizerName': '*',
      'handler': {
        'functionName': '*',
        'functionArn': '*',
        'role': {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'isBoundToVpc': 'boolean',
        'latestVersion': {
          'version': '*',
          'edgeArn': '*',
          'functionName': '*',
          'functionArn': '*',
          'isBoundToVpc': 'boolean',
          'architecture': '*',
          'resourceArnsForGrantInvoke': '*',
          'connections': '*'
        },
        'resourceArnsForGrantInvoke': '*'
      },
      'resultsCacheTtl': '*',
      'assumeRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      }
    },
    'RequestAuthorizer': {
      'identitySources': '*',
      'authorizerName': '*',
      'handler': {
        'functionName': '*',
        'functionArn': '*',
        'role': {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'isBoundToVpc': 'boolean',
        'latestVersion': {
          'version': '*',
          'edgeArn': '*',
          'functionName': '*',
          'functionArn': '*',
          'isBoundToVpc': 'boolean',
          'architecture': '*',
          'resourceArnsForGrantInvoke': '*',
          'connections': '*'
        },
        'resourceArnsForGrantInvoke': '*'
      },
      'resultsCacheTtl': '*',
      'assumeRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      }
    }
  },
  'aws-apigatewayv2.lib': {
    'ApiMapping': {
      'apiMappingKey': '*',
      'api': {
        'apiId': '*',
        'apiEndpoint': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'domainName': {
        'name': '*',
        'regionalDomainName': '*',
        'regionalHostedZoneId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'stage': {
        'stageName': '*',
        'url': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      }
    },
    'DomainName': {
      'domainName': '*',
      'mtls': {
        'bucket': {
          'bucketArn': '*',
          'bucketName': '*',
          'bucketWebsiteUrl': '*',
          'bucketWebsiteDomainName': '*',
          'bucketDomainName': '*',
          'bucketDualStackDomainName': '*',
          'bucketRegionalDomainName': '*',
          'isWebsite': 'boolean',
          'encryptionKey': {
            'keyArn': '*',
            'keyId': '*',
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'policy': '*',
          'replicationRoleArn': '*'
        },
        'key': '*',
        'version': '*'
      },
      'certificate': {
        'certificateArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'certificateName': '*',
      'endpointType': 'EndpointType',
      'securityPolicy': 'SecurityPolicy',
      'ownershipCertificate': {
        'certificateArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'addEndpoint': [
        {
          'certificate': {
            'certificateArn': '*',
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'certificateName': '*',
          'endpointType': 'EndpointType',
          'securityPolicy': 'SecurityPolicy'
        }
      ]
    },
    'HttpApi': {
      'addStage': [
        '*',
        {
          'stageName': '*',
          'autoDeploy': 'boolean',
          'domainMapping': {
            'domainName': {
              'name': '*',
              'regionalDomainName': '*',
              'regionalHostedZoneId': '*',
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'mappingKey': '*'
          },
          'throttle': {
            'rateLimit': '*',
            'burstLimit': '*'
          },
          'description': '*'
        }
      ],
      'addRoutes': [
        {
          'path': '*',
          'methods': 'HttpMethod',
          'authorizer': '*',
          'authorizationScopes': '*',
          'integration': '*'
        }
      ]
    },
    'HttpAuthorizer': {
      'authorizerName': '*',
      'httpApi': {
        'defaultAuthorizer': '*',
        'defaultAuthorizationScopes': '*',
        'apiId': '*',
        'apiEndpoint': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'type': 'HttpAuthorizerType',
      'identitySource': '*',
      'jwtAudience': '*',
      'jwtIssuer': '*',
      'enableSimpleResponses': 'boolean',
      'payloadFormatVersion': 'AuthorizerPayloadVersion',
      'authorizerUri': '*',
      'resultsCacheTtl': '*'
    },
    'HttpIntegration': {
      'httpApi': {
        'defaultAuthorizer': '*',
        'defaultAuthorizationScopes': '*',
        'apiId': '*',
        'apiEndpoint': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'integrationType': 'HttpIntegrationType',
      'integrationSubtype': 'HttpIntegrationSubtype',
      'integrationUri': '*',
      'method': 'HttpMethod',
      'connectionId': '*',
      'connectionType': 'HttpConnectionType',
      'payloadFormatVersion': '*',
      'secureServerName': '*',
      'timeout': '*',
      'parameterMapping': '*',
      'credentials': '*'
    },
    'HttpRoute': {
      'httpApi': {
        'defaultAuthorizer': '*',
        'defaultAuthorizationScopes': '*',
        'apiId': '*',
        'apiEndpoint': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'routeKey': '*',
      'authorizer': '*',
      'authorizationScopes': '*',
      'integration': '*',
      'grantInvoke': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        },
        {
          'httpMethods': 'HttpMethod'
        }
      ]
    },
    'HttpStage': {
      'httpApi': {
        'defaultAuthorizer': '*',
        'defaultAuthorizationScopes': '*',
        'apiId': '*',
        'apiEndpoint': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'stageName': '*',
      'autoDeploy': 'boolean',
      'domainMapping': {
        'domainName': {
          'name': '*',
          'regionalDomainName': '*',
          'regionalHostedZoneId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'mappingKey': '*'
      },
      'throttle': {
        'rateLimit': '*',
        'burstLimit': '*'
      },
      'description': '*'
    },
    'VpcLink': {
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'vpcLinkName': '*',
      'subnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'addSubnets': [
        {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      ],
      'addSecurityGroups': [
        {
          'securityGroupId': '*',
          'allowAllOutbound': 'boolean',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*',
          'canInlineRule': 'boolean',
          'uniqueId': '*',
          'connections': '*'
        }
      ]
    },
    'WebSocketApi': {
      'addRoute': [
        '*',
        {
          'integration': '*',
          'authorizer': '*',
          'returnResponse': 'boolean'
        }
      ],
      'grantManageConnections': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        }
      ],
      'arnForExecuteApi': [
        '*',
        '*',
        '*'
      ],
      'arnForExecuteApiV2': [
        '*',
        '*'
      ]
    },
    'WebSocketAuthorizer': {
      'authorizerName': '*',
      'webSocketApi': {
        'apiId': '*',
        'apiEndpoint': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'type': 'WebSocketAuthorizerType',
      'identitySource': '*',
      'authorizerUri': '*'
    },
    'WebSocketIntegration': {
      'webSocketApi': {
        'apiId': '*',
        'apiEndpoint': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'integrationType': 'WebSocketIntegrationType',
      'integrationUri': '*',
      'integrationMethod': '*',
      'contentHandling': 'ContentHandling',
      'credentialsRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'requestParameters': '*',
      'requestTemplates': '*',
      'templateSelectionExpression': '*',
      'timeout': '*',
      'passthroughBehavior': 'PassthroughBehavior'
    },
    'WebSocketRoute': {
      'webSocketApi': {
        'apiId': '*',
        'apiEndpoint': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'routeKey': '*',
      'apiKeyRequired': 'boolean',
      'integration': '*',
      'authorizer': '*',
      'returnResponse': 'boolean'
    },
    'WebSocketStage': {
      'webSocketApi': {
        'apiId': '*',
        'apiEndpoint': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'stageName': '*',
      'autoDeploy': 'boolean',
      'domainMapping': {
        'domainName': {
          'name': '*',
          'regionalDomainName': '*',
          'regionalHostedZoneId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'mappingKey': '*'
      },
      'throttle': {
        'rateLimit': '*',
        'burstLimit': '*'
      },
      'description': '*',
      'grantManagementApiAccess': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        }
      ]
    }
  },
  'aws-cloudfront.lib': {
    'EdgeFunction': {
      'stackId': '*',
      'runtime': '*',
      'code': '*',
      'handler': '*',
      'description': '*',
      'timeout': '*',
      'environment': '*',
      'functionName': '*',
      'memorySize': '*',
      'ephemeralStorageSize': '*',
      'initialPolicy': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'ipv6AllowedForDualStack': 'boolean',
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'securityGroup': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'allowAllOutbound': 'boolean',
      'allowAllIpv6Outbound': 'boolean',
      'deadLetterQueueEnabled': 'boolean',
      'deadLetterQueue': {
        'queueArn': '*',
        'queueUrl': '*',
        'queueName': '*',
        'encryptionMasterKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'fifo': 'boolean',
        'encryptionType': 'QueueEncryption'
      },
      'deadLetterTopic': {
        'topicArn': '*',
        'topicName': '*',
        'contentBasedDeduplication': 'boolean',
        'fifo': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'tracing': 'Tracing',
      'snapStart': '*',
      'profiling': 'boolean',
      'profilingGroup': {
        'profilingGroupName': '*',
        'profilingGroupArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'insightsVersion': '*',
      'adotInstrumentation': {
        'layerVersion': '*',
        'execWrapper': 'AdotLambdaExecWrapper'
      },
      'paramsAndSecrets': '*',
      'layers': {
        'layerVersionArn': '*',
        'compatibleRuntimes': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'reservedConcurrentExecutions': '*',
      'events': '*',
      'logRetention': 'RetentionDays',
      'logRetentionRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'logRetentionRetryOptions': {
        'maxRetries': '*',
        'base': '*'
      },
      'currentVersionOptions': {
        'codeSha256': '*',
        'description': '*',
        'provisionedConcurrentExecutions': '*',
        'removalPolicy': 'RemovalPolicy',
        'onFailure': '*',
        'maxEventAge': '*',
        'retryAttempts': '*'
      },
      'filesystem': '*',
      'allowPublicSubnet': 'boolean',
      'environmentEncryption': {
        'keyArn': '*',
        'keyId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'codeSigningConfig': {
        'codeSigningConfigArn': '*',
        'codeSigningConfigId': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'architectures': '*',
      'architecture': '*',
      'runtimeManagementMode': '*',
      'logGroup': {
        'logGroupArn': '*',
        'logGroupName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'logFormat': '*',
      'loggingFormat': 'LoggingFormat',
      'recursiveLoop': 'RecursiveLoop',
      'applicationLogLevel': '*',
      'applicationLogLevelV2': 'ApplicationLogLevel',
      'systemLogLevel': '*',
      'systemLogLevelV2': 'SystemLogLevel',
      'onFailure': '*',
      'onSuccess': '*',
      'maxEventAge': '*',
      'retryAttempts': '*',
      'addAlias': [
        '*',
        {
          'description': '*',
          'additionalVersions': {
            'version': {
              'version': '*',
              'lambda': {
                'functionName': '*',
                'functionArn': '*',
                'role': {
                  'roleArn': '*',
                  'roleName': '*',
                  'assumeRoleAction': '*',
                  'policyFragment': '*',
                  'principalAccount': '*',
                  'grantPrincipal': {
                    'assumeRoleAction': '*',
                    'principalAccount': '*'
                  },
                  'stack': '*',
                  'env': {
                    'account': '*',
                    'region': '*'
                  },
                  'node': '*'
                },
                'isBoundToVpc': 'boolean',
                'architecture': '*',
                'resourceArnsForGrantInvoke': '*',
                'connections': '*'
              },
              'edgeArn': '*',
              'functionName': '*',
              'functionArn': '*',
              'isBoundToVpc': 'boolean',
              'resourceArnsForGrantInvoke': '*'
            },
            'weight': '*'
          },
          'provisionedConcurrentExecutions': '*',
          'onFailure': '*',
          'maxEventAge': '*',
          'retryAttempts': '*'
        }
      ],
      'addEventSourceMapping': [
        '*',
        {
          'eventSourceArn': '*',
          'batchSize': '*',
          'bisectBatchOnError': 'boolean',
          'onFailure': '*',
          'enabled': 'boolean',
          'startingPosition': 'StartingPosition',
          'startingPositionTimestamp': '*',
          'reportBatchItemFailures': 'boolean',
          'maxBatchingWindow': '*',
          'maxConcurrency': '*',
          'retryAttempts': '*',
          'parallelizationFactor': '*',
          'kafkaTopic': '*',
          'kafkaBootstrapServers': '*',
          'kafkaConsumerGroupId': '*',
          'sourceAccessConfigurations': {
            'type': '*',
            'uri': '*'
          },
          'filters': '*',
          'filterEncryption': {
            'keyArn': '*',
            'keyId': '*',
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'supportS3OnFailureDestination': 'boolean',
          'provisionedPollerConfig': {
            'minimumPollers': '*',
            'maximumPollers': '*'
          },
          'metricsConfig': {
            'metrics': 'MetricType'
          }
        }
      ],
      'addPermission': [
        '*',
        {
          'action': '*',
          'eventSourceToken': '*',
          'principal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          },
          'scope': '*',
          'sourceAccount': '*',
          'sourceArn': '*',
          'organizationId': '*',
          'functionUrlAuthType': 'FunctionUrlAuthType'
        }
      ],
      'addToRolePolicy': [
        '*'
      ],
      'grantInvoke': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        }
      ],
      'grantInvokeLatestVersion': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        }
      ],
      'grantInvokeVersion': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        },
        {
          'version': '*',
          'lambda': {
            'functionName': '*',
            'functionArn': '*',
            'role': {
              'roleArn': '*',
              'roleName': '*',
              'assumeRoleAction': '*',
              'policyFragment': '*',
              'principalAccount': '*',
              'grantPrincipal': {
                'assumeRoleAction': '*',
                'principalAccount': '*'
              },
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'isBoundToVpc': 'boolean',
            'architecture': '*',
            'resourceArnsForGrantInvoke': '*',
            'connections': '*'
          },
          'edgeArn': '*',
          'functionName': '*',
          'functionArn': '*',
          'isBoundToVpc': 'boolean',
          'resourceArnsForGrantInvoke': '*'
        }
      ],
      'grantInvokeUrl': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        }
      ],
      'grantInvokeCompositePrincipal': [
        '*'
      ],
      'metric': [
        '*',
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricDuration': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricErrors': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricInvocations': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricThrottles': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'addEventSource': [
        '*'
      ],
      'configureAsyncInvoke': [
        {
          'onFailure': '*',
          'maxEventAge': '*',
          'retryAttempts': '*'
        }
      ],
      'addFunctionUrl': [
        {
          'authType': 'FunctionUrlAuthType',
          'cors': {
            'allowCredentials': 'boolean',
            'allowedHeaders': '*',
            'allowedMethods': 'HttpMethod',
            'allowedOrigins': '*',
            'exposedHeaders': '*',
            'maxAge': '*'
          },
          'invokeMode': 'InvokeMode'
        }
      ]
    }
  },
  'aws-codedeploy.lib': {
    'EcsApplication': {
      'applicationName': '*'
    },
    'EcsDeploymentConfig': {},
    'EcsDeploymentGroup': {
      'application': {
        'applicationArn': '*',
        'applicationName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'deploymentGroupName': '*',
      'deploymentConfig': {
        'deploymentConfigName': '*',
        'deploymentConfigArn': '*'
      },
      'alarms': {
        'alarmArn': '*',
        'alarmName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'service': {
        'cluster': {
          'clusterName': '*',
          'clusterArn': '*',
          'vpc': {
            'vpcId': '*',
            'vpcArn': '*',
            'vpcCidrBlock': '*',
            'publicSubnets': {
              'availabilityZone': '*',
              'subnetId': '*',
              'internetConnectivityEstablished': '*',
              'ipv4CidrBlock': '*',
              'routeTable': {
                'routeTableId': '*'
              },
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'availabilityZones': '*',
            'vpnGatewayId': '*'
          },
          'connections': '*',
          'hasEc2Capacity': 'boolean',
          'defaultCloudMapNamespace': {
            'namespaceName': '*',
            'namespaceId': '*',
            'namespaceArn': '*',
            'type': 'NamespaceType'
          },
          'autoscalingGroup': {
            'autoScalingGroupName': '*',
            'autoScalingGroupArn': '*',
            'osType': 'OperatingSystemType',
            'grantPrincipal': {
              'assumeRoleAction': '*',
              'policyFragment': '*',
              'principalAccount': '*'
            }
          },
          'executeCommandConfiguration': {
            'kmsKey': {
              'keyArn': '*',
              'keyId': '*'
            },
            'logConfiguration': {
              'cloudWatchEncryptionEnabled': 'boolean',
              'cloudWatchLogGroup': {
                'logGroupArn': '*',
                'logGroupName': '*'
              },
              's3Bucket': {
                'bucketArn': '*',
                'bucketName': '*',
                'bucketWebsiteUrl': '*',
                'bucketWebsiteDomainName': '*',
                'bucketDomainName': '*',
                'bucketDualStackDomainName': '*',
                'bucketRegionalDomainName': '*',
                'isWebsite': 'boolean',
                'policy': '*',
                'replicationRoleArn': '*'
              },
              's3EncryptionEnabled': 'boolean',
              's3KeyPrefix': '*'
            },
            'logging': 'ExecuteCommandLogging'
          }
        },
        'serviceArn': '*',
        'serviceName': '*'
      },
      'blueGreenDeploymentConfig': {
        'blueTargetGroup': {
          'targetGroupName': '*',
          'targetGroupArn': '*',
          'loadBalancerArns': '*',
          'loadBalancerAttached': '*',
          'node': '*'
        },
        'listener': {
          'listenerArn': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          }
        },
        'deploymentApprovalWaitTime': '*'
      },
      'ignorePollAlarmsFailure': 'boolean',
      'autoRollback': {
        'failedDeployment': 'boolean',
        'stoppedDeployment': 'boolean',
        'deploymentInAlarm': 'boolean'
      },
      'ignoreAlarmConfiguration': 'boolean',
      'addAlarm': [
        {
          'alarmArn': '*',
          'alarmName': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      ]
    },
    'ImportedEcsDeploymentGroup': {
      'application': {
        'applicationArn': '*',
        'applicationName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'deploymentGroupName': '*',
      'deploymentConfig': {
        'deploymentConfigName': '*',
        'deploymentConfigArn': '*'
      }
    },
    'LambdaApplication': {
      'applicationName': '*'
    },
    'CustomLambdaDeploymentConfig': {
      'type': 'CustomLambdaDeploymentConfigType',
      'percentage': '*',
      'interval': '*',
      'deploymentConfigName': '*'
    },
    'LambdaDeploymentConfig': {},
    'LambdaDeploymentGroup': {
      'application': {
        'applicationArn': '*',
        'applicationName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'deploymentGroupName': '*',
      'deploymentConfig': {
        'deploymentConfigName': '*',
        'deploymentConfigArn': '*'
      },
      'alarms': {
        'alarmArn': '*',
        'alarmName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'alias': '*',
      'preHook': {
        'functionName': '*',
        'functionArn': '*',
        'role': {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'isBoundToVpc': 'boolean',
        'latestVersion': {
          'version': '*',
          'edgeArn': '*',
          'functionName': '*',
          'functionArn': '*',
          'isBoundToVpc': 'boolean',
          'architecture': '*',
          'resourceArnsForGrantInvoke': '*',
          'connections': '*'
        },
        'resourceArnsForGrantInvoke': '*'
      },
      'postHook': {
        'functionName': '*',
        'functionArn': '*',
        'role': {
          'roleArn': '*',
          'roleName': '*',
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'principalAccount': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'isBoundToVpc': 'boolean',
        'latestVersion': {
          'version': '*',
          'edgeArn': '*',
          'functionName': '*',
          'functionArn': '*',
          'isBoundToVpc': 'boolean',
          'architecture': '*',
          'resourceArnsForGrantInvoke': '*',
          'connections': '*'
        },
        'resourceArnsForGrantInvoke': '*'
      },
      'ignorePollAlarmsFailure': 'boolean',
      'autoRollback': {
        'failedDeployment': 'boolean',
        'stoppedDeployment': 'boolean',
        'deploymentInAlarm': 'boolean'
      },
      'ignoreAlarmConfiguration': 'boolean',
      'addAlarm': [
        {
          'alarmArn': '*',
          'alarmName': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      ],
      'addPreHook': [
        {
          'functionName': '*',
          'functionArn': '*',
          'role': {
            'roleArn': '*',
            'roleName': '*',
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*',
            'grantPrincipal': {
              'assumeRoleAction': '*',
              'principalAccount': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'isBoundToVpc': 'boolean',
          'latestVersion': {
            'version': '*',
            'edgeArn': '*',
            'functionName': '*',
            'functionArn': '*',
            'isBoundToVpc': 'boolean',
            'architecture': '*',
            'resourceArnsForGrantInvoke': '*',
            'connections': '*'
          },
          'resourceArnsForGrantInvoke': '*'
        }
      ],
      'addPostHook': [
        {
          'functionName': '*',
          'functionArn': '*',
          'role': {
            'roleArn': '*',
            'roleName': '*',
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*',
            'grantPrincipal': {
              'assumeRoleAction': '*',
              'principalAccount': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'isBoundToVpc': 'boolean',
          'latestVersion': {
            'version': '*',
            'edgeArn': '*',
            'functionName': '*',
            'functionArn': '*',
            'isBoundToVpc': 'boolean',
            'architecture': '*',
            'resourceArnsForGrantInvoke': '*',
            'connections': '*'
          },
          'resourceArnsForGrantInvoke': '*'
        }
      ],
      'grantPutLifecycleEventHookExecutionStatus': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        }
      ]
    },
    'ImportedLambdaDeploymentGroup': {
      'application': {
        'applicationArn': '*',
        'applicationName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'deploymentGroupName': '*',
      'deploymentConfig': {
        'deploymentConfigName': '*',
        'deploymentConfigArn': '*'
      }
    },
    'ImportedDeploymentGroupBase': {
      'application': {
        'applicationArn': '*',
        'applicationName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'deploymentGroupName': '*'
    },
    'DeploymentGroupBase': {
      'deploymentGroupName': '*',
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'roleConstructId': '*'
    },
    'ServerApplication': {
      'applicationName': '*'
    },
    'ServerDeploymentConfig': {
      'minimumHealthyHosts': '*',
      'zonalConfig': {
        'monitorDuration': '*',
        'minimumHealthyHostsPerZone': '*'
      },
      'deploymentConfigName': '*'
    },
    'ImportedServerDeploymentGroup': {
      'application': {
        'applicationArn': '*',
        'applicationName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'deploymentGroupName': '*',
      'deploymentConfig': {
        'deploymentConfigName': '*',
        'deploymentConfigArn': '*'
      }
    },
    'ServerDeploymentGroup': {
      'application': {
        'applicationArn': '*',
        'applicationName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'deploymentGroupName': '*',
      'deploymentConfig': {
        'deploymentConfigName': '*',
        'deploymentConfigArn': '*'
      },
      'autoScalingGroups': {
        'autoScalingGroupName': '*',
        'autoScalingGroupArn': '*',
        'osType': 'OperatingSystemType',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*'
        }
      },
      'installAgent': 'boolean',
      'loadBalancer': '*',
      'loadBalancers': '*',
      'ec2InstanceTags': '*',
      'onPremiseInstanceTags': '*',
      'alarms': {
        'alarmArn': '*',
        'alarmName': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'ignorePollAlarmsFailure': 'boolean',
      'autoRollback': {
        'failedDeployment': 'boolean',
        'stoppedDeployment': 'boolean',
        'deploymentInAlarm': 'boolean'
      },
      'ignoreAlarmConfiguration': 'boolean',
      'terminationHook': 'boolean',
      'addAutoScalingGroup': [
        '*'
      ],
      'addAlarm': [
        {
          'alarmArn': '*',
          'alarmName': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      ]
    }
  },
  'aws-codepipeline.lib': {
    'AliasWithShorterGeneratedName': {}
  },
  'aws-cognito.lib': {
    'UserPoolIdentityProviderAmazon': {
      'clientId': '*',
      'clientSecret': '*',
      'scopes': '*',
      'userPool': {
        'userPoolId': '*',
        'userPoolArn': '*',
        'userPoolProviderName': '*',
        'identityProviders': {
          'providerName': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'attributeMapping': {
        'address': '*',
        'custom': '*'
      }
    },
    'UserPoolIdentityProviderApple': {
      'clientId': '*',
      'teamId': '*',
      'keyId': '*',
      'privateKey': '*',
      'privateKeyValue': '*',
      'scopes': '*',
      'userPool': {
        'userPoolId': '*',
        'userPoolArn': '*',
        'userPoolProviderName': '*',
        'identityProviders': {
          'providerName': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'attributeMapping': {
        'address': '*',
        'custom': '*'
      }
    },
    'UserPoolIdentityProviderFacebook': {
      'clientId': '*',
      'clientSecret': '*',
      'scopes': '*',
      'apiVersion': '*',
      'userPool': {
        'userPoolId': '*',
        'userPoolArn': '*',
        'userPoolProviderName': '*',
        'identityProviders': {
          'providerName': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'attributeMapping': {
        'address': '*',
        'custom': '*'
      }
    },
    'UserPoolIdentityProviderGoogle': {
      'clientId': '*',
      'clientSecret': '*',
      'clientSecretValue': '*',
      'scopes': '*',
      'userPool': {
        'userPoolId': '*',
        'userPoolArn': '*',
        'userPoolProviderName': '*',
        'identityProviders': {
          'providerName': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'attributeMapping': {
        'address': '*',
        'custom': '*'
      }
    },
    'UserPoolIdentityProviderOidc': {
      'clientId': '*',
      'clientSecret': '*',
      'issuerUrl': '*',
      'name': '*',
      'scopes': '*',
      'identifiers': '*',
      'attributeRequestMethod': 'OidcAttributeRequestMethod',
      'endpoints': {
        'authorization': '*',
        'token': '*',
        'userInfo': '*',
        'jwksUri': '*'
      },
      'userPool': {
        'userPoolId': '*',
        'userPoolArn': '*',
        'userPoolProviderName': '*',
        'identityProviders': {
          'providerName': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'attributeMapping': {
        'address': '*',
        'custom': '*'
      }
    },
    'UserPoolIdentityProviderSaml': {
      'name': '*',
      'identifiers': '*',
      'metadata': '*',
      'idpSignout': 'boolean',
      'encryptedResponses': 'boolean',
      'requestSigningAlgorithm': 'SigningAlgorithm',
      'idpInitiated': 'boolean',
      'userPool': {
        'userPoolId': '*',
        'userPoolArn': '*',
        'userPoolProviderName': '*',
        'identityProviders': {
          'providerName': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'attributeMapping': {
        'address': '*',
        'custom': '*'
      }
    }
  },
  'aws-ecs.lib': {
    'ImportedTaskDefinition': {
      'taskDefinitionArn': '*',
      'compatibility': 'Compatibility',
      'networkMode': 'NetworkMode',
      'taskRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'executionRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      }
    },
    'TaskDefinition': {
      'networkMode': 'NetworkMode',
      'placementConstraints': '*',
      'compatibility': 'Compatibility',
      'cpu': '*',
      'memoryMiB': '*',
      'ipcMode': 'IpcMode',
      'pidMode': 'PidMode',
      'inferenceAccelerators': {
        'deviceName': '*',
        'deviceType': '*'
      },
      'ephemeralStorageGiB': '*',
      'runtimePlatform': {
        'cpuArchitecture': '*',
        'operatingSystemFamily': '*'
      },
      'family': '*',
      'executionRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'taskRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'proxyConfiguration': '*',
      'volumes': {
        'host': {
          'sourcePath': '*'
        },
        'name': '*',
        'configuredAtLaunch': 'boolean',
        'dockerVolumeConfiguration': {
          'autoprovision': 'boolean',
          'driver': '*',
          'driverOpts': '*',
          'labels': '*',
          'scope': 'Scope'
        },
        'efsVolumeConfiguration': {
          'fileSystemId': '*',
          'rootDirectory': '*',
          'transitEncryption': '*',
          'transitEncryptionPort': '*',
          'authorizationConfig': {
            'accessPointId': '*',
            'iam': '*'
          }
        }
      },
      'enableFaultInjection': 'boolean',
      '_validateTarget': [
        {
          'containerName': '*',
          'containerPort': '*',
          'protocol': 'Protocol'
        }
      ],
      '_portRangeFromPortMapping': [
        {
          'containerPort': '*',
          'containerPortRange': '*',
          'hostPort': '*',
          'protocol': 'Protocol',
          'name': '*',
          'appProtocol': '*'
        }
      ],
      'addToTaskRolePolicy': [
        '*'
      ],
      'addToExecutionRolePolicy': [
        '*'
      ],
      'addContainer': [
        '*',
        {
          'image': '*',
          'containerName': '*',
          'command': '*',
          'credentialSpecs': '*',
          'cpu': '*',
          'disableNetworking': 'boolean',
          'dnsSearchDomains': '*',
          'dnsServers': '*',
          'dockerLabels': '*',
          'dockerSecurityOptions': '*',
          'entryPoint': '*',
          'environment': '*',
          'environmentFiles': '*',
          'secrets': '*',
          'startTimeout': '*',
          'essential': 'boolean',
          'extraHosts': '*',
          'healthCheck': {
            'command': '*',
            'retries': '*'
          },
          'hostname': '*',
          'interactive': 'boolean',
          'memoryLimitMiB': '*',
          'memoryReservationMiB': '*',
          'privileged': 'boolean',
          'readonlyRootFilesystem': 'boolean',
          'user': '*',
          'versionConsistency': 'VersionConsistency',
          'workingDirectory': '*',
          'logging': '*',
          'linuxParameters': '*',
          'gpuCount': '*',
          'portMappings': {
            'containerPort': '*',
            'containerPortRange': '*',
            'hostPort': '*',
            'protocol': 'Protocol',
            'name': '*',
            'appProtocol': '*'
          },
          'inferenceAcceleratorResources': '*',
          'systemControls': {
            'namespace': '*',
            'value': '*'
          },
          'pseudoTerminal': 'boolean',
          'ulimits': {
            'name': 'UlimitName',
            'softLimit': '*',
            'hardLimit': '*'
          },
          'enableRestartPolicy': 'boolean',
          'restartIgnoredExitCodes': '*'
        }
      ],
      'addFirelensLogRouter': [
        '*',
        {
          'firelensConfig': {
            'type': 'FirelensLogRouterType',
            'options': {
              'enableECSLogMetadata': 'boolean',
              'configFileType': 'FirelensConfigFileType',
              'configFileValue': '*'
            }
          },
          'image': '*',
          'containerName': '*',
          'command': '*',
          'credentialSpecs': '*',
          'cpu': '*',
          'disableNetworking': 'boolean',
          'dnsSearchDomains': '*',
          'dnsServers': '*',
          'dockerLabels': '*',
          'dockerSecurityOptions': '*',
          'entryPoint': '*',
          'environment': '*',
          'environmentFiles': '*',
          'secrets': '*',
          'startTimeout': '*',
          'essential': 'boolean',
          'extraHosts': '*',
          'healthCheck': {
            'command': '*',
            'retries': '*'
          },
          'hostname': '*',
          'interactive': 'boolean',
          'memoryLimitMiB': '*',
          'memoryReservationMiB': '*',
          'privileged': 'boolean',
          'readonlyRootFilesystem': 'boolean',
          'user': '*',
          'versionConsistency': 'VersionConsistency',
          'workingDirectory': '*',
          'logging': '*',
          'linuxParameters': '*',
          'gpuCount': '*',
          'portMappings': {
            'containerPort': '*',
            'containerPortRange': '*',
            'hostPort': '*',
            'protocol': 'Protocol',
            'name': '*',
            'appProtocol': '*'
          },
          'inferenceAcceleratorResources': '*',
          'systemControls': {
            'namespace': '*',
            'value': '*'
          },
          'pseudoTerminal': 'boolean',
          'ulimits': {
            'name': 'UlimitName',
            'softLimit': '*',
            'hardLimit': '*'
          },
          'enableRestartPolicy': 'boolean',
          'restartIgnoredExitCodes': '*'
        }
      ],
      '_linkContainer': [
        '*'
      ],
      'addVolume': [
        {
          'host': {
            'sourcePath': '*'
          },
          'name': '*',
          'configuredAtLaunch': 'boolean',
          'dockerVolumeConfiguration': {
            'autoprovision': 'boolean',
            'driver': '*',
            'driverOpts': '*',
            'labels': '*',
            'scope': 'Scope'
          },
          'efsVolumeConfiguration': {
            'fileSystemId': '*',
            'rootDirectory': '*',
            'transitEncryption': '*',
            'transitEncryptionPort': '*',
            'authorizationConfig': {
              'accessPointId': '*',
              'iam': '*'
            }
          }
        }
      ],
      'addPlacementConstraint': [
        '*'
      ],
      'addExtension': [
        '*'
      ],
      'addInferenceAccelerator': [
        {
          'deviceName': '*',
          'deviceType': '*'
        }
      ],
      'grantRun': [
        {
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        }
      ],
      'obtainExecutionRole': [],
      'findPortMappingByName': [
        '*'
      ],
      'findContainer': [
        '*'
      ]
    },
    'Ec2Service': {
      'taskDefinition': '*',
      'assignPublicIp': 'boolean',
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'securityGroup': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'placementConstraints': '*',
      'placementStrategies': '*',
      'daemon': 'boolean',
      'availabilityZoneRebalancing': 'AvailabilityZoneRebalancing',
      'cluster': {
        'clusterName': '*',
        'clusterArn': '*',
        'vpc': {
          'vpcId': '*',
          'vpcArn': '*',
          'vpcCidrBlock': '*',
          'publicSubnets': {
            'availabilityZone': '*',
            'subnetId': '*',
            'internetConnectivityEstablished': '*',
            'ipv4CidrBlock': '*',
            'routeTable': {
              'routeTableId': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'availabilityZones': '*',
          'vpnGatewayId': '*'
        },
        'connections': '*',
        'hasEc2Capacity': 'boolean',
        'defaultCloudMapNamespace': {
          'namespaceName': '*',
          'namespaceId': '*',
          'namespaceArn': '*',
          'type': 'NamespaceType'
        },
        'autoscalingGroup': {
          'autoScalingGroupName': '*',
          'autoScalingGroupArn': '*',
          'osType': 'OperatingSystemType',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        },
        'executeCommandConfiguration': {
          'kmsKey': {
            'keyArn': '*',
            'keyId': '*'
          },
          'logConfiguration': {
            'cloudWatchEncryptionEnabled': 'boolean',
            'cloudWatchLogGroup': {
              'logGroupArn': '*',
              'logGroupName': '*'
            },
            's3Bucket': {
              'bucketArn': '*',
              'bucketName': '*',
              'bucketWebsiteUrl': '*',
              'bucketWebsiteDomainName': '*',
              'bucketDomainName': '*',
              'bucketDualStackDomainName': '*',
              'bucketRegionalDomainName': '*',
              'isWebsite': 'boolean',
              'policy': '*',
              'replicationRoleArn': '*'
            },
            's3EncryptionEnabled': 'boolean',
            's3KeyPrefix': '*'
          },
          'logging': 'ExecuteCommandLogging'
        }
      },
      'desiredCount': '*',
      'serviceName': '*',
      'maxHealthyPercent': '*',
      'minHealthyPercent': '*',
      'healthCheckGracePeriod': '*',
      'cloudMapOptions': {
        'name': '*',
        'cloudMapNamespace': {
          'namespaceName': '*',
          'namespaceId': '*',
          'namespaceArn': '*',
          'type': 'NamespaceType',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'dnsRecordType': 'DnsRecordType',
        'dnsTtl': '*',
        'failureThreshold': '*',
        'container': '*',
        'containerPort': '*'
      },
      'propagateTags': 'PropagatedTagSource',
      'propagateTaskTagsFrom': 'PropagatedTagSource',
      'enableECSManagedTags': 'boolean',
      'deploymentController': {
        'type': 'DeploymentControllerType'
      },
      'circuitBreaker': {
        'enable': 'boolean',
        'rollback': 'boolean'
      },
      'deploymentAlarms': {
        'alarmNames': '*',
        'behavior': 'AlarmBehavior'
      },
      'capacityProviderStrategies': {
        'capacityProvider': '*',
        'base': '*',
        'weight': '*'
      },
      'enableExecuteCommand': 'boolean',
      'serviceConnectConfiguration': {
        'namespace': '*',
        'services': {
          'portMappingName': '*',
          'discoveryName': '*',
          'dnsName': '*',
          'port': '*',
          'ingressPortOverride': '*',
          'idleTimeout': '*',
          'tls': {
            'awsPcaAuthorityArn': '*',
            'kmsKey': {
              'keyArn': '*',
              'keyId': '*',
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'role': {
              'roleArn': '*',
              'roleName': '*',
              'assumeRoleAction': '*',
              'policyFragment': '*',
              'principalAccount': '*',
              'grantPrincipal': {
                'assumeRoleAction': '*',
                'principalAccount': '*'
              }
            }
          }
        },
        'logDriver': '*'
      },
      'taskDefinitionRevision': '*',
      'volumeConfigurations': '*',
      'addPlacementStrategies': [
        '*'
      ],
      'addPlacementConstraints': [
        '*'
      ],
      'attachToClassicLB': [
        '*'
      ]
    },
    'Ec2TaskDefinition': {
      'networkMode': 'NetworkMode',
      'placementConstraints': '*',
      'ipcMode': 'IpcMode',
      'pidMode': 'PidMode',
      'inferenceAccelerators': {
        'deviceName': '*',
        'deviceType': '*'
      },
      'family': '*',
      'executionRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'taskRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'proxyConfiguration': '*',
      'volumes': {
        'host': {
          'sourcePath': '*'
        },
        'name': '*',
        'configuredAtLaunch': 'boolean',
        'dockerVolumeConfiguration': {
          'autoprovision': 'boolean',
          'driver': '*',
          'driverOpts': '*',
          'labels': '*',
          'scope': 'Scope'
        },
        'efsVolumeConfiguration': {
          'fileSystemId': '*',
          'rootDirectory': '*',
          'transitEncryption': '*',
          'transitEncryptionPort': '*',
          'authorizationConfig': {
            'accessPointId': '*',
            'iam': '*'
          }
        }
      },
      'enableFaultInjection': 'boolean'
    },
    'ExternalService': {
      'taskDefinition': '*',
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'daemon': 'boolean',
      'cluster': {
        'clusterName': '*',
        'clusterArn': '*',
        'vpc': {
          'vpcId': '*',
          'vpcArn': '*',
          'vpcCidrBlock': '*',
          'publicSubnets': {
            'availabilityZone': '*',
            'subnetId': '*',
            'internetConnectivityEstablished': '*',
            'ipv4CidrBlock': '*',
            'routeTable': {
              'routeTableId': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'availabilityZones': '*',
          'vpnGatewayId': '*'
        },
        'connections': '*',
        'hasEc2Capacity': 'boolean',
        'defaultCloudMapNamespace': {
          'namespaceName': '*',
          'namespaceId': '*',
          'namespaceArn': '*',
          'type': 'NamespaceType'
        },
        'autoscalingGroup': {
          'autoScalingGroupName': '*',
          'autoScalingGroupArn': '*',
          'osType': 'OperatingSystemType',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        },
        'executeCommandConfiguration': {
          'kmsKey': {
            'keyArn': '*',
            'keyId': '*'
          },
          'logConfiguration': {
            'cloudWatchEncryptionEnabled': 'boolean',
            'cloudWatchLogGroup': {
              'logGroupArn': '*',
              'logGroupName': '*'
            },
            's3Bucket': {
              'bucketArn': '*',
              'bucketName': '*',
              'bucketWebsiteUrl': '*',
              'bucketWebsiteDomainName': '*',
              'bucketDomainName': '*',
              'bucketDualStackDomainName': '*',
              'bucketRegionalDomainName': '*',
              'isWebsite': 'boolean',
              'policy': '*',
              'replicationRoleArn': '*'
            },
            's3EncryptionEnabled': 'boolean',
            's3KeyPrefix': '*'
          },
          'logging': 'ExecuteCommandLogging'
        }
      },
      'desiredCount': '*',
      'serviceName': '*',
      'maxHealthyPercent': '*',
      'minHealthyPercent': '*',
      'healthCheckGracePeriod': '*',
      'cloudMapOptions': {
        'name': '*',
        'cloudMapNamespace': {
          'namespaceName': '*',
          'namespaceId': '*',
          'namespaceArn': '*',
          'type': 'NamespaceType',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'dnsRecordType': 'DnsRecordType',
        'dnsTtl': '*',
        'failureThreshold': '*',
        'container': '*',
        'containerPort': '*'
      },
      'propagateTags': 'PropagatedTagSource',
      'propagateTaskTagsFrom': 'PropagatedTagSource',
      'enableECSManagedTags': 'boolean',
      'deploymentController': {
        'type': 'DeploymentControllerType'
      },
      'circuitBreaker': {
        'enable': 'boolean',
        'rollback': 'boolean'
      },
      'deploymentAlarms': {
        'alarmNames': '*',
        'behavior': 'AlarmBehavior'
      },
      'capacityProviderStrategies': {
        'capacityProvider': '*',
        'base': '*',
        'weight': '*'
      },
      'enableExecuteCommand': 'boolean',
      'serviceConnectConfiguration': {
        'namespace': '*',
        'services': {
          'portMappingName': '*',
          'discoveryName': '*',
          'dnsName': '*',
          'port': '*',
          'ingressPortOverride': '*',
          'idleTimeout': '*',
          'tls': {
            'awsPcaAuthorityArn': '*',
            'kmsKey': {
              'keyArn': '*',
              'keyId': '*',
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'role': {
              'roleArn': '*',
              'roleName': '*',
              'assumeRoleAction': '*',
              'policyFragment': '*',
              'principalAccount': '*',
              'grantPrincipal': {
                'assumeRoleAction': '*',
                'principalAccount': '*'
              }
            }
          }
        },
        'logDriver': '*'
      },
      'taskDefinitionRevision': '*',
      'volumeConfigurations': '*',
      'attachToApplicationTargetGroup': [
        {
          'metrics': '*',
          'targetGroupName': '*',
          'targetGroupArn': '*',
          'loadBalancerArns': '*',
          'loadBalancerAttached': '*',
          'node': '*'
        }
      ],
      'loadBalancerTarget': [
        {
          'containerName': '*',
          'containerPort': '*',
          'protocol': 'Protocol'
        }
      ],
      'registerLoadBalancerTargets': [
        {
          'containerName': '*',
          'containerPort': '*',
          'protocol': 'Protocol',
          'newTargetGroupId': '*',
          'listener': '*'
        }
      ],
      'autoScaleTaskCount': [
        {
          'minCapacity': '*',
          'maxCapacity': '*'
        }
      ],
      'enableCloudMap': [
        {
          'name': '*',
          'cloudMapNamespace': {
            'namespaceName': '*',
            'namespaceId': '*',
            'namespaceArn': '*',
            'type': 'NamespaceType',
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'dnsRecordType': 'DnsRecordType',
          'dnsTtl': '*',
          'failureThreshold': '*',
          'container': '*',
          'containerPort': '*'
        }
      ],
      'associateCloudMapService': [
        {
          'service': {
            'serviceName': '*',
            'namespace': {
              'namespaceName': '*',
              'namespaceId': '*',
              'namespaceArn': '*',
              'type': 'NamespaceType',
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'serviceId': '*',
            'serviceArn': '*',
            'dnsRecordType': 'DnsRecordType',
            'routingPolicy': 'RoutingPolicy',
            'discoveryType': 'DiscoveryType'
          },
          'container': '*',
          'containerPort': '*'
        }
      ]
    },
    'ExternalTaskDefinition': {
      'networkMode': 'NetworkMode',
      'family': '*',
      'executionRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'taskRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'proxyConfiguration': '*',
      'volumes': {
        'host': {
          'sourcePath': '*'
        },
        'name': '*',
        'configuredAtLaunch': 'boolean',
        'dockerVolumeConfiguration': {
          'autoprovision': 'boolean',
          'driver': '*',
          'driverOpts': '*',
          'labels': '*',
          'scope': 'Scope'
        },
        'efsVolumeConfiguration': {
          'fileSystemId': '*',
          'rootDirectory': '*',
          'transitEncryption': '*',
          'transitEncryptionPort': '*',
          'authorizationConfig': {
            'accessPointId': '*',
            'iam': '*'
          }
        }
      },
      'enableFaultInjection': 'boolean',
      'addInferenceAccelerator': [
        {
          'deviceName': '*',
          'deviceType': '*'
        }
      ]
    },
    'FargateService': {
      'taskDefinition': '*',
      'assignPublicIp': 'boolean',
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'securityGroup': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'platformVersion': 'FargatePlatformVersion',
      'availabilityZoneRebalancing': 'AvailabilityZoneRebalancing',
      'cluster': {
        'clusterName': '*',
        'clusterArn': '*',
        'vpc': {
          'vpcId': '*',
          'vpcArn': '*',
          'vpcCidrBlock': '*',
          'publicSubnets': {
            'availabilityZone': '*',
            'subnetId': '*',
            'internetConnectivityEstablished': '*',
            'ipv4CidrBlock': '*',
            'routeTable': {
              'routeTableId': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'availabilityZones': '*',
          'vpnGatewayId': '*'
        },
        'connections': '*',
        'hasEc2Capacity': 'boolean',
        'defaultCloudMapNamespace': {
          'namespaceName': '*',
          'namespaceId': '*',
          'namespaceArn': '*',
          'type': 'NamespaceType'
        },
        'autoscalingGroup': {
          'autoScalingGroupName': '*',
          'autoScalingGroupArn': '*',
          'osType': 'OperatingSystemType',
          'grantPrincipal': {
            'assumeRoleAction': '*',
            'policyFragment': '*',
            'principalAccount': '*'
          }
        },
        'executeCommandConfiguration': {
          'kmsKey': {
            'keyArn': '*',
            'keyId': '*'
          },
          'logConfiguration': {
            'cloudWatchEncryptionEnabled': 'boolean',
            'cloudWatchLogGroup': {
              'logGroupArn': '*',
              'logGroupName': '*'
            },
            's3Bucket': {
              'bucketArn': '*',
              'bucketName': '*',
              'bucketWebsiteUrl': '*',
              'bucketWebsiteDomainName': '*',
              'bucketDomainName': '*',
              'bucketDualStackDomainName': '*',
              'bucketRegionalDomainName': '*',
              'isWebsite': 'boolean',
              'policy': '*',
              'replicationRoleArn': '*'
            },
            's3EncryptionEnabled': 'boolean',
            's3KeyPrefix': '*'
          },
          'logging': 'ExecuteCommandLogging'
        }
      },
      'desiredCount': '*',
      'serviceName': '*',
      'maxHealthyPercent': '*',
      'minHealthyPercent': '*',
      'healthCheckGracePeriod': '*',
      'cloudMapOptions': {
        'name': '*',
        'cloudMapNamespace': {
          'namespaceName': '*',
          'namespaceId': '*',
          'namespaceArn': '*',
          'type': 'NamespaceType',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'dnsRecordType': 'DnsRecordType',
        'dnsTtl': '*',
        'failureThreshold': '*',
        'container': '*',
        'containerPort': '*'
      },
      'propagateTags': 'PropagatedTagSource',
      'propagateTaskTagsFrom': 'PropagatedTagSource',
      'enableECSManagedTags': 'boolean',
      'deploymentController': {
        'type': 'DeploymentControllerType'
      },
      'circuitBreaker': {
        'enable': 'boolean',
        'rollback': 'boolean'
      },
      'deploymentAlarms': {
        'alarmNames': '*',
        'behavior': 'AlarmBehavior'
      },
      'capacityProviderStrategies': {
        'capacityProvider': '*',
        'base': '*',
        'weight': '*'
      },
      'enableExecuteCommand': 'boolean',
      'serviceConnectConfiguration': {
        'namespace': '*',
        'services': {
          'portMappingName': '*',
          'discoveryName': '*',
          'dnsName': '*',
          'port': '*',
          'ingressPortOverride': '*',
          'idleTimeout': '*',
          'tls': {
            'awsPcaAuthorityArn': '*',
            'kmsKey': {
              'keyArn': '*',
              'keyId': '*',
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              },
              'node': '*'
            },
            'role': {
              'roleArn': '*',
              'roleName': '*',
              'assumeRoleAction': '*',
              'policyFragment': '*',
              'principalAccount': '*',
              'grantPrincipal': {
                'assumeRoleAction': '*',
                'principalAccount': '*'
              }
            }
          }
        },
        'logDriver': '*'
      },
      'taskDefinitionRevision': '*',
      'volumeConfigurations': '*',
      'attachToClassicLB': [
        '*'
      ]
    },
    'FargateTaskDefinition': {
      'cpu': '*',
      'memoryLimitMiB': '*',
      'ephemeralStorageGiB': '*',
      'runtimePlatform': {
        'cpuArchitecture': '*',
        'operatingSystemFamily': '*'
      },
      'pidMode': 'PidMode',
      'family': '*',
      'executionRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'taskRole': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'proxyConfiguration': '*',
      'volumes': {
        'host': {
          'sourcePath': '*'
        },
        'name': '*',
        'configuredAtLaunch': 'boolean',
        'dockerVolumeConfiguration': {
          'autoprovision': 'boolean',
          'driver': '*',
          'driverOpts': '*',
          'labels': '*',
          'scope': 'Scope'
        },
        'efsVolumeConfiguration': {
          'fileSystemId': '*',
          'rootDirectory': '*',
          'transitEncryption': '*',
          'transitEncryptionPort': '*',
          'authorizationConfig': {
            'accessPointId': '*',
            'iam': '*'
          }
        }
      },
      'enableFaultInjection': 'boolean'
    }
  },
  'aws-elasticloadbalancingv2.lib': {
    'ApplicationListener': {
      'loadBalancer': {
        'loadBalancerArn': '*',
        'vpc': {
          'vpcId': '*',
          'vpcArn': '*',
          'vpcCidrBlock': '*',
          'publicSubnets': {
            'availabilityZone': '*',
            'subnetId': '*',
            'internetConnectivityEstablished': '*',
            'ipv4CidrBlock': '*',
            'routeTable': {
              'routeTableId': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'availabilityZones': '*',
          'vpnGatewayId': '*'
        },
        'ipAddressType': 'IpAddressType',
        'listeners': '*',
        'metrics': '*',
        'loadBalancerCanonicalHostedZoneId': '*',
        'loadBalancerDnsName': '*',
        'connections': '*'
      },
      'protocol': 'ApplicationProtocol',
      'port': '*',
      'certificateArns': '*',
      'certificates': {
        'certificateArn': '*'
      },
      'sslPolicy': 'SslPolicy',
      'defaultTargetGroups': {
        'metrics': '*',
        'targetGroupName': '*',
        'targetGroupArn': '*',
        'loadBalancerArns': '*',
        'loadBalancerAttached': '*',
        'node': '*'
      },
      'defaultAction': '*',
      'open': 'boolean',
      'mutualAuthentication': {
        'mutualAuthenticationMode': 'MutualAuthenticationMode',
        'trustStore': {
          'trustStoreName': '*',
          'trustStoreArn': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'ignoreClientCertificateExpiry': 'boolean',
        'advertiseTrustStoreCaNames': 'boolean'
      },
      'addCertificateArns': [
        '*',
        '*'
      ],
      'addCertificates': [
        '*',
        {
          'certificateArn': '*'
        }
      ],
      'addAction': [
        '*',
        {
          'action': '*',
          'removeSuffix': 'boolean',
          'priority': '*',
          'conditions': '*',
          'hostHeader': '*',
          'pathPattern': '*',
          'pathPatterns': '*'
        }
      ],
      'addTargetGroups': [
        '*',
        {
          'targetGroups': {
            'metrics': '*',
            'targetGroupName': '*',
            'targetGroupArn': '*',
            'loadBalancerArns': '*',
            'loadBalancerAttached': '*',
            'node': '*'
          },
          'priority': '*',
          'conditions': '*',
          'hostHeader': '*',
          'pathPattern': '*',
          'pathPatterns': '*'
        }
      ],
      'addTargets': [
        '*',
        {
          'protocol': 'ApplicationProtocol',
          'protocolVersion': 'ApplicationProtocolVersion',
          'port': '*',
          'slowStart': '*',
          'stickinessCookieName': '*',
          'targets': '*',
          'targetGroupName': '*',
          'healthCheck': {
            'enabled': 'boolean',
            'path': '*',
            'port': '*',
            'protocol': 'Protocol',
            'healthyThresholdCount': '*',
            'unhealthyThresholdCount': '*',
            'healthyGrpcCodes': '*',
            'healthyHttpCodes': '*'
          },
          'loadBalancingAlgorithmType': 'TargetGroupLoadBalancingAlgorithmType',
          'enableAnomalyMitigation': 'boolean',
          'priority': '*',
          'conditions': '*',
          'hostHeader': '*',
          'pathPattern': '*',
          'pathPatterns': '*'
        }
      ],
      'addFixedResponse': [
        '*',
        {
          'priority': '*',
          'conditions': '*',
          'hostHeader': '*',
          'pathPattern': '*',
          'pathPatterns': '*',
          'statusCode': '*',
          'contentType': 'ContentType',
          'messageBody': '*'
        }
      ],
      'addRedirectResponse': [
        '*',
        {
          'priority': '*',
          'conditions': '*',
          'hostHeader': '*',
          'pathPattern': '*',
          'pathPatterns': '*',
          'host': '*',
          'path': '*',
          'port': '*',
          'protocol': '*',
          'query': '*',
          'statusCode': '*'
        }
      ],
      'registerConnectable': [
        {
          'connections': '*'
        },
        '*'
      ]
    },
    'ImportedApplicationListener': {
      'listenerArn': '*',
      'securityGroup': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'defaultPort': '*',
      'securityGroupAllowsAllOutbound': 'boolean'
    },
    'LookedUpApplicationListener': {
      'listenerArn': '*',
      'listenerPort': '*',
      'securityGroupIds': '*'
    },
    'ApplicationLoadBalancer': {
      'securityGroup': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'ipAddressType': 'IpAddressType',
      'http2Enabled': 'boolean',
      'idleTimeout': '*',
      'dropInvalidHeaderFields': 'boolean',
      'desyncMitigationMode': 'DesyncMitigationMode',
      'clientKeepAlive': '*',
      'preserveHostHeader': 'boolean',
      'xAmznTlsVersionAndCipherSuiteHeaders': 'boolean',
      'preserveXffClientPort': 'boolean',
      'xffHeaderProcessingMode': 'XffHeaderProcessingMode',
      'wafFailOpen': 'boolean',
      'loadBalancerName': '*',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'internetFacing': 'boolean',
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'deletionProtection': 'boolean',
      'crossZoneEnabled': 'boolean',
      'denyAllIgwTraffic': 'boolean',
      'addListener': [
        '*',
        {
          'protocol': 'ApplicationProtocol',
          'port': '*',
          'certificateArns': '*',
          'certificates': {
            'certificateArn': '*'
          },
          'sslPolicy': 'SslPolicy',
          'defaultTargetGroups': {
            'metrics': '*',
            'targetGroupName': '*',
            'targetGroupArn': '*',
            'loadBalancerArns': '*',
            'loadBalancerAttached': '*',
            'node': '*'
          },
          'defaultAction': '*',
          'open': 'boolean',
          'mutualAuthentication': {
            'mutualAuthenticationMode': 'MutualAuthenticationMode',
            'trustStore': {
              'trustStoreName': '*',
              'trustStoreArn': '*',
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              }
            },
            'ignoreClientCertificateExpiry': 'boolean',
            'advertiseTrustStoreCaNames': 'boolean'
          }
        }
      ],
      'addRedirect': [
        {
          'sourceProtocol': 'ApplicationProtocol',
          'sourcePort': '*',
          'targetProtocol': 'ApplicationProtocol',
          'targetPort': '*',
          'open': 'boolean'
        }
      ],
      'logAccessLogs': [
        {
          'bucketArn': '*',
          'bucketName': '*',
          'bucketWebsiteUrl': '*',
          'bucketWebsiteDomainName': '*',
          'bucketDomainName': '*',
          'bucketDualStackDomainName': '*',
          'bucketRegionalDomainName': '*',
          'isWebsite': 'boolean',
          'encryptionKey': {
            'keyArn': '*',
            'keyId': '*',
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'policy': '*',
          'replicationRoleArn': '*'
        },
        '*'
      ],
      'logConnectionLogs': [
        {
          'bucketArn': '*',
          'bucketName': '*',
          'bucketWebsiteUrl': '*',
          'bucketWebsiteDomainName': '*',
          'bucketDomainName': '*',
          'bucketDualStackDomainName': '*',
          'bucketRegionalDomainName': '*',
          'isWebsite': 'boolean',
          'encryptionKey': {
            'keyArn': '*',
            'keyId': '*',
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'policy': '*',
          'replicationRoleArn': '*'
        },
        '*'
      ],
      'addSecurityGroup': [
        {
          'securityGroupId': '*',
          'allowAllOutbound': 'boolean',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*',
          'canInlineRule': 'boolean',
          'uniqueId': '*',
          'connections': '*'
        }
      ],
      'metric': [
        '*',
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricActiveConnectionCount': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricClientTlsNegotiationErrorCount': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricConsumedLCUs': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricHttpFixedResponseCount': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricHttpRedirectCount': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricHttpRedirectUrlLimitExceededCount': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricHttpCodeElb': [
        'HttpCodeElb',
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricHttpCodeTarget': [
        'HttpCodeTarget',
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricIpv6ProcessedBytes': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricIpv6RequestCount': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricNewConnectionCount': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricProcessedBytes': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricRejectedConnectionCount': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricRequestCount': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricRuleEvaluations': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricTargetConnectionErrorCount': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricTargetResponseTime': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricTargetTLSNegotiationErrorCount': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricElbAuthError': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricElbAuthFailure': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricElbAuthLatency': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricElbAuthSuccess': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ]
    },
    'ImportedApplicationLoadBalancer': {
      'loadBalancerArn': '*',
      'securityGroupId': '*',
      'loadBalancerCanonicalHostedZoneId': '*',
      'loadBalancerDnsName': '*',
      'securityGroupAllowsAllOutbound': 'boolean',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'addListener': [
        '*',
        {
          'protocol': 'ApplicationProtocol',
          'port': '*',
          'certificateArns': '*',
          'certificates': {
            'certificateArn': '*'
          },
          'sslPolicy': 'SslPolicy',
          'defaultTargetGroups': {
            'metrics': '*',
            'targetGroupName': '*',
            'targetGroupArn': '*',
            'loadBalancerArns': '*',
            'loadBalancerAttached': '*',
            'node': '*'
          },
          'defaultAction': '*',
          'open': 'boolean',
          'mutualAuthentication': {
            'mutualAuthenticationMode': 'MutualAuthenticationMode',
            'trustStore': {
              'trustStoreName': '*',
              'trustStoreArn': '*',
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              }
            },
            'ignoreClientCertificateExpiry': 'boolean',
            'advertiseTrustStoreCaNames': 'boolean'
          }
        }
      ]
    },
    'LookedUpApplicationLoadBalancer': {
      'loadBalancerArn': '*',
      'loadBalancerCanonicalHostedZoneId': '*',
      'loadBalancerDnsName': '*',
      'ipAddressType': 'LoadBalancerIpAddressType',
      'securityGroupIds': '*',
      'vpcId': '*',
      'addListener': [
        '*',
        {
          'protocol': 'ApplicationProtocol',
          'port': '*',
          'certificateArns': '*',
          'certificates': {
            'certificateArn': '*'
          },
          'sslPolicy': 'SslPolicy',
          'defaultTargetGroups': {
            'metrics': '*',
            'targetGroupName': '*',
            'targetGroupArn': '*',
            'loadBalancerArns': '*',
            'loadBalancerAttached': '*',
            'node': '*'
          },
          'defaultAction': '*',
          'open': 'boolean',
          'mutualAuthentication': {
            'mutualAuthenticationMode': 'MutualAuthenticationMode',
            'trustStore': {
              'trustStoreName': '*',
              'trustStoreArn': '*',
              'stack': '*',
              'env': {
                'account': '*',
                'region': '*'
              }
            },
            'ignoreClientCertificateExpiry': 'boolean',
            'advertiseTrustStoreCaNames': 'boolean'
          }
        }
      ]
    },
    'TrustStoreRevocation': {
      'trustStore': {
        'trustStoreName': '*',
        'trustStoreArn': '*',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'revocationContents': {
        'revocationType': 'RevocationType',
        'bucket': {
          'bucketArn': '*',
          'bucketName': '*',
          'bucketWebsiteUrl': '*',
          'bucketWebsiteDomainName': '*',
          'bucketDomainName': '*',
          'bucketDualStackDomainName': '*',
          'bucketRegionalDomainName': '*',
          'isWebsite': 'boolean',
          'encryptionKey': {
            'keyArn': '*',
            'keyId': '*',
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'policy': '*',
          'replicationRoleArn': '*'
        },
        'key': '*',
        'version': '*'
      }
    },
    'TrustStore': {
      'trustStoreName': '*',
      'bucket': {
        'bucketArn': '*',
        'bucketName': '*',
        'bucketWebsiteUrl': '*',
        'bucketWebsiteDomainName': '*',
        'bucketDomainName': '*',
        'bucketDualStackDomainName': '*',
        'bucketRegionalDomainName': '*',
        'isWebsite': 'boolean',
        'encryptionKey': {
          'keyArn': '*',
          'keyId': '*',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'policy': '*',
        'replicationRoleArn': '*'
      },
      'key': '*',
      'version': '*'
    },
    'NetworkListener': {
      'loadBalancer': {
        'vpc': {
          'vpcId': '*',
          'vpcArn': '*',
          'vpcCidrBlock': '*',
          'publicSubnets': {
            'availabilityZone': '*',
            'subnetId': '*',
            'internetConnectivityEstablished': '*',
            'ipv4CidrBlock': '*',
            'routeTable': {
              'routeTableId': '*'
            },
            'stack': '*',
            'env': {
              'account': '*',
              'region': '*'
            },
            'node': '*'
          },
          'availabilityZones': '*',
          'vpnGatewayId': '*'
        },
        'metrics': '*',
        'securityGroups': '*',
        'ipAddressType': 'IpAddressType',
        'enforceSecurityGroupInboundRulesOnPrivateLinkTraffic': '*',
        'loadBalancerCanonicalHostedZoneId': '*',
        'loadBalancerDnsName': '*',
        'loadBalancerArn': '*',
        'connections': '*'
      },
      'port': '*',
      'defaultTargetGroups': {
        'metrics': '*',
        'targetGroupName': '*',
        'targetGroupArn': '*',
        'loadBalancerArns': '*',
        'loadBalancerAttached': '*',
        'node': '*'
      },
      'defaultAction': '*',
      'protocol': 'Protocol',
      'certificates': {
        'certificateArn': '*'
      },
      'sslPolicy': 'SslPolicy',
      'alpnPolicy': 'AlpnPolicy',
      'tcpIdleTimeout': '*',
      'addCertificates': [
        '*',
        {
          'certificateArn': '*'
        }
      ],
      'addTargetGroups': [
        '*',
        {
          'metrics': '*',
          'targetGroupName': '*',
          'targetGroupArn': '*',
          'loadBalancerArns': '*',
          'loadBalancerAttached': '*',
          'node': '*'
        }
      ],
      'addAction': [
        '*',
        {
          'action': '*'
        }
      ],
      'addTargets': [
        '*',
        {
          'port': '*',
          'protocol': 'Protocol',
          'targets': '*',
          'targetGroupName': '*',
          'deregistrationDelay': '*',
          'proxyProtocolV2': 'boolean',
          'preserveClientIp': 'boolean',
          'healthCheck': {
            'enabled': 'boolean',
            'path': '*',
            'port': '*',
            'protocol': 'Protocol',
            'healthyThresholdCount': '*',
            'unhealthyThresholdCount': '*',
            'healthyGrpcCodes': '*',
            'healthyHttpCodes': '*'
          }
        }
      ]
    },
    'NetworkLoadBalancer': {
      'securityGroups': {
        'securityGroupId': '*',
        'allowAllOutbound': 'boolean',
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*',
        'canInlineRule': 'boolean',
        'uniqueId': '*',
        'connections': '*'
      },
      'ipAddressType': 'IpAddressType',
      'clientRoutingPolicy': 'ClientRoutingPolicy',
      'enforceSecurityGroupInboundRulesOnPrivateLinkTraffic': 'boolean',
      'zonalShift': 'boolean',
      'enablePrefixForIpv6SourceNat': 'boolean',
      'loadBalancerName': '*',
      'vpc': {
        'vpcId': '*',
        'vpcArn': '*',
        'vpcCidrBlock': '*',
        'publicSubnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        },
        'availabilityZones': '*',
        'vpnGatewayId': '*'
      },
      'internetFacing': 'boolean',
      'vpcSubnets': {
        'subnetType': 'SubnetType',
        'availabilityZones': '*',
        'subnetGroupName': '*',
        'subnetName': '*',
        'onePerAz': 'boolean',
        'subnetFilters': '*',
        'subnets': {
          'availabilityZone': '*',
          'subnetId': '*',
          'internetConnectivityEstablished': '*',
          'ipv4CidrBlock': '*',
          'routeTable': {
            'routeTableId': '*'
          },
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*'
        }
      },
      'deletionProtection': 'boolean',
      'crossZoneEnabled': 'boolean',
      'denyAllIgwTraffic': 'boolean',
      'addListener': [
        '*',
        {
          'port': '*',
          'defaultTargetGroups': {
            'metrics': '*',
            'targetGroupName': '*',
            'targetGroupArn': '*',
            'loadBalancerArns': '*',
            'loadBalancerAttached': '*',
            'node': '*'
          },
          'defaultAction': '*',
          'protocol': 'Protocol',
          'certificates': {
            'certificateArn': '*'
          },
          'sslPolicy': 'SslPolicy',
          'alpnPolicy': 'AlpnPolicy',
          'tcpIdleTimeout': '*'
        }
      ],
      'addSecurityGroup': [
        {
          'securityGroupId': '*',
          'allowAllOutbound': 'boolean',
          'stack': '*',
          'env': {
            'account': '*',
            'region': '*'
          },
          'node': '*',
          'canInlineRule': 'boolean',
          'uniqueId': '*',
          'connections': '*'
        }
      ],
      'metric': [
        '*',
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricActiveFlowCount': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricConsumedLCUs': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricHealthyHostCount': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricUnHealthyHostCount': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricNewFlowCount': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricProcessedBytes': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricTcpClientResetCount': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricTcpElbResetCount': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ],
      'metricTcpTargetResetCount': [
        {
          'period': '*',
          'statistic': '*',
          'dimensions': '*',
          'dimensionsMap': '*',
          'unit': 'Unit',
          'label': '*',
          'color': '*',
          'account': '*',
          'region': '*',
          'stackAccount': '*',
          'stackRegion': '*'
        }
      ]
    },
    'LookedUpNetworkLoadBalancer': {
      'loadBalancerArn': '*',
      'loadBalancerCanonicalHostedZoneId': '*',
      'loadBalancerDnsName': '*',
      'ipAddressType': 'LoadBalancerIpAddressType',
      'securityGroupIds': '*',
      'vpcId': '*',
      'addListener': [
        '*',
        {
          'port': '*',
          'defaultTargetGroups': {
            'metrics': '*',
            'targetGroupName': '*',
            'targetGroupArn': '*',
            'loadBalancerArns': '*',
            'loadBalancerAttached': '*',
            'node': '*'
          },
          'defaultAction': '*',
          'protocol': 'Protocol',
          'certificates': {
            'certificateArn': '*'
          },
          'sslPolicy': 'SslPolicy',
          'alpnPolicy': 'AlpnPolicy',
          'tcpIdleTimeout': '*'
        }
      ]
    }
  },
  'aws-iam.lib': {
    'ImmutableRole': {
      'roleArn': '*',
      'roleName': '*',
      'grant': [
        {
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*'
        },
        '*'
      ],
      'grantPassRole': [
        {
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*'
        }
      ],
      'grantAssumeRole': [
        {
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*'
        }
      ],
      'attachInlinePolicy': [
        '*'
      ],
      'addManagedPolicy': [
        {
          'managedPolicyArn': '*'
        }
      ],
      'assumeRoleAction': '*',
      'policyFragment': '*',
      'principalAccount': '*',
      'addToPolicy': [
        '*'
      ],
      'addToPrincipalPolicy': [
        '*'
      ],
      'grantPrincipal': {
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*'
      },
      'stack': '*',
      'env': {
        'account': '*',
        'region': '*'
      },
      'applyRemovalPolicy': '*',
      'node': '*'
    },
    'ImportedRole': {
      'roleArn': '*',
      'roleName': '*',
      'account': '*',
      'mutable': 'boolean',
      'addGrantsToResources': 'boolean',
      'defaultPolicyName': '*',
      'addToPolicy': [
        '*'
      ],
      'addToPrincipalPolicy': [
        '*'
      ],
      'attachInlinePolicy': [
        '*'
      ],
      'addManagedPolicy': [
        {
          'managedPolicyArn': '*'
        }
      ],
      'grantPassRole': [
        {
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*'
        }
      ],
      'grantAssumeRole': [
        {
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*'
        }
      ],
      'grant': [
        {
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*'
        },
        '*'
      ],
      'dedupeString': []
    },
    'PrecreatedRole': {
      'role': {
        'roleArn': '*',
        'roleName': '*',
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*',
        'grantPrincipal': {
          'assumeRoleAction': '*',
          'principalAccount': '*'
        },
        'stack': '*',
        'env': {
          'account': '*',
          'region': '*'
        },
        'node': '*'
      },
      'assumeRolePolicy': '*',
      'missing': 'boolean',
      'rolePath': '*',
      'attachInlinePolicy': [
        '*'
      ],
      'addManagedPolicy': [
        {
          'managedPolicyArn': '*'
        }
      ],
      'addToPolicy': [
        '*'
      ],
      'addToPrincipalPolicy': [
        '*'
      ],
      'grant': [
        {
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*'
        },
        '*'
      ],
      'grantPassRole': [
        {
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*'
        }
      ],
      'grantAssumeRole': [
        {
          'assumeRoleAction': '*',
          'policyFragment': '*',
          'principalAccount': '*'
        }
      ]
    }
  },
  'pipelines.lib': {
    'AssetSingletonRole': {
      'assumedBy': {
        'assumeRoleAction': '*',
        'policyFragment': '*',
        'principalAccount': '*'
      },
      'externalId': '*',
      'externalIds': '*',
      'managedPolicies': {
        'managedPolicyArn': '*'
      },
      'inlinePolicies': '*',
      'path': '*',
      'permissionsBoundary': {
        'managedPolicyArn': '*'
      },
      'roleName': '*',
      'maxSessionDuration': '*',
      'description': '*',
      'addToPrincipalPolicy': [
        '*'
      ],
      'addAssumeRole': [
        '*'
      ]
    }
  }
};
