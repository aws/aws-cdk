import { Construct } from 'constructs';
import { CfnConnectionGroup } from './cloudfront.generated';
import { CfnTag, IResource, Resource, Stack } from '../../core';
import { addConstructMetadata } from '../../core/lib/metadata-resource';

/**
 * Interface for CloudFront Connection Groups
 */
export interface IConnectionGroup extends IResource {
  /**
   * The name of the connection group
   *
   * @attribute
   */
  readonly connectionGroupName: string;

  /**
   * The routing endpoint (also known as the DNS name) that is assigned to the connection group, such as d111111abcdef8.cloudfront.net.
   *
   * @attribute
   */
  readonly routingEndpoint: string;

  /**
   * The Amazon Resource Name (ARN) of the connection group.
   *
   * @attribute
   */
  readonly arn: string;

  /**
   * The unique identifier for the connection group.
   *
   * @attribute
   */
  readonly connectionGroupId: string;

}

/**
 * Attributes for importing an existing connection group
 */
export interface ConnectionGroupAttributes {
  /**
   * The name of the connection group
   */
  readonly connectionGroupName: string;

  /**
   * The routing endpoint (also known as the DNS name) that is assigned to the connection group, such as d111111abcdef8.cloudfront.net.
   */
  readonly routingEndpoint: string;

  /**
   * The unique identifier for the connection group.
   */
  readonly connectionGroupId: string;
}

/**
 * Properties for a Connection Group
 */
export interface ConnectionGroupProps {
  /**
   * The name of the connection group.
   * @default - Autogenerated name
   */
  readonly connectionGroupName?: string;

  /**
   * Whether the connection group is enabled
   * @default true
   */
  readonly enabled?: boolean;

  /**
   * Whether IPv6 is enabled for the connection group
   * @default true
   */
  readonly ipv6Enabled?: boolean;

  /**
   * The ID of the Anycast static IP list.
   * @default - no IP List
   */
  readonly anycastIpListId?: string;

  /**
   * Complex tags for the connection group
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-connectiongroup.html#cfn-cloudfront-connectiongroup-tags
   *
   * @default - no tags
   */
  readonly tags?: ConnectionGroupTag [];
}

/**
 * Tag for a Connection Group
 *
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-connectiongroup.html#cfn-cloudfront-connectiongroup-tags
 */
export interface ConnectionGroupTag extends CfnTag {

}

/**
 * A CloudFront connection group.
 * @resource AWS::CloudFront::ConnectionGroup
 */
export class ConnectionGroup extends Resource implements IConnectionGroup {
  /**
   * Import an existing connection group
   */
  public static fromConnectionGroupAttributes(scope: Construct, id: string, attrs: ConnectionGroupAttributes): IConnectionGroup {
    return new class extends Resource implements IConnectionGroup {
      public readonly connectionGroupName: string;
      public readonly routingEndpoint: string;
      public readonly arn: string;
      public readonly connectionGroupId: string;

      constructor() {
        super(scope, id);
        this.connectionGroupName = attrs.connectionGroupName;
        this.routingEndpoint = attrs.routingEndpoint;
        this.connectionGroupId = attrs.connectionGroupId;
        this.arn = Stack.of(this).formatArn({
          service: 'cloudfront',
          resource: 'connection-group',
          resourceName: attrs.connectionGroupId,
        });
      }
    }();
  }

  public readonly connectionGroupName: string;
  public readonly routingEndpoint: string;
  public readonly arn: string;
  public readonly connectionGroupId: string;

  constructor(scope: Construct, id: string, props?: ConnectionGroupProps) {
    super(scope, id);
    // Enhanced CDK Analytics Telemetry
    addConstructMetadata(this, props);

    this.connectionGroupName = props?.connectionGroupName ?? `${Stack.of(this).stackName}${this.node.id}`;

    const connectionGroup = new CfnConnectionGroup(this, 'Resource', {
      name: this.connectionGroupName,
      anycastIpListId: props?.anycastIpListId,
      enabled: props?.enabled ?? true,
      ipv6Enabled: props?.ipv6Enabled ?? true,
      tags: props?.tags,
    });

    this.routingEndpoint = connectionGroup.attrRoutingEndpoint;
    this.arn = connectionGroup.attrArn;
    this.connectionGroupId = connectionGroup.ref;
  }
}
